[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python",
    "section": "",
    "text": "guebin Choi, Professor of Statistics, Jeonbuk National University\ngithub\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJul 25, 2023\n\n\nSummer Program: Python Programming _ Day2 Quiz\n\n\n김보람 \n\n\n\n\nJul 24, 2023\n\n\nSummer Program: Python Programming _ Day1 Quiz\n\n\n김보람 \n\n\n\n\nJun 6, 2022\n\n\n파이썬 (0606) 14주차\n\n\n김보람 \n\n\n\n\nMay 30, 2022\n\n\n파이썬 (0530) 13주차\n\n\n김보람 \n\n\n\n\nMay 25, 2022\n\n\n파이썬 (0525) 13주차\n\n\n김보람 \n\n\n\n\nMay 23, 2022\n\n\n파이썬 (0523) 12주차\n\n\n김보람 \n\n\n\n\nMay 18, 2022\n\n\n파이썬 (0518) 12주차\n\n\n김보람 \n\n\n\n\nMay 16, 2022\n\n\n파이썬 (0516) 11주차\n\n\n김보람 \n\n\n\n\nMay 11, 2022\n\n\n파이썬 (0511) 11주차\n\n\n김보람 \n\n\n\n\nMay 9, 2022\n\n\n파이썬 (0509) 10주차\n\n\n김보람 \n\n\n\n\nMay 6, 2022\n\n\n파이썬 (0506) 10주차\n\n\n김보람 \n\n\n\n\nApr 18, 2022\n\n\n파이썬 (0418) 7주차\n\n\n김보람 \n\n\n\n\nApr 13, 2022\n\n\n파이썬 (0413) 7주차\n\n\n김보람 \n\n\n\n\nApr 11, 2022\n\n\n파이썬 (0411) 6주차\n\n\n김보람 \n\n\n\n\nApr 6, 2022\n\n\n파이썬 (0406) 5주차\n\n\n김보람 \n\n\n\n\nApr 4, 2022\n\n\n파이썬 (0404) 5주차\n\n\n김보람 \n\n\n\n\nMar 28, 2022\n\n\n파이썬 (0328) 4주차\n\n\n김보람 \n\n\n\n\nMar 23, 2022\n\n\n파이썬 (0323) 4주차\n\n\n김보람 \n\n\n\n\nMar 21, 2022\n\n\n파이썬 (0321) 3주차\n\n\n김보람 \n\n\n\n\nMar 16, 2022\n\n\n파이썬 (0316) 3주차\n\n\n김보람 \n\n\n\n\nMar 14, 2022\n\n\n파이썬 (0314) 2주차\n\n\n김보람 \n\n\n\n\nMar 7, 2022\n\n\n파이썬 (0307) 1주차\n\n\n김보람 \n\n\n\n\nDec 12, 2021\n\n\n파이썬 프로그래밍 15주차: 클래스-상속\n\n\n김보람 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day2 Quiz.html",
    "href": "posts/Summer Program-Python Programming Day2 Quiz.html",
    "title": "Summer Program: Python Programming _ Day2 Quiz",
    "section": "",
    "text": "title: “Summer Program: Python Programming _ Day2 Quiz” author: “김보람” date: “07/25/2023”"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day2 Quiz.html#lesson",
    "href": "posts/Summer Program-Python Programming Day2 Quiz.html#lesson",
    "title": "Summer Program: Python Programming _ Day2 Quiz",
    "section": "lesson",
    "text": "lesson\n\n_category = ['A']*5+['B']*5\n_value = np.concatenate([np.random.randn(5), np.random.randn(5)+10])\ndf = pd.DataFrame({'category':_category, 'value':_value})\ndf\n\n\n\n\n\n\n\n\ncategory\nvalue\n\n\n\n\n0\nA\n1.086803\n\n\n1\nA\n0.448341\n\n\n2\nA\n0.575944\n\n\n3\nA\n0.277854\n\n\n4\nA\n-1.924633\n\n\n5\nB\n9.844358\n\n\n6\nB\n9.819660\n\n\n7\nB\n9.425310\n\n\n8\nB\n10.191885\n\n\n9\nB\n11.187810\n\n\n\n\n\n\n\n\ndf.groupby(\"category\").mean()\n\n\n\n\n\n\n\n\nvalue\n\n\ncategory\n\n\n\n\n\nA\n0.092862\n\n\nB\n10.093805\n\n\n\n\n\n\n\n\ndf.groupby(\"category\").aggregate(np.mean)\n\n\n\n\n\n\n\n\nvalue\n\n\ncategory\n\n\n\n\n\nA\n0.092862\n\n\nB\n10.093805\n\n\n\n\n\n\n\n\nflights data\n\ndf=pd.read_csv('https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/flights.csv')\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 58492 entries, 0 to 58491\nData columns (total 14 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   MONTH      58492 non-null  int64  \n 1   DAY        58492 non-null  int64  \n 2   WEEKDAY    58492 non-null  int64  \n 3   AIRLINE    58492 non-null  object \n 4   ORG_AIR    58492 non-null  object \n 5   DEST_AIR   58492 non-null  object \n 6   SCHED_DEP  58492 non-null  int64  \n 7   DEP_DELAY  57659 non-null  float64\n 8   AIR_TIME   57474 non-null  float64\n 9   DIST       58492 non-null  int64  \n 10  SCHED_ARR  58492 non-null  int64  \n 11  ARR_DELAY  57474 non-null  float64\n 12  DIVERTED   58492 non-null  int64  \n 13  CANCELLED  58492 non-null  int64  \ndtypes: float64(3), int64(8), object(3)\nmemory usage: 6.2+ MB\n\n\n- 예제1: 항공사(AIRLINE)별로 도착지연시간의(ARR_DELAY)의 평균을 구하라.\n\ndf.groupby(\"AIRLINE\")[\"ARR_DELAY\"].mean()\n\nAIRLINE\nAA     5.542661\nAS    -0.833333\nB6     8.692593\nDL     0.339691\nEV     7.034580\nF9    13.630651\nHA     4.972973\nMQ     6.860591\nNK    18.436070\nOO     7.593463\nUA     7.765755\nUS     1.681105\nVX     5.348884\nWN     6.397353\nName: ARR_DELAY, dtype: float64\n\n\n\ndf.groupby(\"AIRLINE\").aggregate({'ARR_DELAY':[np.mean,'count']})\n\n\n\n\n\n\n\n\nARR_DELAY\n\n\n\nmean\ncount\n\n\nAIRLINE\n\n\n\n\n\n\nAA\n5.542661\n8720\n\n\nAS\n-0.833333\n768\n\n\nB6\n8.692593\n540\n\n\nDL\n0.339691\n10539\n\n\nEV\n7.034580\n5697\n\n\nF9\n13.630651\n1305\n\n\nHA\n4.972973\n111\n\n\nMQ\n6.860591\n3314\n\n\nNK\n18.436070\n1486\n\n\nOO\n7.593463\n6425\n\n\nUA\n7.765755\n7680\n\n\nUS\n1.681105\n1593\n\n\nVX\n5.348884\n986\n\n\nWN\n6.397353\n8310\n\n\n\n\n\n\n\n- 예제2: 항공사(AIRLINE)별로 비행취소건수(CANCELLED)의 합계를 구하라. 취소건수가 가장 높은 두개의 항공사는 어디인가?\n\ndf.groupby(\"AIRLINE\").aggregate({'CANCELLED':'sum'}).sort_values(by=\"CANCELLED\", ascending=False)\n\n\n\n\n\n\n\n\nCANCELLED\n\n\nAIRLINE\n\n\n\n\n\nAA\n154\n\n\nMQ\n152\n\n\nEV\n146\n\n\nOO\n142\n\n\nUA\n93\n\n\nWN\n93\n\n\nDL\n38\n\n\nNK\n25\n\n\nUS\n21\n\n\nF9\n10\n\n\nVX\n6\n\n\nB6\n1\n\n\nAS\n0\n\n\nHA\n0\n\n\n\n\n\n\n\n- 예제3: 항공사(AIRLINE)별로 비행취소율(CANCELLED)을 구하라. 비행취소율이 가장 높은 두개의 항공사는 어디인가?\n\ndf.groupby(\"AIRLINE\").aggregate({'CANCELLED':'mean'}).sort_values(by=\"CANCELLED\", ascending=False)\n\n\n\n\n\n\n\n\nCANCELLED\n\n\nAIRLINE\n\n\n\n\n\nMQ\n0.043791\n\n\nEV\n0.024923\n\n\nOO\n0.021554\n\n\nAA\n0.017303\n\n\nNK\n0.016491\n\n\nUS\n0.013003\n\n\nUA\n0.011935\n\n\nWN\n0.011048\n\n\nF9\n0.007593\n\n\nVX\n0.006042\n\n\nDL\n0.003585\n\n\nB6\n0.001842\n\n\nAS\n0.000000\n\n\nHA\n0.000000\n\n\n\n\n\n\n\n- 예제5: 아래는 운행거리의 요약통계량이다. 운행거리를 구간별로 [-np.inf,391,690,1199,np.inf]와 같이 나눈뒤 비행취소건수와 취소율을 구하여라.\n\ndf.DIST.describe()\n\ncount    58492.000000\nmean       872.900072\nstd        624.996805\nmin         67.000000\n25%        391.000000\n50%        690.000000\n75%       1199.000000\nmax       4502.000000\nName: DIST, dtype: float64\n\n\n\n_bin = [-np.inf,391,690,1199,np.inf]\n\n\ndf.assign(DIST2 = pd.cut(df.DIST,_bin)).groupby('DIST2').agg('mean')\n\n\n\n\n\n\n\n\nMONTH\nDAY\nWEEKDAY\nSCHED_DEP\nDEP_DELAY\nAIR_TIME\nDIST\nSCHED_ARR\nARR_DELAY\nDIVERTED\nCANCELLED\n\n\nDIST2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(-inf, 391.0]\n6.120488\n15.719539\n3.901425\n1450.911398\n9.414477\n44.863971\n259.463094\n1552.313161\n6.320828\n0.000814\n0.022659\n\n\n(391.0, 690.0]\n6.215019\n15.736686\n3.929315\n1422.562246\n10.105660\n79.233721\n547.309611\n1563.083018\n5.673505\n0.002549\n0.013503\n\n\n(690.0, 1199.0]\n6.244324\n15.643155\n3.934032\n1355.024318\n12.076761\n121.376579\n909.723096\n1573.918111\n6.603278\n0.002553\n0.013637\n\n\n(1199.0, inf]\n6.304648\n15.710334\n3.943070\n1322.569298\n12.077681\n219.595209\n1794.080413\n1507.135670\n4.616760\n0.003484\n0.010313"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day2 Quiz.html#quiz",
    "href": "posts/Summer Program-Python Programming Day2 Quiz.html#quiz",
    "title": "Summer Program: Python Programming _ Day2 Quiz",
    "section": "Quiz",
    "text": "Quiz\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/HRDataset_v14.csv')\ndf\n\n\n\n\n\n\n\n\nEmployee_Name\nEmpID\nMarriedID\nMaritalStatusID\nGenderID\nEmpStatusID\nDeptID\nPerfScoreID\nFromDiversityJobFairID\nSalary\n...\nManagerName\nManagerID\nRecruitmentSource\nPerformanceScore\nEngagementSurvey\nEmpSatisfaction\nSpecialProjectsCount\nLastPerformanceReview_Date\nDaysLateLast30\nAbsences\n\n\n\n\n0\nAdinolfi, Wilson K\n10026\n0\n0\n1\n1\n5\n4\n0\n62506\n...\nMichael Albert\n22.0\nLinkedIn\nExceeds\n4.60\n5\n0\n1/17/2019\n0\n1\n\n\n1\nAit Sidi, Karthikeyan\n10084\n1\n1\n1\n5\n3\n3\n0\n104437\n...\nSimon Roup\n4.0\nIndeed\nFully Meets\n4.96\n3\n6\n2/24/2016\n0\n17\n\n\n2\nAkinkuolie, Sarah\n10196\n1\n1\n0\n5\n5\n3\n0\n64955\n...\nKissy Sullivan\n20.0\nLinkedIn\nFully Meets\n3.02\n3\n0\n5/15/2012\n0\n3\n\n\n3\nAlagbe,Trina\n10088\n1\n1\n0\n1\n5\n3\n0\n64991\n...\nElijiah Gray\n16.0\nIndeed\nFully Meets\n4.84\n5\n0\n1/3/2019\n0\n15\n\n\n4\nAnderson, Carol\n10069\n0\n2\n0\n5\n5\n3\n0\n50825\n...\nWebster Butler\n39.0\nGoogle Search\nFully Meets\n5.00\n4\n0\n2/1/2016\n0\n2\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n306\nWoodson, Jason\n10135\n0\n0\n1\n1\n5\n3\n0\n65893\n...\nKissy Sullivan\n20.0\nLinkedIn\nFully Meets\n4.07\n4\n0\n2/28/2019\n0\n13\n\n\n307\nYbarra, Catherine\n10301\n0\n0\n0\n5\n5\n1\n0\n48513\n...\nBrannon Miller\n12.0\nGoogle Search\nPIP\n3.20\n2\n0\n9/2/2015\n5\n4\n\n\n308\nZamora, Jennifer\n10010\n0\n0\n0\n1\n3\n4\n0\n220450\n...\nJanet King\n2.0\nEmployee Referral\nExceeds\n4.60\n5\n6\n2/21/2019\n0\n16\n\n\n309\nZhou, Julia\n10043\n0\n0\n0\n1\n3\n3\n0\n89292\n...\nSimon Roup\n4.0\nEmployee Referral\nFully Meets\n5.00\n3\n5\n2/1/2019\n0\n11\n\n\n310\nZima, Colleen\n10271\n0\n4\n0\n1\n5\n3\n0\n45046\n...\nDavid Stanley\n14.0\nLinkedIn\nFully Meets\n4.50\n5\n0\n1/30/2019\n0\n2\n\n\n\n\n311 rows × 36 columns\n\n\n\n\n1\n\ndf.groupby(by='RaceDesc').agg({'EmpID':'count'})\n\n\n\n\n\n\n\n\nEmpID\n\n\nRaceDesc\n\n\n\n\n\nAmerican Indian or Alaska Native\n3\n\n\nAsian\n29\n\n\nBlack or African American\n80\n\n\nHispanic\n1\n\n\nTwo or more races\n11\n\n\nWhite\n187\n\n\n\n\n\n\n\n\n\n2\n’RaceDesc==White’의 성별(Sex)임금차이는 2000이상이다.\n\ndf.groupby(by=['RaceDesc','Sex']).agg({'Salary':'mean'})\n\n\n\n\n\n\n\n\n\nSalary\n\n\nRaceDesc\nSex\n\n\n\n\n\nAmerican Indian or Alaska Native\nF\n63436.500000\n\n\nM\n70545.000000\n\n\nAsian\nF\n67520.117647\n\n\nM\n69939.416667\n\n\nBlack or African American\nF\n66963.829787\n\n\nM\n85066.121212\n\n\nHispanic\nM\n83667.000000\n\n\nTwo or more races\nF\n58068.500000\n\n\nM\n62313.800000\n\n\nWhite\nF\n68846.519231\n\n\nM\n65334.132530\n\n\n\n\n\n\n\n\n\n3\n퇴직한사람(Termd==1)은 모두 104명이며 백인여성의 퇴직자수가 가장 많다.\n\n(df.Termd==1).sum()\n\n104\n\n\n\ndf.groupby(['RaceDesc','Sex']).agg({'Termd':'sum'})\n\n\n\n\n\n\n\n\n\nTermd\n\n\nRaceDesc\nSex\n\n\n\n\n\nAmerican Indian or Alaska Native\nF\n0\n\n\nM\n0\n\n\nAsian\nF\n6\n\n\nM\n3\n\n\nBlack or African American\nF\n15\n\n\nM\n14\n\n\nHispanic\nM\n0\n\n\nTwo or more races\nF\n2\n\n\nM\n1\n\n\nWhite\nF\n37\n\n\nM\n26\n\n\n\n\n\n\n\n\n\n4\n퇴직한사람중 아시아인의 비율은 10%가 넘지 않는다.\n\ndf.groupby(by=['RaceDesc']).agg({'Termd':'sum'})\n\n\n\n\n\n\n\n\nTermd\n\n\nRaceDesc\n\n\n\n\n\nAmerican Indian or Alaska Native\n0\n\n\nAsian\n9\n\n\nBlack or African American\n29\n\n\nHispanic\n0\n\n\nTwo or more races\n3\n\n\nWhite\n63\n\n\n\n\n\n\n\n\n9/104\n\n0.08653846153846154\n\n\n\n\n5\n[성별(Sex), 결혼유무(MarriedID)] 별 연봉(Salary)의 평균을 조사하라. 어떠한 그룹이 가장 평균연봉이 적은가?\n\ndf.groupby(['Sex','MarriedID']).agg({'Salary':'mean'})\n\n\n\n\n\n\n\n\n\nSalary\n\n\nSex\nMarriedID\n\n\n\n\n\nF\n0\n66504.394231\n\n\n1\n69638.986111\n\n\nM\n0\n70967.939759\n\n\n1\n70089.038462\n\n\n\n\n\n\n\n\n\n6\n[성별(Sex), 인종별(RaceDesc)] 별 연봉(Salary)의 중앙값(‘median’)을 조사하라. 연봉의 중앙값이 가장 높은 그룹은 무엇인가?\n\ndf.groupby(['Sex','RaceDesc']).agg({'Salary':'median'})\n\n\n\n\n\n\n\n\n\nSalary\n\n\nSex\nRaceDesc\n\n\n\n\n\nF\nAmerican Indian or Alaska Native\n63436.5\n\n\nAsian\n63676.0\n\n\nBlack or African American\n61584.0\n\n\nTwo or more races\n57837.0\n\n\nWhite\n62405.0\n\n\nM\nAmerican Indian or Alaska Native\n70545.0\n\n\nAsian\n64731.0\n\n\nBlack or African American\n71339.0\n\n\nHispanic\n83667.0\n\n\nTwo or more races\n61568.0\n\n\nWhite\n61809.0\n\n\n\n\n\n\n\n\n\n7\n[성별(Sex), 인종별(RaceDesc)] 별 연봉(Salary)의 중앙값(‘median’)과 근무인원수를 함께 조사하라. 연봉의 중앙값이 가장 높은 그룹이 혜택을 받는 그룹이라고 느껴지는가?\n\ndf.groupby(['Sex','RaceDesc']).agg({'Salary':['median','count']})\n\n\n\n\n\n\n\n\n\nSalary\n\n\n\n\nmedian\ncount\n\n\nSex\nRaceDesc\n\n\n\n\n\n\nF\nAmerican Indian or Alaska Native\n63436.5\n2\n\n\nAsian\n63676.0\n17\n\n\nBlack or African American\n61584.0\n47\n\n\nTwo or more races\n57837.0\n6\n\n\nWhite\n62405.0\n104\n\n\nM\nAmerican Indian or Alaska Native\n70545.0\n1\n\n\nAsian\n64731.0\n12\n\n\nBlack or African American\n71339.0\n33\n\n\nHispanic\n83667.0\n1\n\n\nTwo or more races\n61568.0\n5\n\n\nWhite\n61809.0\n83"
  },
  {
    "objectID": "posts/2. Numpy/python 7_0413.html",
    "href": "posts/2. Numpy/python 7_0413.html",
    "title": "파이썬 (0413) 7주차",
    "section": "",
    "text": "import numpy as np"
  },
  {
    "objectID": "posts/2. Numpy/python 7_0413.html#numpy공부-5단계-랜덤모듈",
    "href": "posts/2. Numpy/python 7_0413.html#numpy공부-5단계-랜덤모듈",
    "title": "파이썬 (0413) 7주차",
    "section": "numpy공부 5단계 : 랜덤모듈",
    "text": "numpy공부 5단계 : 랜덤모듈\n\nnp.random.rand()\n- 0~1사이에서 10개의 난수 생성\n\nnp.random.rand(10)\n\narray([0.30133684, 0.33047977, 0.37682904, 0.34945581, 0.88634262,\n       0.272207  , 0.75103749, 0.55871507, 0.12304257, 0.88020941])\n\n\n- 0~2사이에서 10개의 난수 생성\n\nnp.random.rand(10)*2\n\narray([1.85950286, 0.90618509, 0.3153    , 0.47472741, 1.60545103,\n       1.07072774, 1.10650141, 0.77505785, 1.19933414, 1.76222208])\n\n\n- 1~2사이에서 10개의 난수 생성\n\nnp.random.rand(10)+1\n\narray([1.01747795, 1.52789889, 1.29223002, 1.53147587, 1.13455031,\n       1.51668185, 1.2430438 , 1.59676278, 1.8731811 , 1.36113831])\n\n\n- 1~3사이에서 10개의 난수 생성\n\nnp.random.rand(10)*2+1    # 1~3\n\narray([2.79324839, 2.37177079, 1.12638737, 1.71767497, 2.95057073,\n       1.23158048, 2.56688411, 2.94392262, 1.32675882, 2.29817471])\n\n\n\n\nnp.random.randn()\n- N(0,1) 에서 10개 추출\n\nnp.random.randn(10) # 표준정규분포에서 10개의 샘플 추출\n\narray([ 1.895967  , -0.26215342,  0.87906492,  0.45616171,  1.66244424,\n        0.72458419,  0.31057676, -0.55909889,  0.47656554,  0.35143513])\n\n\n- N(1,1)에서 10개 추출\n\nnp.random.randn(10)+1\n\narray([ 1.11007188, -0.44321876,  0.04904333, -0.10478302,  0.13301967,\n       -0.49468263,  1.7751611 , -0.84760291,  0.40840343,  0.638133  ])\n\n\n- N(0,4)에서 10개 추출 (평균이 0이고 분산이 4인 분포)\n\nnp.random.randn(10)*2\n\narray([-1.14364925,  2.60415043, -1.65488974, -0.59463897,  0.97607708,\n        2.33979589,  3.49290763, -1.50749403, -1.41447157,  0.45852112])\n\n\n- N(3,4)에서 10개 추출\n\nnp.random.randn(10)*2+3\n\narray([ 4.736406  ,  2.35419865,  2.8265146 ,  0.26470966, -0.4240817 ,\n        1.00836216,  6.23531314,  3.75134991,  0.60427655, -0.13645246])\n\n\n\n\nnp.random.randint()\n- [0,7)의 범위에서 하나의 정수를 랜덤으로 생성\n\nnp.random.randint(7)   #[0,7)의 범위에서 하나의 정수 생성\n\n3\n\n\n- [0,7)의 범위에서 20개의 정수를 랜덤으로 생성\n\nnp.random.randint(7,size=(20,))  # [0,7)의 범위에서 20개의 정수 생성\n\narray([2, 5, 5, 5, 2, 4, 3, 4, 1, 4, 1, 2, 3, 2, 4, 2, 2, 6, 1, 2])\n\n\n- [0,7)의 범우에서 (5,5) shape으로 정수를 랜덤으로 생성\n\nnp.random.randint(7,size=(5,5))  \n\narray([[1, 6, 2, 5, 0],\n       [3, 3, 3, 1, 0],\n       [4, 0, 2, 5, 6],\n       [1, 0, 1, 2, 0],\n       [6, 6, 5, 1, 3]])\n\n\n- 위와 같은 코드를 아래와 같이 구현가능\n\nnp.random.randint(low=7,size=(2,2))  # [0,7)의 범위에서 20개의 정수 생성\n\narray([[2, 4],\n       [6, 4]])\n\n\n- [10,20)의 범위에서 (5,5) shape 정수를 랜덤으로 생성\n\nnp.random.randint(low=10, high=20,size=(5,5))  \n\narray([[14, 19, 17, 14, 17],\n       [16, 11, 14, 17, 16],\n       [12, 11, 18, 17, 14],\n       [11, 15, 14, 18, 11],\n       [13, 19, 10, 17, 14]])\n\n\n- 의문: np.random.randint(low=7,size=(5,5)) 가 좀 이상하다. 사실 np.random.randint(high=7,size=(5,5))가 되어야 맞지 않는가?\n-&gt; 저도 그렇게 생각하긴 하는데요, 구현이 이렇게 되어있습니다. 도움말 확인!\nReturn random integers from the \"discrete uniform\" distribution of the specified dtype in the \"half-open\" interval [`low`, `high`). If `high` is None (the default), then results are from [0, `low`).\n\n\nnp.random.choice()\n- ver1\n\nnp.random.choice(5,20)  # [0,5)에서 20개를 뽑음, 중복허용\n\narray([3, 2, 0, 3, 3, 3, 0, 0, 2, 2, 0, 0, 0, 1, 3, 1, 3, 2, 0, 0])\n\n\n\nnp.random.randint(5, size=(20,))\n\narray([3, 2, 2, 3, 4, 1, 0, 1, 4, 1, 3, 2, 2, 2, 4, 3, 2, 4, 2, 3])\n\n\n- ver2\n\nnp.random.choice([0,1,2,3],20) # [0,1,2,3] 에서 20개를 뽑음 , 중복허용\n\narray([2, 0, 1, 3, 1, 1, 2, 2, 1, 2, 0, 1, 1, 0, 1, 0, 2, 3, 3, 1])\n\n\n\nnp.random.choice([\"apple\",\"orange\",\"banana\"],20)\n\narray(['orange', 'banana', 'banana', 'orange', 'banana', 'orange',\n       'banana', 'orange', 'apple', 'orange', 'orange', 'apple', 'apple',\n       'orange', 'apple', 'apple', 'orange', 'orange', 'apple', 'apple'],\n      dtype='&lt;U6')\n\n\n\nnp.random.choice([\"apple\",\"orange\",\"banana\"],2,replace=False) # 중복허용 X \n\narray(['apple', 'orange'], dtype='&lt;U6')\n\n\n\n\n통계분포\n\nnp.random.binomial(n=10, p=0.1, size=(5,)) #X1, ..., X5 ~ B(10,0.2)\n\narray([1, 0, 2, 0, 2])\n\n\n\nnp.random.normal(loc=10,scale=2,size=(5,)) # X1, ..., X5 ~ N(10,4) \n\narray([8.5617943 , 8.9716337 , 7.90650741, 6.59782362, 7.90620931])\n\n\n\nnp.radom.randn(5)*2 + 10와 같은코드\n\n\nnp.random.uniform(low=2,high=4,size=(5,)) # X1, ..., X5 ~ U(2,4)  #균일분포\n\narray([2.49501161, 3.10469251, 3.89920656, 2.33160764, 2.28406983])\n\n\n\nnp.random.rand(5)*2+2와 같은 코드\n\n\nnp.random.poisson(lam=5,size=(5,)) # X1,...,X5 ~ Poi(5) \n\narray([5, 5, 7, 4, 6])"
  },
  {
    "objectID": "posts/2. Numpy/python 7_0413.html#nupmy공부-6단계-기타-유용한-기본기능들",
    "href": "posts/2. Numpy/python 7_0413.html#nupmy공부-6단계-기타-유용한-기본기능들",
    "title": "파이썬 (0413) 7주차",
    "section": "nupmy공부 6단계: 기타 유용한 기본기능들",
    "text": "nupmy공부 6단계: 기타 유용한 기본기능들\n\nnp.where, np.argwhere\n\na=np.array([0,0,0,1,0])\na\n\narray([0, 0, 0, 1, 0])\n\n\n\nnp.where(a==1) # 조건 a==1을 만족하는 인덱스를 출력하라\n\n(array([3], dtype=int64),)\n\n\n\nnp.argwhere(a==1)\n\narray([[3]], dtype=int64)\n\n\n\nnp.argwhere(a==0)\n\narray([[0],\n       [1],\n       [2],\n       [4]], dtype=int64)\n\n\n- 2차원\n\nnp.random.seed(43052)\na=np.random.randn(12).reshape(3,4)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368],\n       [ 0.23778744,  0.35595116, -1.66307542, -1.38277318],\n       [-1.92684484, -1.4862163 ,  0.00692519, -0.03488725]])\n\n\n\nnp.where(a&lt;0) # 조건을 만족하는 인덱스가 (1,2), (1,3), (2,0), (2,1), (2,3) 이라는 의미\n\n(array([1, 1, 2, 2, 2], dtype=int64), array([2, 3, 0, 1, 3], dtype=int64))\n\n\n\nnp.argwhere(a&lt;0)  # 조건을 만족하는 인덱스가 (1,2), (1,3), (2,0), (2,1), (2,3) 이라는 의미\n\narray([[1, 2],\n       [1, 3],\n       [2, 0],\n       [2, 1],\n       [2, 3]], dtype=int64)\n\n\n\na[np.where(a&lt;0)]  # 조건을 만족하는 인덱스가 모두 출력=&gt; 1차원 array로 출력\n\narray([-1.66307542, -1.38277318, -1.92684484, -1.4862163 , -0.03488725])\n\n\n\na[np.argwhere(a&lt;0)]  # 출력불가능\n\nIndexError: index 3 is out of bounds for axis 0 with size 3\n\n\n\na[np.argwhere(a&lt;0)[0][0],np.argwhere(a&lt;0)[0][1]] # 어거지로 출력할수는 있음 \n\n-1.6630754187023522\n\n\n- np.where의 특수기능\n\nnp.random.seed(43052)\na=np.random.randn(12).reshape(3,4)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368],\n       [ 0.23778744,  0.35595116, -1.66307542, -1.38277318],\n       [-1.92684484, -1.4862163 ,  0.00692519, -0.03488725]])\n\n\n\nnp.where(a&lt;0,0,a)   #a&lt;0을 체크=&gt; 조건에 맞으면 0, 조건에 안맞으면 a 출력\n\narray([[0.38342049, 1.0841745 , 1.14277825, 0.30789368],\n       [0.23778744, 0.35595116, 0.        , 0.        ],\n       [0.        , 0.        , 0.00692519, 0.        ]])\n\n\n\nnp.where(a&lt;0,0,1) # #a&lt;0을 체크=&gt; 조건에 맞으면 0, 조건에 안맞으면 1 출력\n\narray([[1, 1, 1, 1],\n       [1, 1, 0, 0],\n       [0, 0, 1, 0]])\n\n\n- 요약 - np.where : 인덱스의 좌표를 읽는 가독성은 떨어짐. 그러나 조건에 맞는 원소를 출력하거나 조건에 맞는 특수기능을 처리하는 목적으로 좋은 함수 - np.argwhere : 인덱스의 좌표를 읽는 가독성은 좋은 편임. 그러나 조건에 맞는 원소를 출력하거나 처리하는 기능은 떨어짐\n\n\n인덱싱고급\n- 원래 a는 2d array\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n- 경우 1: 인덱싱 결과가 1d array로 나올 수 있음\n\na[0,:] # 인덱싱의 결과 축의 갯수가 바뀐다. 2d array -&gt; 1d array\n\narray([0, 1, 2, 3])\n\n\n- 경우2: 인덱싱 결과가 2d array로 나올 수 있음\n\na[[0,1],:] # 이것은 축의 숫자가 유지됨 2d array-&gt; 2d array\n\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n\n\n- 경우1의 상황에서도 축의 갯수를 유지하면서 인덱싱하려면?\n\na[[0],:] # 인덱싱의 결과 축의 갯수가 유지된다. 2d array-&gt;2d array\n\narray([[0, 1, 2, 3]])\n\n\n- 미묘한 차이를 이해할 것\n\na[:,0], a[:,[0]]\n\n(array([0, 4, 8]),\n array([[0],\n        [4],\n        [8]]))\n\n\n\n\nnp.ix_\n- 아래의 인덱싱을 비교하자\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\na[0:2,0:2]\n\narray([[0, 1],\n       [4, 5]])\n\n\n\na[[0,1],0:2]\n\narray([[0, 1],\n       [4, 5]])\n\n\n\na[0:2,[0,1]]\n\narray([[0, 1],\n       [4, 5]])\n\n\n- 언뜻 생각하면 위의 결과와 a[[0,1],[0,1]의 결과가 동일할 것 같다.\n\na[[0,1],[0,1]]\n\narray([0, 5])\n\n\n\n실제로는 [a[0,0],a[1,1]]이 array로 나옴\n\n- 사실 np.where에서 이미 관찰하였음\n\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\nnp.where(a % 5 ==0)\n\n(array([0, 1, 2], dtype=int64), array([0, 1, 2], dtype=int64))\n\n\n\na[np.where(a % 5 ==0)]\n\narray([ 0,  5, 10])\n\n\n\na[[0, 1, 2],[0, 1, 2]]\n\narray([ 0,  5, 10])\n\n\n- a[[0,1],[0,1]]이 a[0:2,0:2]를 의미하게 하려면 아래와 같이 하면 된다.\n\na[np.ix_([0,1],[0,1])] # 유용해보이지만 생각보다 잘 쓰이는건 아님 \n\narray([[0, 1],\n       [4, 5]])\n\n\n(숙제)\n\nnp.random.uniform(low=1.3,high=1.7,size=(10,))\n\narray([1.65411132, 1.42531485, 1.54567744, 1.44735207, 1.33217747,\n       1.48856969, 1.47329978, 1.38976795, 1.30469965, 1.66634909])\n\n\n위와 같은코드를 np.random.rand()를 이용하여 구현하라."
  },
  {
    "objectID": "posts/2. Numpy/python 5_0406.html",
    "href": "posts/2. Numpy/python 5_0406.html",
    "title": "파이썬 (0406) 5주차",
    "section": "",
    "text": "!pip install numpy \n\nCollecting numpy\n  Downloading numpy-1.24.1-cp39-cp39-win_amd64.whl (14.9 MB)\n     --------------------------------------- 14.9/14.9 MB 10.7 MB/s eta 0:00:00\nInstalling collected packages: numpy\nSuccessfully installed numpy-1.24.1\n\n\n\nimport numpy as np"
  },
  {
    "objectID": "posts/2. Numpy/python 5_0406.html#넘파이-공부-1단계",
    "href": "posts/2. Numpy/python 5_0406.html#넘파이-공부-1단계",
    "title": "파이썬 (0406) 5주차",
    "section": "넘파이 공부 1단계",
    "text": "넘파이 공부 1단계\n\n선언\n\nlist([1,2,3])\n\n[1, 2, 3]\n\n\n\n[1,2,3]\n\n[1, 2, 3]\n\n\n\na=np.array([1,2,3])  # list만들고 ndarray화 시킴\nl=[1,2,3]\n\n\n\n기본연산 브로드캐스팅\n\na\n\narray([1, 2, 3])\n\n\n\nl\n\n[1, 2, 3]\n\n\n\na+1 ## [1,2,3] + 1 = [2,3,4]\n\narray([2, 3, 4])\n\n\n\nl+1\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n\na+np.array([-1,-2,-3])\n\narray([0, 0, 0])\n\n\n\na-a\n\narray([0, 0, 0])\n\n\n\nl-l  # 리스트는 안됨\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n\na*2\n\narray([2, 4, 6])\n\n\n\nl*2\n\n[1, 2, 3, 1, 2, 3]\n\n\n\na/2\n\narray([0.5, 1. , 1.5])\n\n\n\nl/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n\na**2\n\narray([1, 4, 9])\n\n\n\nl**2\n\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n\n\n\na%2   # %2 = 2로 나눈 나머지 리턴\n\narray([1, 0, 1], dtype=int32)\n\n\n\nl%2\n\nTypeError: unsupported operand type(s) for %: 'list' and 'int'\n\n\n\n\n기타 수학연산 지원\n\nnp.sqrt(2)\n\n1.4142135623730951\n\n\n\nnp.sqrt(a), np.sqrt(l)\n\n(array([1.        , 1.41421356, 1.73205081]),\n array([1.        , 1.41421356, 1.73205081]))\n\n\n\nnp.log(a), np.log(l)\n\n(array([0.        , 0.69314718, 1.09861229]),\n array([0.        , 0.69314718, 1.09861229]))\n\n\n\nnp.exp(a), np.exp(l)\n\n(array([ 2.71828183,  7.3890561 , 20.08553692]),\n array([ 2.71828183,  7.3890561 , 20.08553692]))\n\n\n\nnp.sin(a), np.sin(l)\n\n(array([0.84147098, 0.90929743, 0.14112001]),\n array([0.84147098, 0.90929743, 0.14112001]))"
  },
  {
    "objectID": "posts/2. Numpy/python 5_0406.html#넘파이-공부-2단계",
    "href": "posts/2. Numpy/python 5_0406.html#넘파이-공부-2단계",
    "title": "파이썬 (0406) 5주차",
    "section": "넘파이 공부 2단계",
    "text": "넘파이 공부 2단계\n\n인덱싱 1차원\n- 선언\n\nl=[11,22,33,44,55,66]\na=np.array(l)\n\n- 인덱스로 접근\n\nl[0], l[1], l[2], l[3], l[4], l[5]\n\n(11, 22, 33, 44, 55, 66)\n\n\n\na[0], a[1], a[2], a[3], a[4], a[5]\n\n(11, 22, 33, 44, 55, 66)\n\n\n- : 이용 (슬라이싱)\n\nl[2:4] # index 2에서 시작, index 4는 포함하지 않음\n\n[33, 44]\n\n\n\na[2:4]\n\narray([33, 44])\n\n\n- 점수배열에 의한 익덱싱\n\na\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\n  a[[0,2,4]]  # index=0, index=2, index=4 에 해당하는 원소를 뽑고 싶다 -&gt; 가능\n\narray([11, 33, 55])\n\n\n\n l[[0,2,4]]    # 리스트는 불가능\n\nTypeError: list indices must be integers or slices, not list\n\n\n- 부울값에 의한 인덱싱\n\na\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na[[True, True, False, True, False, False]]\n\narray([11, 22, 44])\n\n\n응용하면?\n\na&lt;33\n\narray([ True,  True, False, False, False, False])\n\n\n\na[[ True,  True, False, False, False, False]]\n\narray([11, 22])\n\n\n\na[a&lt;33]\n\narray([11, 22])\n\n\n리스트는 불가능\n\nl&lt;33\n\nTypeError: '&lt;' not supported between instances of 'list' and 'int'\n\n\n\nl[[True, True, False, True, False, False]]\n\nTypeError: list indices must be integers or slices, not list\n\n\n\n\n인덱싱 2차원\n- 중첩리스트와 2차원 np.array 선언\n\nA = [[1,2,3,4],[-1,-2,-3,-4],[5,6,7,8],[-5,-6,-7,-8]]\nA2 = np.array(A)\n\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA\n\n[[1, 2, 3, 4], [-1, -2, -3, -4], [5, 6, 7, 8], [-5, -6, -7, -8]]\n\n\n- A의 원소 인덱싱\n\nA[0][0] # A의 (1,1)의 원소\n\n1\n\n\n\nA[1][2] # A의 (2,3)의 원소\n\n-3\n\n\n\nA[-1][0] # A의 (4,1)의 원소\n\n-5\n\n\n- A2의 원소 인덱싱\n\nA2[0][0]\n\n1\n\n\n\nA2[1][2] # A2의 (2,3)의 원소\n\n-3\n\n\n\nA2[-1][0] # A2의 (4,1)의 원소\n\n-5\n\n\n- A2에서만 되는 기술 (넘파이에서 제시하는 신기술, R에서는 기본적으로 쓰던것, 이중list는 불가능)\n\nA2[0,0]\n\n1\n\n\n\nA2[1,2] # A2의 (2,3)의 원소\n\n-3\n\n\n\nA2[-1,0] # A2의 (4,1)의 원소\n\n-5\n\n\n- 정수배열에 의한 인덱싱 & 슬라이싱!\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA2[0,0:2]   # 1행 1열, 1행 2열\n\narray([1, 2])\n\n\n\nA2[0,:]  # 1행\n\narray([1, 2, 3, 4])\n\n\n\nA2[0]  # 1행\n\narray([1, 2, 3, 4])\n\n\n\nA2[[0,2],:]   # 1행, 3행\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[[0,2]]   # 1행, 3행\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[:,0] # 1열\n\narray([ 1, -1,  5, -5])\n\n\n\nA2[:,[0]] # 1열\n\narray([[ 1],\n       [-1],\n       [ 5],\n       [-5]])\n\n\n\nA2[:,[0,2]] # 1열, 3열\n\narray([[ 1,  3],\n       [-1, -3],\n       [ 5,  7],\n       [-5, -7]])\n\n\n\nA2[0:2,[0,2]]  # 1행-2행 / 1열-3열\n\narray([[ 1,  3],\n       [-1, -3]])\n\n\n\n\n1차원 배열의 선언\n- 리스트나 튜플을 선언하고 형변환\n\nnp.array((1,2,3)) # 튜플-&gt;넘파이어레이\n\narray([1, 2, 3])\n\n\n\nnp.array([1,2,3]) # 리스트-&gt;넘파이어레이\n\narray([1, 2, 3])\n\n\n- range()를 이용해서 선언하고 형변환\n\nnp.array(range(10))  # range(10)-&gt;넘파이어레이\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n- np.zeros, np.ones\n\nnp.zeros(3)\n\narray([0., 0., 0.])\n\n\n\nnp.ones(4)\n\narray([1., 1., 1., 1.])\n\n\n- np.linspace\n\nnp.linspace(0,1,12)   # 0부터 1까지 12개로 쪼개기   (양끝점 모두 포함)\n\narray([0.        , 0.09090909, 0.18181818, 0.27272727, 0.36363636,\n       0.45454545, 0.54545455, 0.63636364, 0.72727273, 0.81818182,\n       0.90909091, 1.        ])\n\n\n\nlen(np.linspace(0,1,12))\n\n12\n\n\n- np.arange\n\nnp.arange(5)  #np.array(range(5))\n\narray([0, 1, 2, 3, 4])\n\n\n\nnp.arange(1,6)   #np.array(range(1,6))\n\narray([1, 2, 3, 4, 5])\n\n\n\n\nreshape\n- reshape: ndarray의 특수한 기능\n\na=np.array([11,22,33,44,55,66])\na  #길이가 6인 벡터\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\ntype(a)\n\nnumpy.ndarray\n\n\n\na.reshape\n\n&lt;function ndarray.reshape&gt;\n\n\n\na.reshape(2,3)  # (2,3) matrix라고 생각해도 무방\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\na.reshape(5,2)\n\nValueError: cannot reshape array of size 6 into shape (5,2)\n\n\nnote: reshape은 a자체를 변홧키는 것은 아님\n\na  # reshape은 a자체는 변화하지 않음\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\nb=a.reshape(2,3)  # a를 reshape한 결과를 b에 저장\nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\n a  # a는 여전히 그대로 있음\n\narray([11, 22, 33, 44, 55, 66])\n\n\n- 다시 b를 a처럼 바꾸고 싶다.\n\nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\nb.reshape(6) # b는 (2,3) matrix, 그런데 이것을 길이가 6인 벡터로 만들고 싶다.\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na.shape   # 길이가 1인 튜플\n\n(6,)\n\n\n\nb.shape   # 길이가 2인 튜플이니까 2차원 \n\n(2, 3)\n\n\n- reshape with -1\n\na=np.arange(24)  #np.array(range(24))\na\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.reshape(2,?) # 에러..\n\nSyntaxError: invalid syntax (2529973538.py, line 1)\n\n\n\na.reshape(2,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(3,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15],\n       [16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(4,-1)\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(7,-1)  # 나눠떨어지지 않으니까.. \n\nValueError: cannot reshape array of size 24 into shape (7,newaxis)\n\n\n\nb=a.reshape(12,-1)\nb\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb.reshape(24) # b를 다시 길이가 24인 벡터로 만들고 싶다.\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\nb.reshape(-1) # b를 다시 길이가 24인 벡터로 만들고 싶다.\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\n\n2차원 배열의 선언\n\n\nnp.zeros((3,3))\n\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\nnp.ones((3,3))\n\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n\n\n\nnp.eye(3) \n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\n\nnp.diag([1,2,3,-1])\n\narray([[ 1,  0,  0,  0],\n       [ 0,  2,  0,  0],\n       [ 0,  0,  3,  0],\n       [ 0,  0,  0, -1]])\n\n\n\n\n랜덤으로 생성\n\nnp.random.randn(10)  # 표준정규분포에서 10개를 뽑음\n\narray([-1.62694735, -0.46057632,  0.9092888 , -0.52150285, -0.0409467 ,\n        0.98561001,  1.87613924, -2.08870029,  0.28577046, -0.15794105])\n\n\n\nnp.random.rand(10)  # 0~1 사이에서 10개를 뽑음\n\narray([0.7377278 , 0.61091057, 0.17571601, 0.29298532, 0.90149596,\n       0.84002052, 0.50700681, 0.40217981, 0.30557984, 0.34392417])\n\n\n\nnp.random.randn(4).reshape(2,2)  # 표준정규분포에서 4개를 뽑고 (2,2) nparray로 형태변환\n\narray([[0.50093512, 0.74336071],\n       [0.91296027, 0.04033486]])\n\n\n\nnp.random.rand(4).reshape(2,2)  # 0~1에서 4개를 뽑고 (2,2) nparray로 형태변환\n\narray([[0.30484011, 0.57731961],\n       [0.30645542, 0.2189475 ]])\n\n\n\n\n행렬\n\nA=np.array(range(4)).reshape(2,2)\nA\n\narray([[0, 1],\n       [2, 3]])\n\n\n\nA.T #전치행렬\n\narray([[0, 2],\n       [1, 3]])\n\n\n\nnp.linalg.inv(A)   # 역행렬\n\narray([[-1.5,  0.5],\n       [ 1. ,  0. ]])\n\n\n\nA @ np.linalg.inv(A)  # 단위행렬   # @는 행렬곱을 수행\n\narray([[1., 0.],\n       [0., 1.]])"
  },
  {
    "objectID": "posts/2. Numpy/python 5_0406.html#숙제",
    "href": "posts/2. Numpy/python 5_0406.html#숙제",
    "title": "파이썬 (0406) 5주차",
    "section": "숙제",
    "text": "숙제\n\nA=np.array(range(6))\nA # 길이가 6인 벡터\n\narray([0, 1, 2, 3, 4, 5])\n\n\n위와 같이 길이가 6인 벡터 A를 (2,3) ndarray로 변경\n\nA.reshape(2,3)\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\nlen(A.reshape(2,3))\n\n2"
  },
  {
    "objectID": "posts/3. Pandas/python 10_0506 .html",
    "href": "posts/3. Pandas/python 10_0506 .html",
    "title": "파이썬 (0506) 10주차",
    "section": "",
    "text": "!pip install numpy\n!pip install pandas\n\nRequirement already satisfied: numpy in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (1.21.6)\nCollecting pandas\n  Downloading pandas-1.3.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.3 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 11.3/11.3 MB 89.6 MB/s eta 0:00:00a 0:00:01\nRequirement already satisfied: pytz&gt;=2017.3 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from pandas) (2022.7.1)\nRequirement already satisfied: numpy&gt;=1.17.3 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from pandas) (1.21.6)\nRequirement already satisfied: python-dateutil&gt;=2.7.3 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from pandas) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from python-dateutil&gt;=2.7.3-&gt;pandas) (1.16.0)\nInstalling collected packages: pandas\nSuccessfully installed pandas-1.3.5\n\n\n\nimport numpy as np\nimport pandas as pd\n\n\n부분 데이터 꺼내기: 판다스를 왜 써야할까?\n\n기본 인덱싱\n-예제1: 기본인덱싱\n\na='asdf'\na[2]\n\n'd'\n\n\n\na[-1]\n\n'f'\n\n\n- 예제2: 슬라이싱\n\na='asdf'\na[1:3]\n\n'sd'\n\n\n\na[-2:]\n\n'df'\n\n\n- 예제3: 스트라이딩\n\na='afsdf'\na[::2]\n\n'asf'\n\n\n- 예제4: 불가능한것\n\na='afsd'\na[[1,2]] # 리스트로 전달해서 뽑는것은 불가능 -&gt; 정수인덱스 리스트화시켜서 인덱싱하는것\n\nTypeError: string indices must be integers\n\n\n\na='afsd'\na[[True,True,False,True]] # 리스트로 전달해서 뽑는것은 불가능 -&gt; 정수인덱스 리스트화시켜서 인덱싱하는것\n\nTypeError: string indices must be integers\n\n\n\n\n팬시인덱싱\n- 예제1: 인덱스의 리스트(혹은 ndarray)를 전달\n\na=np.arange(5)\na[0]\n\n0\n\n\n\na[[0,1]]\n\narray([0, 1])\n\n\n\na[[0,1,-2]]\n\narray([0, 1, 3])\n\n\n- 예제2: bool로 이루어진 리스트 (혹은 ndarray)를 전달\n\na=np.arange(55,61)\na\n\narray([55, 56, 57, 58, 59, 60])\n\n\n\na[[True,True,False,True,True,False]]\n\narray([55, 56, 58, 59])\n\n\n\na&lt;58\n\narray([ True,  True,  True, False, False, False])\n\n\n\na[a&lt;58]\n\narray([55, 56, 57])\n\n\n\n\n2차원 자료형의 인덱싱\n- 예제1\n\na=np.arange(4*3).reshape(4,3)\na\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11]])\n\n\n\na[0:2,1]\n\narray([1, 4])\n\n\n- 예제2 : 차원을 유지하면서 인덱싱을 하고 싶으면?\n\na[0:2,[1]]\n\narray([[1],\n       [4]])\n\n\n\n\nHASH\n- 예제1 : (key, value)\n\nd={'att':67, 'rep':45, 'mid':30, 'fin':100}\nd\n\n{'att': 67, 'rep': 45, 'mid': 30, 'fin': 100}\n\n\n\nd['att'] # key를 넣으면 value가 리턴\n\n67\n\n\n- 예제2: numpy비교\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ntest_ndarray = np.array([key,att,rep,mid,fin],dtype=np.int64).T\n\n\ntest_dic\n\n{'202212377': {'att': 65, 'rep': 45, 'mid': 0, 'fin': 10},\n '202212473': {'att': 95, 'rep': 30, 'mid': 60, 'fin': 10},\n '202212310': {'att': 65, 'rep': 85, 'mid': 15, 'fin': 20},\n '202212460': {'att': 55, 'rep': 35, 'mid': 35, 'fin': 5},\n '202212320': {'att': 80, 'rep': 60, 'mid': 55, 'fin': 70},\n '202212329': {'att': 75, 'rep': 40, 'mid': 75, 'fin': 85},\n '202212408': {'att': 65, 'rep': 70, 'mid': 60, 'fin': 75},\n '202212319': {'att': 60, 'rep': 25, 'mid': 20, 'fin': 35},\n '202212348': {'att': 95, 'rep': 55, 'mid': 65, 'fin': 90},\n '202212306': {'att': 90, 'rep': 25, 'mid': 95, 'fin': 50},\n '202212308': {'att': 55, 'rep': 45, 'mid': 75, 'fin': 30},\n '202212366': {'att': 95, 'rep': 60, 'mid': 25, 'fin': 55},\n '202212367': {'att': 95, 'rep': 35, 'mid': 0, 'fin': 25},\n '202212461': {'att': 50, 'rep': 55, 'mid': 90, 'fin': 45},\n '202212354': {'att': 50, 'rep': 65, 'mid': 50, 'fin': 70},\n '202212361': {'att': 95, 'rep': 100, 'mid': 25, 'fin': 40},\n '202212400': {'att': 50, 'rep': 65, 'mid': 35, 'fin': 85},\n '202212490': {'att': 65, 'rep': 85, 'mid': 10, 'fin': 5},\n '202212404': {'att': 70, 'rep': 65, 'mid': 65, 'fin': 80},\n '202212326': {'att': 90, 'rep': 70, 'mid': 100, 'fin': 30},\n '202212452': {'att': 80, 'rep': 45, 'mid': 80, 'fin': 85},\n '202212362': {'att': 55, 'rep': 45, 'mid': 85, 'fin': 70},\n '202212396': {'att': 65, 'rep': 35, 'mid': 45, 'fin': 20},\n '202212356': {'att': 70, 'rep': 25, 'mid': 50, 'fin': 70},\n '202212305': {'att': 85, 'rep': 55, 'mid': 30, 'fin': 80},\n '202212398': {'att': 90, 'rep': 30, 'mid': 30, 'fin': 0},\n '202212410': {'att': 100, 'rep': 65, 'mid': 50, 'fin': 70},\n '202212385': {'att': 80, 'rep': 70, 'mid': 50, 'fin': 100},\n '202212430': {'att': 80, 'rep': 35, 'mid': 25, 'fin': 65},\n '202212498': {'att': 55, 'rep': 75, 'mid': 20, 'fin': 25},\n '202212423': {'att': 75, 'rep': 75, 'mid': 85, 'fin': 95},\n '202212327': {'att': 80, 'rep': 95, 'mid': 5, 'fin': 5},\n '202212347': {'att': 95, 'rep': 60, 'mid': 65, 'fin': 10},\n '202212483': {'att': 95, 'rep': 60, 'mid': 90, 'fin': 75},\n '202212447': {'att': 100, 'rep': 75, 'mid': 70, 'fin': 25},\n '202212496': {'att': 100, 'rep': 55, 'mid': 35, 'fin': 85},\n '202212358': {'att': 80, 'rep': 60, 'mid': 65, 'fin': 55},\n '202212399': {'att': 70, 'rep': 80, 'mid': 0, 'fin': 10},\n '202212459': {'att': 85, 'rep': 65, 'mid': 60, 'fin': 60},\n '202212313': {'att': 100, 'rep': 95, 'mid': 0, 'fin': 25},\n '202212304': {'att': 95, 'rep': 60, 'mid': 15, 'fin': 45},\n '202212431': {'att': 75, 'rep': 40, 'mid': 30, 'fin': 10},\n '202212325': {'att': 70, 'rep': 80, 'mid': 50, 'fin': 25},\n '202212471': {'att': 50, 'rep': 45, 'mid': 10, 'fin': 10},\n '202212463': {'att': 100, 'rep': 100, 'mid': 100, 'fin': 50},\n '202212441': {'att': 75, 'rep': 50, 'mid': 60, 'fin': 5},\n '202212445': {'att': 85, 'rep': 50, 'mid': 35, 'fin': 100},\n '202212323': {'att': 80, 'rep': 35, 'mid': 75, 'fin': 80},\n '202212442': {'att': 95, 'rep': 45, 'mid': 35, 'fin': 80},\n '202212346': {'att': 65, 'rep': 85, 'mid': 85, 'fin': 15},\n '202212411': {'att': 90, 'rep': 30, 'mid': 25, 'fin': 5},\n '202212468': {'att': 65, 'rep': 65, 'mid': 35, 'fin': 70},\n '202212331': {'att': 80, 'rep': 65, 'mid': 30, 'fin': 90},\n '202212345': {'att': 95, 'rep': 80, 'mid': 45, 'fin': 35},\n '202212339': {'att': 65, 'rep': 75, 'mid': 50, 'fin': 35},\n '202212383': {'att': 90, 'rep': 55, 'mid': 100, 'fin': 30},\n '202212462': {'att': 95, 'rep': 25, 'mid': 95, 'fin': 90},\n '202212344': {'att': 100, 'rep': 50, 'mid': 80, 'fin': 10},\n '202212472': {'att': 50, 'rep': 55, 'mid': 35, 'fin': 60},\n '202212437': {'att': 90, 'rep': 70, 'mid': 35, 'fin': 25},\n '202212336': {'att': 50, 'rep': 55, 'mid': 15, 'fin': 75},\n '202212438': {'att': 80, 'rep': 50, 'mid': 55, 'fin': 90},\n '202212454': {'att': 50, 'rep': 75, 'mid': 65, 'fin': 90},\n '202212384': {'att': 70, 'rep': 40, 'mid': 90, 'fin': 5},\n '202212402': {'att': 65, 'rep': 85, 'mid': 20, 'fin': 90},\n '202212397': {'att': 60, 'rep': 30, 'mid': 0, 'fin': 50},\n '202212318': {'att': 50, 'rep': 65, 'mid': 15, 'fin': 0},\n '202212371': {'att': 60, 'rep': 95, 'mid': 30, 'fin': 70},\n '202212469': {'att': 70, 'rep': 70, 'mid': 5, 'fin': 0},\n '202212379': {'att': 75, 'rep': 45, 'mid': 15, 'fin': 75},\n '202212364': {'att': 50, 'rep': 60, 'mid': 15, 'fin': 50},\n '202212450': {'att': 85, 'rep': 90, 'mid': 90, 'fin': 90},\n '202212337': {'att': 80, 'rep': 25, 'mid': 85, 'fin': 20},\n '202212458': {'att': 55, 'rep': 75, 'mid': 95, 'fin': 90},\n '202212494': {'att': 85, 'rep': 30, 'mid': 45, 'fin': 15},\n '202212478': {'att': 65, 'rep': 30, 'mid': 45, 'fin': 15},\n '202212373': {'att': 85, 'rep': 95, 'mid': 35, 'fin': 25},\n '202212474': {'att': 60, 'rep': 25, 'mid': 10, 'fin': 50},\n '202212455': {'att': 95, 'rep': 45, 'mid': 90, 'fin': 35},\n '202212317': {'att': 85, 'rep': 50, 'mid': 60, 'fin': 45},\n '202212341': {'att': 60, 'rep': 50, 'mid': 100, 'fin': 70},\n '202212386': {'att': 100, 'rep': 75, 'mid': 60, 'fin': 0},\n '202212328': {'att': 100, 'rep': 90, 'mid': 85, 'fin': 75},\n '202212417': {'att': 55, 'rep': 100, 'mid': 100, 'fin': 60},\n '202212370': {'att': 70, 'rep': 60, 'mid': 30, 'fin': 40},\n '202212486': {'att': 70, 'rep': 90, 'mid': 95, 'fin': 40},\n '202212333': {'att': 55, 'rep': 50, 'mid': 0, 'fin': 5},\n '202212360': {'att': 100, 'rep': 100, 'mid': 45, 'fin': 90},\n '202212350': {'att': 85, 'rep': 70, 'mid': 90, 'fin': 80},\n '202212382': {'att': 100, 'rep': 85, 'mid': 65, 'fin': 85},\n '202212392': {'att': 60, 'rep': 65, 'mid': 35, 'fin': 15},\n '202212449': {'att': 65, 'rep': 75, 'mid': 75, 'fin': 85},\n '202212394': {'att': 65, 'rep': 25, 'mid': 40, 'fin': 0},\n '202212444': {'att': 75, 'rep': 75, 'mid': 50, 'fin': 40},\n '202212487': {'att': 50, 'rep': 55, 'mid': 80, 'fin': 55},\n '202212425': {'att': 75, 'rep': 30, 'mid': 20, 'fin': 50},\n '202212312': {'att': 100, 'rep': 50, 'mid': 25, 'fin': 65},\n '202212448': {'att': 90, 'rep': 30, 'mid': 95, 'fin': 35},\n '202212434': {'att': 55, 'rep': 100, 'mid': 80, 'fin': 0},\n '202212451': {'att': 75, 'rep': 60, 'mid': 15, 'fin': 40},\n '202212433': {'att': 60, 'rep': 25, 'mid': 25, 'fin': 50},\n '202212424': {'att': 85, 'rep': 35, 'mid': 10, 'fin': 60},\n '202212351': {'att': 60, 'rep': 100, 'mid': 55, 'fin': 40},\n '202212324': {'att': 70, 'rep': 55, 'mid': 50, 'fin': 75},\n '202212314': {'att': 80, 'rep': 65, 'mid': 95, 'fin': 85},\n '202212446': {'att': 65, 'rep': 35, 'mid': 15, 'fin': 65},\n '202212401': {'att': 85, 'rep': 70, 'mid': 100, 'fin': 0},\n '202212307': {'att': 100, 'rep': 30, 'mid': 60, 'fin': 65},\n '202212300': {'att': 65, 'rep': 70, 'mid': 55, 'fin': 70},\n '202212342': {'att': 85, 'rep': 55, 'mid': 85, 'fin': 90},\n '202212479': {'att': 85, 'rep': 95, 'mid': 80, 'fin': 10},\n '202212443': {'att': 85, 'rep': 70, 'mid': 75, 'fin': 5},\n '202212387': {'att': 100, 'rep': 35, 'mid': 70, 'fin': 0},\n '202212372': {'att': 95, 'rep': 45, 'mid': 55, 'fin': 65},\n '202212376': {'att': 95, 'rep': 85, 'mid': 40, 'fin': 65},\n '202212466': {'att': 55, 'rep': 50, 'mid': 30, 'fin': 85},\n '202212391': {'att': 85, 'rep': 50, 'mid': 5, 'fin': 65},\n '202212368': {'att': 75, 'rep': 90, 'mid': 85, 'fin': 85},\n '202212427': {'att': 95, 'rep': 70, 'mid': 10, 'fin': 5},\n '202212414': {'att': 85, 'rep': 35, 'mid': 80, 'fin': 95},\n '202212426': {'att': 95, 'rep': 50, 'mid': 80, 'fin': 90},\n '202212316': {'att': 100, 'rep': 65, 'mid': 75, 'fin': 40},\n '202212355': {'att': 95, 'rep': 70, 'mid': 70, 'fin': 0},\n '202212477': {'att': 95, 'rep': 70, 'mid': 20, 'fin': 25},\n '202212484': {'att': 100, 'rep': 60, 'mid': 10, 'fin': 5},\n '202212456': {'att': 55, 'rep': 35, 'mid': 25, 'fin': 10},\n '202212500': {'att': 60, 'rep': 90, 'mid': 40, 'fin': 5},\n '202212381': {'att': 85, 'rep': 90, 'mid': 85, 'fin': 75},\n '202212335': {'att': 75, 'rep': 85, 'mid': 25, 'fin': 35},\n '202212475': {'att': 55, 'rep': 30, 'mid': 50, 'fin': 45},\n '202212343': {'att': 70, 'rep': 60, 'mid': 75, 'fin': 75},\n '202212412': {'att': 80, 'rep': 30, 'mid': 95, 'fin': 5},\n '202212428': {'att': 90, 'rep': 85, 'mid': 80, 'fin': 15},\n '202212330': {'att': 90, 'rep': 25, 'mid': 95, 'fin': 5},\n '202212375': {'att': 60, 'rep': 85, 'mid': 50, 'fin': 20},\n '202212413': {'att': 90, 'rep': 50, 'mid': 95, 'fin': 95},\n '202212303': {'att': 75, 'rep': 95, 'mid': 65, 'fin': 40},\n '202212374': {'att': 60, 'rep': 40, 'mid': 35, 'fin': 0},\n '202212409': {'att': 55, 'rep': 100, 'mid': 15, 'fin': 80},\n '202212440': {'att': 70, 'rep': 75, 'mid': 80, 'fin': 0},\n '202212393': {'att': 75, 'rep': 65, 'mid': 25, 'fin': 20},\n '202212492': {'att': 90, 'rep': 75, 'mid': 80, 'fin': 25},\n '202212357': {'att': 50, 'rep': 75, 'mid': 75, 'fin': 20},\n '202212465': {'att': 55, 'rep': 45, 'mid': 35, 'fin': 45},\n '202212415': {'att': 90, 'rep': 70, 'mid': 90, 'fin': 0},\n '202212405': {'att': 75, 'rep': 30, 'mid': 100, 'fin': 60},\n '202212435': {'att': 90, 'rep': 85, 'mid': 0, 'fin': 40},\n '202212380': {'att': 85, 'rep': 70, 'mid': 35, 'fin': 0},\n '202212369': {'att': 100, 'rep': 75, 'mid': 100, 'fin': 85},\n '202212467': {'att': 55, 'rep': 35, 'mid': 20, 'fin': 10},\n '202212429': {'att': 70, 'rep': 75, 'mid': 90, 'fin': 90},\n '202212495': {'att': 90, 'rep': 90, 'mid': 55, 'fin': 55},\n '202212420': {'att': 55, 'rep': 60, 'mid': 40, 'fin': 0},\n '202212302': {'att': 100, 'rep': 90, 'mid': 5, 'fin': 30},\n '202212481': {'att': 50, 'rep': 55, 'mid': 25, 'fin': 80},\n '202212422': {'att': 100, 'rep': 100, 'mid': 90, 'fin': 55},\n '202212388': {'att': 70, 'rep': 45, 'mid': 70, 'fin': 75},\n '202212480': {'att': 85, 'rep': 95, 'mid': 85, 'fin': 90},\n '202212378': {'att': 55, 'rep': 25, 'mid': 95, 'fin': 45},\n '202212457': {'att': 75, 'rep': 30, 'mid': 10, 'fin': 95},\n '202212419': {'att': 65, 'rep': 85, 'mid': 15, 'fin': 60},\n '202212432': {'att': 70, 'rep': 90, 'mid': 70, 'fin': 0},\n '202212395': {'att': 60, 'rep': 85, 'mid': 70, 'fin': 85},\n '202212464': {'att': 100, 'rep': 25, 'mid': 10, 'fin': 20},\n '202212476': {'att': 75, 'rep': 25, 'mid': 80, 'fin': 25},\n '202212332': {'att': 90, 'rep': 95, 'mid': 40, 'fin': 80},\n '202212301': {'att': 95, 'rep': 90, 'mid': 50, 'fin': 50},\n '202212497': {'att': 90, 'rep': 90, 'mid': 65, 'fin': 85},\n '202212309': {'att': 95, 'rep': 75, 'mid': 50, 'fin': 40},\n '202212493': {'att': 55, 'rep': 60, 'mid': 70, 'fin': 5},\n '202212311': {'att': 95, 'rep': 85, 'mid': 0, 'fin': 15},\n '202212416': {'att': 65, 'rep': 60, 'mid': 35, 'fin': 20},\n '202212489': {'att': 65, 'rep': 50, 'mid': 5, 'fin': 5},\n '202212359': {'att': 90, 'rep': 25, 'mid': 60, 'fin': 25},\n '202212349': {'att': 100, 'rep': 40, 'mid': 40, 'fin': 15},\n '202212403': {'att': 70, 'rep': 25, 'mid': 100, 'fin': 75},\n '202212418': {'att': 100, 'rep': 30, 'mid': 70, 'fin': 70},\n '202212406': {'att': 50, 'rep': 55, 'mid': 55, 'fin': 5},\n '202212485': {'att': 70, 'rep': 35, 'mid': 70, 'fin': 100},\n '202212390': {'att': 70, 'rep': 60, 'mid': 60, 'fin': 80},\n '202212365': {'att': 55, 'rep': 45, 'mid': 90, 'fin': 5},\n '202212338': {'att': 55, 'rep': 55, 'mid': 10, 'fin': 95},\n '202212363': {'att': 65, 'rep': 80, 'mid': 10, 'fin': 30},\n '202212321': {'att': 90, 'rep': 25, 'mid': 35, 'fin': 55},\n '202212499': {'att': 100, 'rep': 30, 'mid': 30, 'fin': 85},\n '202212340': {'att': 70, 'rep': 85, 'mid': 70, 'fin': 65},\n '202212421': {'att': 60, 'rep': 100, 'mid': 45, 'fin': 100},\n '202212407': {'att': 70, 'rep': 25, 'mid': 100, 'fin': 15},\n '202212439': {'att': 70, 'rep': 35, 'mid': 80, 'fin': 25},\n '202212488': {'att': 65, 'rep': 60, 'mid': 30, 'fin': 35},\n '202212453': {'att': 95, 'rep': 35, 'mid': 40, 'fin': 95},\n '202212482': {'att': 50, 'rep': 80, 'mid': 65, 'fin': 90},\n '202212334': {'att': 100, 'rep': 40, 'mid': 80, 'fin': 80},\n '202212322': {'att': 55, 'rep': 30, 'mid': 95, 'fin': 100},\n '202212353': {'att': 65, 'rep': 40, 'mid': 65, 'fin': 70},\n '202212491': {'att': 55, 'rep': 70, 'mid': 40, 'fin': 95},\n '202212352': {'att': 65, 'rep': 85, 'mid': 25, 'fin': 85},\n '202212315': {'att': 85, 'rep': 85, 'mid': 100, 'fin': 10},\n '202212470': {'att': 80, 'rep': 65, 'mid': 35, 'fin': 60},\n '202212436': {'att': 50, 'rep': 95, 'mid': 45, 'fin': 85}}\n\n\n학번 ’202212460’에 해당하는 학생의 출석점수를 알고 싶다면?\n(풀이1)\n\ntest_dic['202212460']['att']\n\n55\n\n\n(풀이2)\n\ntest_ndarray\n\narray([['202212377', '202212473', '202212310', '202212460', '202212320',\n        '202212329', '202212408', '202212319', '202212348', '202212306',\n        '202212308', '202212366', '202212367', '202212461', '202212354',\n        '202212361', '202212400', '202212490', '202212404', '202212326',\n        '202212452', '202212362', '202212396', '202212356', '202212305',\n        '202212398', '202212410', '202212385', '202212430', '202212498',\n        '202212423', '202212327', '202212347', '202212483', '202212447',\n        '202212496', '202212358', '202212399', '202212459', '202212313',\n        '202212304', '202212431', '202212325', '202212471', '202212463',\n        '202212441', '202212445', '202212323', '202212442', '202212346',\n        '202212411', '202212468', '202212331', '202212345', '202212339',\n        '202212383', '202212462', '202212344', '202212472', '202212437',\n        '202212336', '202212438', '202212454', '202212384', '202212402',\n        '202212397', '202212318', '202212371', '202212469', '202212379',\n        '202212364', '202212450', '202212337', '202212458', '202212494',\n        '202212478', '202212373', '202212474', '202212455', '202212317',\n        '202212341', '202212386', '202212328', '202212417', '202212370',\n        '202212486', '202212333', '202212360', '202212350', '202212382',\n        '202212392', '202212449', '202212394', '202212444', '202212487',\n        '202212425', '202212312', '202212448', '202212434', '202212451',\n        '202212433', '202212424', '202212351', '202212324', '202212314',\n        '202212446', '202212401', '202212307', '202212300', '202212342',\n        '202212479', '202212443', '202212387', '202212372', '202212376',\n        '202212466', '202212391', '202212368', '202212427', '202212414',\n        '202212426', '202212316', '202212355', '202212477', '202212484',\n        '202212456', '202212500', '202212381', '202212335', '202212475',\n        '202212343', '202212412', '202212428', '202212330', '202212375',\n        '202212413', '202212303', '202212374', '202212409', '202212440',\n        '202212393', '202212492', '202212357', '202212465', '202212415',\n        '202212405', '202212435', '202212380', '202212369', '202212467',\n        '202212429', '202212495', '202212420', '202212302', '202212481',\n        '202212422', '202212388', '202212480', '202212378', '202212457',\n        '202212419', '202212432', '202212395', '202212464', '202212476',\n        '202212332', '202212301', '202212497', '202212309', '202212493',\n        '202212311', '202212416', '202212489', '202212359', '202212349',\n        '202212403', '202212418', '202212406', '202212485', '202212390',\n        '202212365', '202212338', '202212363', '202212321', '202212499',\n        '202212340', '202212421', '202212407', '202212439', '202212488',\n        '202212453', '202212482', '202212334', '202212322', '202212353',\n        '202212491', '202212352', '202212315', '202212470', '202212436'],\n       ['65', '95', '65', '55', '80', '75', '65', '60', '95', '90', '55',\n        '95', '95', '50', '50', '95', '50', '65', '70', '90', '80', '55',\n        '65', '70', '85', '90', '100', '80', '80', '55', '75', '80',\n        '95', '95', '100', '100', '80', '70', '85', '100', '95', '75',\n        '70', '50', '100', '75', '85', '80', '95', '65', '90', '65',\n        '80', '95', '65', '90', '95', '100', '50', '90', '50', '80',\n        '50', '70', '65', '60', '50', '60', '70', '75', '50', '85', '80',\n        '55', '85', '65', '85', '60', '95', '85', '60', '100', '100',\n        '55', '70', '70', '55', '100', '85', '100', '60', '65', '65',\n        '75', '50', '75', '100', '90', '55', '75', '60', '85', '60',\n        '70', '80', '65', '85', '100', '65', '85', '85', '85', '100',\n        '95', '95', '55', '85', '75', '95', '85', '95', '100', '95',\n        '95', '100', '55', '60', '85', '75', '55', '70', '80', '90',\n        '90', '60', '90', '75', '60', '55', '70', '75', '90', '50', '55',\n        '90', '75', '90', '85', '100', '55', '70', '90', '55', '100',\n        '50', '100', '70', '85', '55', '75', '65', '70', '60', '100',\n        '75', '90', '95', '90', '95', '55', '95', '65', '65', '90',\n        '100', '70', '100', '50', '70', '70', '55', '55', '65', '90',\n        '100', '70', '60', '70', '70', '65', '95', '50', '100', '55',\n        '65', '55', '65', '85', '80', '50'],\n       ['45', '30', '85', '35', '60', '40', '70', '25', '55', '25', '45',\n        '60', '35', '55', '65', '100', '65', '85', '65', '70', '45',\n        '45', '35', '25', '55', '30', '65', '70', '35', '75', '75', '95',\n        '60', '60', '75', '55', '60', '80', '65', '95', '60', '40', '80',\n        '45', '100', '50', '50', '35', '45', '85', '30', '65', '65',\n        '80', '75', '55', '25', '50', '55', '70', '55', '50', '75', '40',\n        '85', '30', '65', '95', '70', '45', '60', '90', '25', '75', '30',\n        '30', '95', '25', '45', '50', '50', '75', '90', '100', '60',\n        '90', '50', '100', '70', '85', '65', '75', '25', '75', '55',\n        '30', '50', '30', '100', '60', '25', '35', '100', '55', '65',\n        '35', '70', '30', '70', '55', '95', '70', '35', '45', '85', '50',\n        '50', '90', '70', '35', '50', '65', '70', '70', '60', '35', '90',\n        '90', '85', '30', '60', '30', '85', '25', '85', '50', '95', '40',\n        '100', '75', '65', '75', '75', '45', '70', '30', '85', '70',\n        '75', '35', '75', '90', '60', '90', '55', '100', '45', '95',\n        '25', '30', '85', '90', '85', '25', '25', '95', '90', '90', '75',\n        '60', '85', '60', '50', '25', '40', '25', '30', '55', '35', '60',\n        '45', '55', '80', '25', '30', '85', '100', '25', '35', '60',\n        '35', '80', '40', '30', '40', '70', '85', '85', '65', '95'],\n       ['0', '60', '15', '35', '55', '75', '60', '20', '65', '95', '75',\n        '25', '0', '90', '50', '25', '35', '10', '65', '100', '80', '85',\n        '45', '50', '30', '30', '50', '50', '25', '20', '85', '5', '65',\n        '90', '70', '35', '65', '0', '60', '0', '15', '30', '50', '10',\n        '100', '60', '35', '75', '35', '85', '25', '35', '30', '45',\n        '50', '100', '95', '80', '35', '35', '15', '55', '65', '90',\n        '20', '0', '15', '30', '5', '15', '15', '90', '85', '95', '45',\n        '45', '35', '10', '90', '60', '100', '60', '85', '100', '30',\n        '95', '0', '45', '90', '65', '35', '75', '40', '50', '80', '20',\n        '25', '95', '80', '15', '25', '10', '55', '50', '95', '15',\n        '100', '60', '55', '85', '80', '75', '70', '55', '40', '30', '5',\n        '85', '10', '80', '80', '75', '70', '20', '10', '25', '40', '85',\n        '25', '50', '75', '95', '80', '95', '50', '95', '65', '35', '15',\n        '80', '25', '80', '75', '35', '90', '100', '0', '35', '100',\n        '20', '90', '55', '40', '5', '25', '90', '70', '85', '95', '10',\n        '15', '70', '70', '10', '80', '40', '50', '65', '50', '70', '0',\n        '35', '5', '60', '40', '100', '70', '55', '70', '60', '90', '10',\n        '10', '35', '30', '70', '45', '100', '80', '30', '40', '65',\n        '80', '95', '65', '40', '25', '100', '35', '45'],\n       ['10', '10', '20', '5', '70', '85', '75', '35', '90', '50', '30',\n        '55', '25', '45', '70', '40', '85', '5', '80', '30', '85', '70',\n        '20', '70', '80', '0', '70', '100', '65', '25', '95', '5', '10',\n        '75', '25', '85', '55', '10', '60', '25', '45', '10', '25', '10',\n        '50', '5', '100', '80', '80', '15', '5', '70', '90', '35', '35',\n        '30', '90', '10', '60', '25', '75', '90', '90', '5', '90', '50',\n        '0', '70', '0', '75', '50', '90', '20', '90', '15', '15', '25',\n        '50', '35', '45', '70', '0', '75', '60', '40', '40', '5', '90',\n        '80', '85', '15', '85', '0', '40', '55', '50', '65', '35', '0',\n        '40', '50', '60', '40', '75', '85', '65', '0', '65', '70', '90',\n        '10', '5', '0', '65', '65', '85', '65', '85', '5', '95', '90',\n        '40', '0', '25', '5', '10', '5', '75', '35', '45', '75', '5',\n        '15', '5', '20', '95', '40', '0', '80', '0', '20', '25', '20',\n        '45', '0', '60', '40', '0', '85', '10', '90', '55', '0', '30',\n        '80', '55', '75', '90', '45', '95', '60', '0', '85', '20', '25',\n        '80', '50', '85', '40', '5', '15', '20', '5', '25', '15', '75',\n        '70', '5', '100', '80', '5', '95', '30', '55', '85', '65', '100',\n        '15', '25', '35', '95', '90', '80', '100', '70', '95', '85',\n        '10', '60', '85']], dtype='&lt;U21')\n\n\n\ntest_ndarray.T #학번이 string으로 들어가있어서 모든 자료가 string으로 되어있음.. \n\narray([['202212377', '65', '45', '0', '10'],\n       ['202212473', '95', '30', '60', '10'],\n       ['202212310', '65', '85', '15', '20'],\n       ['202212460', '55', '35', '35', '5'],\n       ['202212320', '80', '60', '55', '70'],\n       ['202212329', '75', '40', '75', '85'],\n       ['202212408', '65', '70', '60', '75'],\n       ['202212319', '60', '25', '20', '35'],\n       ['202212348', '95', '55', '65', '90'],\n       ['202212306', '90', '25', '95', '50'],\n       ['202212308', '55', '45', '75', '30'],\n       ['202212366', '95', '60', '25', '55'],\n       ['202212367', '95', '35', '0', '25'],\n       ['202212461', '50', '55', '90', '45'],\n       ['202212354', '50', '65', '50', '70'],\n       ['202212361', '95', '100', '25', '40'],\n       ['202212400', '50', '65', '35', '85'],\n       ['202212490', '65', '85', '10', '5'],\n       ['202212404', '70', '65', '65', '80'],\n       ['202212326', '90', '70', '100', '30'],\n       ['202212452', '80', '45', '80', '85'],\n       ['202212362', '55', '45', '85', '70'],\n       ['202212396', '65', '35', '45', '20'],\n       ['202212356', '70', '25', '50', '70'],\n       ['202212305', '85', '55', '30', '80'],\n       ['202212398', '90', '30', '30', '0'],\n       ['202212410', '100', '65', '50', '70'],\n       ['202212385', '80', '70', '50', '100'],\n       ['202212430', '80', '35', '25', '65'],\n       ['202212498', '55', '75', '20', '25'],\n       ['202212423', '75', '75', '85', '95'],\n       ['202212327', '80', '95', '5', '5'],\n       ['202212347', '95', '60', '65', '10'],\n       ['202212483', '95', '60', '90', '75'],\n       ['202212447', '100', '75', '70', '25'],\n       ['202212496', '100', '55', '35', '85'],\n       ['202212358', '80', '60', '65', '55'],\n       ['202212399', '70', '80', '0', '10'],\n       ['202212459', '85', '65', '60', '60'],\n       ['202212313', '100', '95', '0', '25'],\n       ['202212304', '95', '60', '15', '45'],\n       ['202212431', '75', '40', '30', '10'],\n       ['202212325', '70', '80', '50', '25'],\n       ['202212471', '50', '45', '10', '10'],\n       ['202212463', '100', '100', '100', '50'],\n       ['202212441', '75', '50', '60', '5'],\n       ['202212445', '85', '50', '35', '100'],\n       ['202212323', '80', '35', '75', '80'],\n       ['202212442', '95', '45', '35', '80'],\n       ['202212346', '65', '85', '85', '15'],\n       ['202212411', '90', '30', '25', '5'],\n       ['202212468', '65', '65', '35', '70'],\n       ['202212331', '80', '65', '30', '90'],\n       ['202212345', '95', '80', '45', '35'],\n       ['202212339', '65', '75', '50', '35'],\n       ['202212383', '90', '55', '100', '30'],\n       ['202212462', '95', '25', '95', '90'],\n       ['202212344', '100', '50', '80', '10'],\n       ['202212472', '50', '55', '35', '60'],\n       ['202212437', '90', '70', '35', '25'],\n       ['202212336', '50', '55', '15', '75'],\n       ['202212438', '80', '50', '55', '90'],\n       ['202212454', '50', '75', '65', '90'],\n       ['202212384', '70', '40', '90', '5'],\n       ['202212402', '65', '85', '20', '90'],\n       ['202212397', '60', '30', '0', '50'],\n       ['202212318', '50', '65', '15', '0'],\n       ['202212371', '60', '95', '30', '70'],\n       ['202212469', '70', '70', '5', '0'],\n       ['202212379', '75', '45', '15', '75'],\n       ['202212364', '50', '60', '15', '50'],\n       ['202212450', '85', '90', '90', '90'],\n       ['202212337', '80', '25', '85', '20'],\n       ['202212458', '55', '75', '95', '90'],\n       ['202212494', '85', '30', '45', '15'],\n       ['202212478', '65', '30', '45', '15'],\n       ['202212373', '85', '95', '35', '25'],\n       ['202212474', '60', '25', '10', '50'],\n       ['202212455', '95', '45', '90', '35'],\n       ['202212317', '85', '50', '60', '45'],\n       ['202212341', '60', '50', '100', '70'],\n       ['202212386', '100', '75', '60', '0'],\n       ['202212328', '100', '90', '85', '75'],\n       ['202212417', '55', '100', '100', '60'],\n       ['202212370', '70', '60', '30', '40'],\n       ['202212486', '70', '90', '95', '40'],\n       ['202212333', '55', '50', '0', '5'],\n       ['202212360', '100', '100', '45', '90'],\n       ['202212350', '85', '70', '90', '80'],\n       ['202212382', '100', '85', '65', '85'],\n       ['202212392', '60', '65', '35', '15'],\n       ['202212449', '65', '75', '75', '85'],\n       ['202212394', '65', '25', '40', '0'],\n       ['202212444', '75', '75', '50', '40'],\n       ['202212487', '50', '55', '80', '55'],\n       ['202212425', '75', '30', '20', '50'],\n       ['202212312', '100', '50', '25', '65'],\n       ['202212448', '90', '30', '95', '35'],\n       ['202212434', '55', '100', '80', '0'],\n       ['202212451', '75', '60', '15', '40'],\n       ['202212433', '60', '25', '25', '50'],\n       ['202212424', '85', '35', '10', '60'],\n       ['202212351', '60', '100', '55', '40'],\n       ['202212324', '70', '55', '50', '75'],\n       ['202212314', '80', '65', '95', '85'],\n       ['202212446', '65', '35', '15', '65'],\n       ['202212401', '85', '70', '100', '0'],\n       ['202212307', '100', '30', '60', '65'],\n       ['202212300', '65', '70', '55', '70'],\n       ['202212342', '85', '55', '85', '90'],\n       ['202212479', '85', '95', '80', '10'],\n       ['202212443', '85', '70', '75', '5'],\n       ['202212387', '100', '35', '70', '0'],\n       ['202212372', '95', '45', '55', '65'],\n       ['202212376', '95', '85', '40', '65'],\n       ['202212466', '55', '50', '30', '85'],\n       ['202212391', '85', '50', '5', '65'],\n       ['202212368', '75', '90', '85', '85'],\n       ['202212427', '95', '70', '10', '5'],\n       ['202212414', '85', '35', '80', '95'],\n       ['202212426', '95', '50', '80', '90'],\n       ['202212316', '100', '65', '75', '40'],\n       ['202212355', '95', '70', '70', '0'],\n       ['202212477', '95', '70', '20', '25'],\n       ['202212484', '100', '60', '10', '5'],\n       ['202212456', '55', '35', '25', '10'],\n       ['202212500', '60', '90', '40', '5'],\n       ['202212381', '85', '90', '85', '75'],\n       ['202212335', '75', '85', '25', '35'],\n       ['202212475', '55', '30', '50', '45'],\n       ['202212343', '70', '60', '75', '75'],\n       ['202212412', '80', '30', '95', '5'],\n       ['202212428', '90', '85', '80', '15'],\n       ['202212330', '90', '25', '95', '5'],\n       ['202212375', '60', '85', '50', '20'],\n       ['202212413', '90', '50', '95', '95'],\n       ['202212303', '75', '95', '65', '40'],\n       ['202212374', '60', '40', '35', '0'],\n       ['202212409', '55', '100', '15', '80'],\n       ['202212440', '70', '75', '80', '0'],\n       ['202212393', '75', '65', '25', '20'],\n       ['202212492', '90', '75', '80', '25'],\n       ['202212357', '50', '75', '75', '20'],\n       ['202212465', '55', '45', '35', '45'],\n       ['202212415', '90', '70', '90', '0'],\n       ['202212405', '75', '30', '100', '60'],\n       ['202212435', '90', '85', '0', '40'],\n       ['202212380', '85', '70', '35', '0'],\n       ['202212369', '100', '75', '100', '85'],\n       ['202212467', '55', '35', '20', '10'],\n       ['202212429', '70', '75', '90', '90'],\n       ['202212495', '90', '90', '55', '55'],\n       ['202212420', '55', '60', '40', '0'],\n       ['202212302', '100', '90', '5', '30'],\n       ['202212481', '50', '55', '25', '80'],\n       ['202212422', '100', '100', '90', '55'],\n       ['202212388', '70', '45', '70', '75'],\n       ['202212480', '85', '95', '85', '90'],\n       ['202212378', '55', '25', '95', '45'],\n       ['202212457', '75', '30', '10', '95'],\n       ['202212419', '65', '85', '15', '60'],\n       ['202212432', '70', '90', '70', '0'],\n       ['202212395', '60', '85', '70', '85'],\n       ['202212464', '100', '25', '10', '20'],\n       ['202212476', '75', '25', '80', '25'],\n       ['202212332', '90', '95', '40', '80'],\n       ['202212301', '95', '90', '50', '50'],\n       ['202212497', '90', '90', '65', '85'],\n       ['202212309', '95', '75', '50', '40'],\n       ['202212493', '55', '60', '70', '5'],\n       ['202212311', '95', '85', '0', '15'],\n       ['202212416', '65', '60', '35', '20'],\n       ['202212489', '65', '50', '5', '5'],\n       ['202212359', '90', '25', '60', '25'],\n       ['202212349', '100', '40', '40', '15'],\n       ['202212403', '70', '25', '100', '75'],\n       ['202212418', '100', '30', '70', '70'],\n       ['202212406', '50', '55', '55', '5'],\n       ['202212485', '70', '35', '70', '100'],\n       ['202212390', '70', '60', '60', '80'],\n       ['202212365', '55', '45', '90', '5'],\n       ['202212338', '55', '55', '10', '95'],\n       ['202212363', '65', '80', '10', '30'],\n       ['202212321', '90', '25', '35', '55'],\n       ['202212499', '100', '30', '30', '85'],\n       ['202212340', '70', '85', '70', '65'],\n       ['202212421', '60', '100', '45', '100'],\n       ['202212407', '70', '25', '100', '15'],\n       ['202212439', '70', '35', '80', '25'],\n       ['202212488', '65', '60', '30', '35'],\n       ['202212453', '95', '35', '40', '95'],\n       ['202212482', '50', '80', '65', '90'],\n       ['202212334', '100', '40', '80', '80'],\n       ['202212322', '55', '30', '95', '100'],\n       ['202212353', '65', '40', '65', '70'],\n       ['202212491', '55', '70', '40', '95'],\n       ['202212352', '65', '85', '25', '85'],\n       ['202212315', '85', '85', '100', '10'],\n       ['202212470', '80', '65', '35', '60'],\n       ['202212436', '50', '95', '45', '85']], dtype='&lt;U21')\n\n\n\ntest_ndarray\n\narray([[202212377,        65,        45,         0,        10],\n       [202212473,        95,        30,        60,        10],\n       [202212310,        65,        85,        15,        20],\n       [202212460,        55,        35,        35,         5],\n       [202212320,        80,        60,        55,        70],\n       [202212329,        75,        40,        75,        85],\n       [202212408,        65,        70,        60,        75],\n       [202212319,        60,        25,        20,        35],\n       [202212348,        95,        55,        65,        90],\n       [202212306,        90,        25,        95,        50],\n       [202212308,        55,        45,        75,        30],\n       [202212366,        95,        60,        25,        55],\n       [202212367,        95,        35,         0,        25],\n       [202212461,        50,        55,        90,        45],\n       [202212354,        50,        65,        50,        70],\n       [202212361,        95,       100,        25,        40],\n       [202212400,        50,        65,        35,        85],\n       [202212490,        65,        85,        10,         5],\n       [202212404,        70,        65,        65,        80],\n       [202212326,        90,        70,       100,        30],\n       [202212452,        80,        45,        80,        85],\n       [202212362,        55,        45,        85,        70],\n       [202212396,        65,        35,        45,        20],\n       [202212356,        70,        25,        50,        70],\n       [202212305,        85,        55,        30,        80],\n       [202212398,        90,        30,        30,         0],\n       [202212410,       100,        65,        50,        70],\n       [202212385,        80,        70,        50,       100],\n       [202212430,        80,        35,        25,        65],\n       [202212498,        55,        75,        20,        25],\n       [202212423,        75,        75,        85,        95],\n       [202212327,        80,        95,         5,         5],\n       [202212347,        95,        60,        65,        10],\n       [202212483,        95,        60,        90,        75],\n       [202212447,       100,        75,        70,        25],\n       [202212496,       100,        55,        35,        85],\n       [202212358,        80,        60,        65,        55],\n       [202212399,        70,        80,         0,        10],\n       [202212459,        85,        65,        60,        60],\n       [202212313,       100,        95,         0,        25],\n       [202212304,        95,        60,        15,        45],\n       [202212431,        75,        40,        30,        10],\n       [202212325,        70,        80,        50,        25],\n       [202212471,        50,        45,        10,        10],\n       [202212463,       100,       100,       100,        50],\n       [202212441,        75,        50,        60,         5],\n       [202212445,        85,        50,        35,       100],\n       [202212323,        80,        35,        75,        80],\n       [202212442,        95,        45,        35,        80],\n       [202212346,        65,        85,        85,        15],\n       [202212411,        90,        30,        25,         5],\n       [202212468,        65,        65,        35,        70],\n       [202212331,        80,        65,        30,        90],\n       [202212345,        95,        80,        45,        35],\n       [202212339,        65,        75,        50,        35],\n       [202212383,        90,        55,       100,        30],\n       [202212462,        95,        25,        95,        90],\n       [202212344,       100,        50,        80,        10],\n       [202212472,        50,        55,        35,        60],\n       [202212437,        90,        70,        35,        25],\n       [202212336,        50,        55,        15,        75],\n       [202212438,        80,        50,        55,        90],\n       [202212454,        50,        75,        65,        90],\n       [202212384,        70,        40,        90,         5],\n       [202212402,        65,        85,        20,        90],\n       [202212397,        60,        30,         0,        50],\n       [202212318,        50,        65,        15,         0],\n       [202212371,        60,        95,        30,        70],\n       [202212469,        70,        70,         5,         0],\n       [202212379,        75,        45,        15,        75],\n       [202212364,        50,        60,        15,        50],\n       [202212450,        85,        90,        90,        90],\n       [202212337,        80,        25,        85,        20],\n       [202212458,        55,        75,        95,        90],\n       [202212494,        85,        30,        45,        15],\n       [202212478,        65,        30,        45,        15],\n       [202212373,        85,        95,        35,        25],\n       [202212474,        60,        25,        10,        50],\n       [202212455,        95,        45,        90,        35],\n       [202212317,        85,        50,        60,        45],\n       [202212341,        60,        50,       100,        70],\n       [202212386,       100,        75,        60,         0],\n       [202212328,       100,        90,        85,        75],\n       [202212417,        55,       100,       100,        60],\n       [202212370,        70,        60,        30,        40],\n       [202212486,        70,        90,        95,        40],\n       [202212333,        55,        50,         0,         5],\n       [202212360,       100,       100,        45,        90],\n       [202212350,        85,        70,        90,        80],\n       [202212382,       100,        85,        65,        85],\n       [202212392,        60,        65,        35,        15],\n       [202212449,        65,        75,        75,        85],\n       [202212394,        65,        25,        40,         0],\n       [202212444,        75,        75,        50,        40],\n       [202212487,        50,        55,        80,        55],\n       [202212425,        75,        30,        20,        50],\n       [202212312,       100,        50,        25,        65],\n       [202212448,        90,        30,        95,        35],\n       [202212434,        55,       100,        80,         0],\n       [202212451,        75,        60,        15,        40],\n       [202212433,        60,        25,        25,        50],\n       [202212424,        85,        35,        10,        60],\n       [202212351,        60,       100,        55,        40],\n       [202212324,        70,        55,        50,        75],\n       [202212314,        80,        65,        95,        85],\n       [202212446,        65,        35,        15,        65],\n       [202212401,        85,        70,       100,         0],\n       [202212307,       100,        30,        60,        65],\n       [202212300,        65,        70,        55,        70],\n       [202212342,        85,        55,        85,        90],\n       [202212479,        85,        95,        80,        10],\n       [202212443,        85,        70,        75,         5],\n       [202212387,       100,        35,        70,         0],\n       [202212372,        95,        45,        55,        65],\n       [202212376,        95,        85,        40,        65],\n       [202212466,        55,        50,        30,        85],\n       [202212391,        85,        50,         5,        65],\n       [202212368,        75,        90,        85,        85],\n       [202212427,        95,        70,        10,         5],\n       [202212414,        85,        35,        80,        95],\n       [202212426,        95,        50,        80,        90],\n       [202212316,       100,        65,        75,        40],\n       [202212355,        95,        70,        70,         0],\n       [202212477,        95,        70,        20,        25],\n       [202212484,       100,        60,        10,         5],\n       [202212456,        55,        35,        25,        10],\n       [202212500,        60,        90,        40,         5],\n       [202212381,        85,        90,        85,        75],\n       [202212335,        75,        85,        25,        35],\n       [202212475,        55,        30,        50,        45],\n       [202212343,        70,        60,        75,        75],\n       [202212412,        80,        30,        95,         5],\n       [202212428,        90,        85,        80,        15],\n       [202212330,        90,        25,        95,         5],\n       [202212375,        60,        85,        50,        20],\n       [202212413,        90,        50,        95,        95],\n       [202212303,        75,        95,        65,        40],\n       [202212374,        60,        40,        35,         0],\n       [202212409,        55,       100,        15,        80],\n       [202212440,        70,        75,        80,         0],\n       [202212393,        75,        65,        25,        20],\n       [202212492,        90,        75,        80,        25],\n       [202212357,        50,        75,        75,        20],\n       [202212465,        55,        45,        35,        45],\n       [202212415,        90,        70,        90,         0],\n       [202212405,        75,        30,       100,        60],\n       [202212435,        90,        85,         0,        40],\n       [202212380,        85,        70,        35,         0],\n       [202212369,       100,        75,       100,        85],\n       [202212467,        55,        35,        20,        10],\n       [202212429,        70,        75,        90,        90],\n       [202212495,        90,        90,        55,        55],\n       [202212420,        55,        60,        40,         0],\n       [202212302,       100,        90,         5,        30],\n       [202212481,        50,        55,        25,        80],\n       [202212422,       100,       100,        90,        55],\n       [202212388,        70,        45,        70,        75],\n       [202212480,        85,        95,        85,        90],\n       [202212378,        55,        25,        95,        45],\n       [202212457,        75,        30,        10,        95],\n       [202212419,        65,        85,        15,        60],\n       [202212432,        70,        90,        70,         0],\n       [202212395,        60,        85,        70,        85],\n       [202212464,       100,        25,        10,        20],\n       [202212476,        75,        25,        80,        25],\n       [202212332,        90,        95,        40,        80],\n       [202212301,        95,        90,        50,        50],\n       [202212497,        90,        90,        65,        85],\n       [202212309,        95,        75,        50,        40],\n       [202212493,        55,        60,        70,         5],\n       [202212311,        95,        85,         0,        15],\n       [202212416,        65,        60,        35,        20],\n       [202212489,        65,        50,         5,         5],\n       [202212359,        90,        25,        60,        25],\n       [202212349,       100,        40,        40,        15],\n       [202212403,        70,        25,       100,        75],\n       [202212418,       100,        30,        70,        70],\n       [202212406,        50,        55,        55,         5],\n       [202212485,        70,        35,        70,       100],\n       [202212390,        70,        60,        60,        80],\n       [202212365,        55,        45,        90,         5],\n       [202212338,        55,        55,        10,        95],\n       [202212363,        65,        80,        10,        30],\n       [202212321,        90,        25,        35,        55],\n       [202212499,       100,        30,        30,        85],\n       [202212340,        70,        85,        70,        65],\n       [202212421,        60,       100,        45,       100],\n       [202212407,        70,        25,       100,        15],\n       [202212439,        70,        35,        80,        25],\n       [202212488,        65,        60,        30,        35],\n       [202212453,        95,        35,        40,        95],\n       [202212482,        50,        80,        65,        90],\n       [202212334,       100,        40,        80,        80],\n       [202212322,        55,        30,        95,       100],\n       [202212353,        65,        40,        65,        70],\n       [202212491,        55,        70,        40,        95],\n       [202212352,        65,        85,        25,        85],\n       [202212315,        85,        85,       100,        10],\n       [202212470,        80,        65,        35,        60],\n       [202212436,        50,        95,        45,        85]])\n\n\n(풀이2)\n\ntest_ndarray[test_ndarray[:,0] == 202212460]\n\narray([[202212460,        55,        35,        35,         5]])\n\n\n\ntest_ndarray[test_ndarray[:,0] == 202212460,1]   # 이게뭐여? 가독성이 떨어짐\n\narray([55])\n\n\n(풀이2)가 (풀이1)에 비하여 불편한 점 - test_ndarray의 첫칼럼은 student id이고 두번째 칼럼은 att라는 사실을 암기하고 있어야 한다. - student id가 아니고 만약에 학생이름(문자형)을 써서 데이터를 정리한다면 모든 자료형은 문자형이 되어야 한다. - 작성한 코드 가독성이 없다. (위치로 접근하므로)\n- 요약: hash 스타일로 정보를 추출하는 것이 유용할 때가 있다. 그리고 보통 hash 스타일로 정보를 뽑는것이 유리함.\nnumpy는 정보추출을 위해 개발된 자료형이 아니라 행렬 및 벡터의 수학연산을 지원하기 위해 개발된 자료형이다.)\n- 소망: 정보를 추출할때는 hash 스타일도 유용하다는 것은 ㅇㅋ \\(\\to\\) 하지만 난 가끔 넘파이스타일로 정보를 뽑고 싶엉. 그리고 딕셔너리 형태가 아니고 엑셀처럼(행렬처럼) 데이터를 보고 ㅅ피다!!! \\(\\to\\) pandas 개발\n\n\n\npandas 개발동기\n\n엑셀처럼 데이터를 테이블 형태로 정리하고 싶다.\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,20)\nrep = np.random.choice(np.arange(5,21)*5,20)\nmid = np.random.choice(np.arange(0,21)*5,20)\nfin = np.random.choice(np.arange(0,21)*5,20)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),20,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(20)}\ntest_ndarray = np.array([key,att,rep,mid,fin],dtype=np.int64).T\n\n\ntest_dic\n\n{'202212380': {'att': 65, 'rep': 55, 'mid': 50, 'fin': 40},\n '202212370': {'att': 95, 'rep': 100, 'mid': 50, 'fin': 80},\n '202212363': {'att': 65, 'rep': 90, 'mid': 60, 'fin': 30},\n '202212488': {'att': 55, 'rep': 80, 'mid': 75, 'fin': 80},\n '202212312': {'att': 80, 'rep': 30, 'mid': 30, 'fin': 100},\n '202212377': {'att': 75, 'rep': 40, 'mid': 100, 'fin': 15},\n '202212463': {'att': 65, 'rep': 45, 'mid': 45, 'fin': 90},\n '202212471': {'att': 60, 'rep': 60, 'mid': 25, 'fin': 0},\n '202212400': {'att': 95, 'rep': 65, 'mid': 20, 'fin': 10},\n '202212469': {'att': 90, 'rep': 80, 'mid': 80, 'fin': 20},\n '202212318': {'att': 55, 'rep': 75, 'mid': 35, 'fin': 25},\n '202212432': {'att': 95, 'rep': 95, 'mid': 45, 'fin': 0},\n '202212443': {'att': 95, 'rep': 55, 'mid': 15, 'fin': 35},\n '202212367': {'att': 50, 'rep': 80, 'mid': 40, 'fin': 30},\n '202212458': {'att': 50, 'rep': 55, 'mid': 15, 'fin': 85},\n '202212396': {'att': 95, 'rep': 30, 'mid': 30, 'fin': 95},\n '202212482': {'att': 50, 'rep': 50, 'mid': 45, 'fin': 10},\n '202212452': {'att': 65, 'rep': 55, 'mid': 15, 'fin': 45},\n '202212387': {'att': 70, 'rep': 70, 'mid': 40, 'fin': 35},\n '202212354': {'att': 90, 'rep': 90, 'mid': 80, 'fin': 90}}\n\n\n\n테이블 형태로 보고 싶다.\n\n(방법1) - 행렬이기는 하지만 방법 2,3,4에 비하여 우리가 원하는 만큼 가독성을 주는 형태는 아님\n\ntest_ndarray = np.array([key,att,rep,mid,fin],dtype=np.int64).T\ntest_ndarray\n\narray([[202212380,        65,        55,        50,        40],\n       [202212370,        95,       100,        50,        80],\n       [202212363,        65,        90,        60,        30],\n       [202212488,        55,        80,        75,        80],\n       [202212312,        80,        30,        30,       100],\n       [202212377,        75,        40,       100,        15],\n       [202212463,        65,        45,        45,        90],\n       [202212471,        60,        60,        25,         0],\n       [202212400,        95,        65,        20,        10],\n       [202212469,        90,        80,        80,        20],\n       [202212318,        55,        75,        35,        25],\n       [202212432,        95,        95,        45,         0],\n       [202212443,        95,        55,        15,        35],\n       [202212367,        50,        80,        40,        30],\n       [202212458,        50,        55,        15,        85],\n       [202212396,        95,        30,        30,        95],\n       [202212482,        50,        50,        45,        10],\n       [202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n(방법2)\n\npd.DataFrame(test_dic).T\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212370\n95\n100\n50\n80\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212377\n75\n40\n100\n15\n\n\n202212463\n65\n45\n45\n90\n\n\n202212471\n60\n60\n25\n0\n\n\n202212400\n95\n65\n20\n10\n\n\n202212469\n90\n80\n80\n20\n\n\n202212318\n55\n75\n35\n25\n\n\n202212432\n95\n95\n45\n0\n\n\n202212443\n95\n55\n15\n35\n\n\n202212367\n50\n80\n40\n30\n\n\n202212458\n50\n55\n15\n85\n\n\n202212396\n95\n30\n30\n95\n\n\n202212482\n50\n50\n45\n10\n\n\n202212452\n65\n55\n15\n45\n\n\n202212387\n70\n70\n40\n35\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n(방법3)\n\ntest_dic2 = {'att':{key[i]:att[i] for i in range(20)},\n             'rep':{key[i]:rep[i] for i in range(20)},\n             'mid':{key[i]:mid[i] for i in range(20)},\n             'fin':{key[i]:fin[i] for i in range(20)}}\n\n\ntest_dic2\n\n{'att': {'202212380': 65,\n  '202212370': 95,\n  '202212363': 65,\n  '202212488': 55,\n  '202212312': 80,\n  '202212377': 75,\n  '202212463': 65,\n  '202212471': 60,\n  '202212400': 95,\n  '202212469': 90,\n  '202212318': 55,\n  '202212432': 95,\n  '202212443': 95,\n  '202212367': 50,\n  '202212458': 50,\n  '202212396': 95,\n  '202212482': 50,\n  '202212452': 65,\n  '202212387': 70,\n  '202212354': 90},\n 'rep': {'202212380': 55,\n  '202212370': 100,\n  '202212363': 90,\n  '202212488': 80,\n  '202212312': 30,\n  '202212377': 40,\n  '202212463': 45,\n  '202212471': 60,\n  '202212400': 65,\n  '202212469': 80,\n  '202212318': 75,\n  '202212432': 95,\n  '202212443': 55,\n  '202212367': 80,\n  '202212458': 55,\n  '202212396': 30,\n  '202212482': 50,\n  '202212452': 55,\n  '202212387': 70,\n  '202212354': 90},\n 'mid': {'202212380': 50,\n  '202212370': 50,\n  '202212363': 60,\n  '202212488': 75,\n  '202212312': 30,\n  '202212377': 100,\n  '202212463': 45,\n  '202212471': 25,\n  '202212400': 20,\n  '202212469': 80,\n  '202212318': 35,\n  '202212432': 45,\n  '202212443': 15,\n  '202212367': 40,\n  '202212458': 15,\n  '202212396': 30,\n  '202212482': 45,\n  '202212452': 15,\n  '202212387': 40,\n  '202212354': 80},\n 'fin': {'202212380': 40,\n  '202212370': 80,\n  '202212363': 30,\n  '202212488': 80,\n  '202212312': 100,\n  '202212377': 15,\n  '202212463': 90,\n  '202212471': 0,\n  '202212400': 10,\n  '202212469': 20,\n  '202212318': 25,\n  '202212432': 0,\n  '202212443': 35,\n  '202212367': 30,\n  '202212458': 85,\n  '202212396': 95,\n  '202212482': 10,\n  '202212452': 45,\n  '202212387': 35,\n  '202212354': 90}}\n\n\n\npd.DataFrame(test_dic2)\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212370\n95\n100\n50\n80\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212377\n75\n40\n100\n15\n\n\n202212463\n65\n45\n45\n90\n\n\n202212471\n60\n60\n25\n0\n\n\n202212400\n95\n65\n20\n10\n\n\n202212469\n90\n80\n80\n20\n\n\n202212318\n55\n75\n35\n25\n\n\n202212432\n95\n95\n45\n0\n\n\n202212443\n95\n55\n15\n35\n\n\n202212367\n50\n80\n40\n30\n\n\n202212458\n50\n55\n15\n85\n\n\n202212396\n95\n30\n30\n95\n\n\n202212482\n50\n50\n45\n10\n\n\n202212452\n65\n55\n15\n45\n\n\n202212387\n70\n70\n40\n35\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n(방법4)\n\ndf = pd.DataFrame({'att':att, 'rep':rep, 'mid':mid, 'fin':fin}, index=key)\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212370\n95\n100\n50\n80\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212377\n75\n40\n100\n15\n\n\n202212463\n65\n45\n45\n90\n\n\n202212471\n60\n60\n25\n0\n\n\n202212400\n95\n65\n20\n10\n\n\n202212469\n90\n80\n80\n20\n\n\n202212318\n55\n75\n35\n25\n\n\n202212432\n95\n95\n45\n0\n\n\n202212443\n95\n55\n15\n35\n\n\n202212367\n50\n80\n40\n30\n\n\n202212458\n50\n55\n15\n85\n\n\n202212396\n95\n30\n30\n95\n\n\n202212482\n50\n50\n45\n10\n\n\n202212452\n65\n55\n15\n45\n\n\n202212387\n70\n70\n40\n35\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n(방법5)\n\ndf = pd.DataFrame({'att':att, 'rep':rep, 'mid':mid, 'fin':fin})\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n0\n65\n55\n50\n40\n\n\n1\n95\n100\n50\n80\n\n\n2\n65\n90\n60\n30\n\n\n3\n55\n80\n75\n80\n\n\n4\n80\n30\n30\n100\n\n\n5\n75\n40\n100\n15\n\n\n6\n65\n45\n45\n90\n\n\n7\n60\n60\n25\n0\n\n\n8\n95\n65\n20\n10\n\n\n9\n90\n80\n80\n20\n\n\n10\n55\n75\n35\n25\n\n\n11\n95\n95\n45\n0\n\n\n12\n95\n55\n15\n35\n\n\n13\n50\n80\n40\n30\n\n\n14\n50\n55\n15\n85\n\n\n15\n95\n30\n30\n95\n\n\n16\n50\n50\n45\n10\n\n\n17\n65\n55\n15\n45\n\n\n18\n70\n70\n40\n35\n\n\n19\n90\n90\n80\n90\n\n\n\n\n\n\n\n\ndf=df.set_index([key])   #인덱스를 set_index로 설정해줄 수 있음\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212370\n95\n100\n50\n80\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212377\n75\n40\n100\n15\n\n\n202212463\n65\n45\n45\n90\n\n\n202212471\n60\n60\n25\n0\n\n\n202212400\n95\n65\n20\n10\n\n\n202212469\n90\n80\n80\n20\n\n\n202212318\n55\n75\n35\n25\n\n\n202212432\n95\n95\n45\n0\n\n\n202212443\n95\n55\n15\n35\n\n\n202212367\n50\n80\n40\n30\n\n\n202212458\n50\n55\n15\n85\n\n\n202212396\n95\n30\n30\n95\n\n\n202212482\n50\n50\n45\n10\n\n\n202212452\n65\n55\n15\n45\n\n\n202212387\n70\n70\n40\n35\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n\n\n해싱으로 원하는 정보를 뽑으면 좋겠다. (마치 딕셔너리처럼)\n- 예제1: 출설점수를 출력\n\ntest_dic2['att']\n\n{'202212380': 65,\n '202212370': 95,\n '202212363': 65,\n '202212488': 55,\n '202212312': 80,\n '202212377': 75,\n '202212463': 65,\n '202212471': 60,\n '202212400': 95,\n '202212469': 90,\n '202212318': 55,\n '202212432': 95,\n '202212443': 95,\n '202212367': 50,\n '202212458': 50,\n '202212396': 95,\n '202212482': 50,\n '202212452': 65,\n '202212387': 70,\n '202212354': 90}\n\n\n\ndf['att']\n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 예제2 : 학번 202212380의 출석점수 출력\n\ntest_dic2['att']['202212380']\n\n65\n\n\n\ndf['att']['202212380']\n\n65\n\n\n\n\n인덱싱으로 정보를 뽑는 기능도 지원을 하면 좋겠따. (마치 리스트나 넘파이처럼)\n- 예제1: 첫번째 학생의 기말고사 성적을 출력하고 싶다.\n\ntest_ndarray[0,-1]\n\n40\n\n\n\ndf.iloc[0,-1]  \n\n40\n\n\n\n벼락치기: df에서 iloc라는 특수기능을 이용하면 넘파이 인덱싱처럼 원소출력이 가능하다.\n\n-예제2: 홀수번째 학생의 점수를 뽑고 싶다.\n\ntest_ndarray[::2]\n\narray([[202212380,        65,        55,        50,        40],\n       [202212363,        65,        90,        60,        30],\n       [202212312,        80,        30,        30,       100],\n       [202212463,        65,        45,        45,        90],\n       [202212400,        95,        65,        20,        10],\n       [202212318,        55,        75,        35,        25],\n       [202212443,        95,        55,        15,        35],\n       [202212458,        50,        55,        15,        85],\n       [202212482,        50,        50,        45,        10],\n       [202212387,        70,        70,        40,        35]])\n\n\n\ndf.iloc[0::2]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212363\n65\n90\n60\n30\n\n\n202212312\n80\n30\n30\n100\n\n\n202212463\n65\n45\n45\n90\n\n\n202212400\n95\n65\n20\n10\n\n\n202212318\n55\n75\n35\n25\n\n\n202212443\n95\n55\n15\n35\n\n\n202212458\n50\n55\n15\n85\n\n\n202212482\n50\n50\n45\n10\n\n\n202212387\n70\n70\n40\n35\n\n\n\n\n\n\n\n- 예제3: 맨 끝에서 3명의 점수를 출력하고 싶다.\n\ntest_ndarray[-3:]\n\narray([[202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n\ndf.iloc[-3:]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212452\n65\n55\n15\n45\n\n\n202212387\n70\n70\n40\n35\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n- 예제4: 맨 끝에서 3명의 점수를 마지막 2개의 칼럼만 출력하고 싶다.\n\ntest_ndarray[-3:,-2:]\n\narray([[15, 45],\n       [40, 35],\n       [80, 90]])\n\n\n\ndf.iloc[-3:,-2:]\n\n\n\n\n\n\n\n\nmid\nfin\n\n\n\n\n202212452\n15\n45\n\n\n202212387\n40\n35\n\n\n202212354\n80\n90\n\n\n\n\n\n\n\n\n\n궁극: 해싱과 인덱싱을 모두 지원하는 아주 우수한 자료형을 만들고 싶어!\n- 예제1: 중간고사 점수가 20점 이상이면서 동시에 출석점수가 60점미만인 학생들의 기말고사 점수를 출력\n(방법1) 데이터베이스 스타일\n\ndf.query(\"mid&gt;=20 and att&lt;60\")\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212488\n55\n80\n75\n80\n\n\n202212318\n55\n75\n35\n25\n\n\n202212367\n50\n80\n40\n30\n\n\n202212482\n50\n50\n45\n10\n\n\n\n\n\n\n\n\ndf.query(\"mid&gt;=20 and att&lt;60\")['fin']\n\n202212488    80\n202212318    25\n202212367    30\n202212482    10\nName: fin, dtype: int64\n\n\n(방법2) 넘파이 스타일\n\ntest_ndarray\n\narray([[202212380,        65,        55,        50,        40],\n       [202212370,        95,       100,        50,        80],\n       [202212363,        65,        90,        60,        30],\n       [202212488,        55,        80,        75,        80],\n       [202212312,        80,        30,        30,       100],\n       [202212377,        75,        40,       100,        15],\n       [202212463,        65,        45,        45,        90],\n       [202212471,        60,        60,        25,         0],\n       [202212400,        95,        65,        20,        10],\n       [202212469,        90,        80,        80,        20],\n       [202212318,        55,        75,        35,        25],\n       [202212432,        95,        95,        45,         0],\n       [202212443,        95,        55,        15,        35],\n       [202212367,        50,        80,        40,        30],\n       [202212458,        50,        55,        15,        85],\n       [202212396,        95,        30,        30,        95],\n       [202212482,        50,        50,        45,        10],\n       [202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n\ntest_ndarray[:,3]&gt;=20 # 중간고사 점수 20점 이상\n\narray([ True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True, False,  True, False,  True,  True, False,\n        True,  True])\n\n\n\ntest_ndarray[:,1] &lt; 60 # 출석이 60미만 \n\narray([False, False, False,  True, False, False, False, False, False,\n       False,  True, False, False,  True,  True, False,  True, False,\n       False, False])\n\n\n\n(test_ndarray[:,3]&gt;=20) & (test_ndarray[:,1] &lt; 60)\n\narray([False, False, False,  True, False, False, False, False, False,\n       False,  True, False, False,  True, False, False,  True, False,\n       False, False])\n\n\n\nnote: test_ndarray[:,3]&gt;=20 & test_ndarray[:,1] &lt; 60 와 같이 하면 에러가 난다. 가로로 묶어줘야 함\n\n\ntest_ndarray[(test_ndarray[:,3]&gt;=20) & (test_ndarray[:,1] &lt; 60),-1] \n\narray([80, 25, 30, 10])\n\n\n\n구현난이도 어려움, 가독성 꽝\n\n- 예제2: ’중간고사점수&lt;기말고사점수’인 학생들의 출석점수 평균을 구하자.\n\ndf.query('mid&lt;fin')['att'].mean()\n\n76.66666666666667\n\n\n\n\n\npandas 사용법\n\npandas 공부 1단계\n\n데이터프레임 선언\n- 방법1: dictionary에서 만든다.\n\npd.DataFrame({'att':[30,40,50],'mid':[50,60,70]})  # 리스트\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n50\n\n\n1\n40\n60\n\n\n2\n50\n70\n\n\n\n\n\n\n\n\npd.DataFrame({'att':(30,40,50),'mid':(50,60,70)})  # 튜플\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n50\n\n\n1\n40\n60\n\n\n2\n50\n70\n\n\n\n\n\n\n\n\npd.DataFrame({'att':np.array([30,40,50]),'mid':np.array([50,60,70])})  # 넘파이어레이\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n50\n\n\n1\n40\n60\n\n\n2\n50\n70\n\n\n\n\n\n\n\n- 방법2: 2차원 ndarray에서 형태변환 통해 만든다.\n\nnp.arange(2*3).reshape(2,3)\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\npd.DataFrame(np.arange(2*3).reshape(2,3))\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n\n\n\n\n\n\n\n열의 이름 부여\n- 방법1: 딕셔너리를 통하여 만들면 딕셔너리의 key가 자동으로 열의 이름이 된다.\n\npd.DataFrame({'att':np.array([30,40,50]),'mid':np.array([50,60,70])})\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n50\n\n\n1\n40\n60\n\n\n2\n50\n70\n\n\n\n\n\n\n\n- 방법2: pd.DataFrame()의 옵션에 columns를 이용\n\npd.DataFrame(np.arange(2*3).reshape(2,3),columns=['X1','X2','X3'])\n\n\n\n\n\n\n\n\nX1\nX2\nX3\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n\n\n\n\n\n- 방법3: df.columns에 원하는 열이름을 덮어씀(1)\n\ndf=pd.DataFrame(np.arange(2*3).reshape(2,3))\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n\n\n\n\n\n\ndf.columns\n\nRangeIndex(start=0, stop=3, step=1)\n\n\n\ndf.columns=['X1','X2','X3']\n\n\ndf\n\n\n\n\n\n\n\n\nX1\nX2\nX3\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n\n\n\n\n\n- 방법4: df.columns에 원하는 열이름을 덮어씀(2)\n\ndf.columns=pd.Index(['X1','X2','X3'])  # 위와 같은 코드\ndf\n\n\n\n\n\n\n\n\nX1\nX2\nX3\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n\n\n\n\n\n방법4가 방법3의 방식보다 컴퓨터가 이해하기 좋다. (=불필요한 에러를 방지할 수 있다.)\n\ndf.columns\n\nIndex(['X1', 'X2', 'X3'], dtype='object')\n\n\n\ntype(df.columns)\n\npandas.core.indexes.base.Index\n\n\n\n['X1','X2','X3'], type(['X1','X2','X3'])\n\n(['X1', 'X2', 'X3'], list)\n\n\n\npd.Index(['X1','X2','X3'])\n\nIndex(['X1', 'X2', 'X3'], dtype='object')\n\n\n\n\n행의 이름 부여\n- 방법1: 중첩 dict이면 nested dic의 key가 알아서 행의 이름으로 된다. (안쪽..)\n\n{'att': {'boram':30, 'iu':40, 'hynn':50}, 'mid':{'boram':5, 'iu':45, 'hynn':90}}\n\n{'att': {'boram': 30, 'iu': 40, 'hynn': 50},\n 'mid': {'boram': 5, 'iu': 45, 'hynn': 90}}\n\n\n\npd.DataFrame({'att': {'boram':30, 'iu':40, 'hynn':50}, 'mid':{'boram':5, 'iu':45, 'hynn':90}})\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\nboram\n30\n5\n\n\niu\n40\n45\n\n\nhynn\n50\n90\n\n\n\n\n\n\n\n- 방법2: index옵션 이용\n\npd.DataFrame({'att': [30, 40,50], 'mid':[5,45, 90]}, index=['boram','iu','hynn'])\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\nboram\n30\n5\n\n\niu\n40\n45\n\n\nhynn\n50\n90\n\n\n\n\n\n\n\n- 방법3: df.index에 덮어씌움\n\ndf=pd.DataFrame({'att': [30, 40,50], 'mid':[5,45, 90]})\ndf\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n5\n\n\n1\n40\n45\n\n\n2\n50\n90\n\n\n\n\n\n\n\n\ndf.index\n\nRangeIndex(start=0, stop=3, step=1)\n\n\n\ndf.index=['boram','iu','hynn']\ndf\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\nboram\n30\n5\n\n\niu\n40\n45\n\n\nhynn\n50\n90\n\n\n\n\n\n\n\n\ndf.index= pd.Index(['boram','iu','hynn'])  #이게 컴퓨터가 볼 때 더 안전한 코드!\ndf\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\nboram\n30\n5\n\n\niu\n40\n45\n\n\nhynn\n50\n90\n\n\n\n\n\n\n\n- 방법4: df.set_index() 를 이용하여 덮어 씌운다.\n\ndf=pd.DataFrame({'att': [30, 40,50], 'mid':[5,45, 90]})\ndf\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n5\n\n\n1\n40\n45\n\n\n2\n50\n90\n\n\n\n\n\n\n\n\ndf.set_index(pd.Index(['boram','iu','hynn']))\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\nboram\n30\n5\n\n\niu\n40\n45\n\n\nhynn\n50\n90\n\n\n\n\n\n\n\n(주의) 아래는 에러가 난다.\n\ndf.set_index(['boram','iu','hynn'])\n\nKeyError: \"None of ['boram', 'iu', 'hynn'] are in the columns\"\n\n\n\ndf.set_index([['boram','iu','hynn']]) # 꺽쇠를 한번 더 넣어주면 에러를 피할 수 있따.\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\nboram\n30\n5\n\n\niu\n40\n45\n\n\nhynn\n50\n90\n\n\n\n\n\n\n\n\n\n자료형, len, shape, for문의 반복변수\n\ndf= pd.DataFrame({'att':[30,40,50],'mid':[5,45,90]})\ndf\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n30\n5\n\n\n1\n40\n45\n\n\n2\n50\n90\n\n\n\n\n\n\n\n- type\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n- len\n\nlen(df) #row의 갯수\n\n3\n\n\n- shape\n\ndf.shape\n\n(3, 2)\n\n\n- for문의 반복변수\n\nfor k in df:\n    print(k) #딕셔너리와 같다.\n\natt\nmid\n\n\n\nfor k in {'att':[30,40,50],'mid':[5,45,90]}: #딕셔너리\n    print(k)\n\natt\nmid\n\n\n\n\npd.Series\n- 2차원 ndarray가 pd.DataFrame에 대응한다면 1차원 ndarray는 pd.Series에 대응한다.\n\na=pd.Series(np.random.randn(10))\na\n\n0    0.106173\n1    0.723759\n2    0.217990\n3    0.194022\n4   -0.688990\n5   -0.351670\n6    0.990933\n7    1.212147\n8   -0.608965\n9    0.032549\ndtype: float64\n\n\n\ntype(a)\n\npandas.core.series.Series\n\n\n\nlen(a)\n\n10\n\n\n\na.shape\n\n(10,)\n\n\n\nfor value in a:\n    print(value)   #값들이 반복 넘파이어레이처럼..\n\n0.10617283591748639\n0.7237590624253404\n0.21798967912700873\n0.1940223087322443\n-0.6889899757985083\n-0.3516696436204985\n0.9909329773184973\n1.2121468150185186\n-0.6089654373693767\n0.03254898346416765\n\n\n\n\n\npandas공부 2단계\n- 데이터\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,20)\nrep = np.random.choice(np.arange(5,21)*5,20)\nmid = np.random.choice(np.arange(0,21)*5,20)\nfin = np.random.choice(np.arange(0,21)*5,20)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),20,replace=False)]\n\n\ndf=pd.DataFrame({'att':att, 'rep':rep, 'mid':mid, 'fin':fin}, index=key)\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212370\n95\n100\n50\n80\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212377\n75\n40\n100\n15\n\n\n202212463\n65\n45\n45\n90\n\n\n202212471\n60\n60\n25\n0\n\n\n202212400\n95\n65\n20\n10\n\n\n202212469\n90\n80\n80\n20\n\n\n202212318\n55\n75\n35\n25\n\n\n202212432\n95\n95\n45\n0\n\n\n202212443\n95\n55\n15\n35\n\n\n202212367\n50\n80\n40\n30\n\n\n202212458\n50\n55\n15\n85\n\n\n202212396\n95\n30\n30\n95\n\n\n202212482\n50\n50\n45\n10\n\n\n202212452\n65\n55\n15\n45\n\n\n202212387\n70\n70\n40\n35\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n\n첫번째 칼럼을 선택\n- 방법1\n\ndf.att \n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법2 : dict스타일\n\ndf['att']\n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n\ntype(df['att'])\n\npandas.core.series.Series\n\n\n- 방법3 : dict스타일\n\ndf[['att']]\n\n\n\n\n\n\n\n\natt\n\n\n\n\n202212380\n65\n\n\n202212370\n95\n\n\n202212363\n65\n\n\n202212488\n55\n\n\n202212312\n80\n\n\n202212377\n75\n\n\n202212463\n65\n\n\n202212471\n60\n\n\n202212400\n95\n\n\n202212469\n90\n\n\n202212318\n55\n\n\n202212432\n95\n\n\n202212443\n95\n\n\n202212367\n50\n\n\n202212458\n50\n\n\n202212396\n95\n\n\n202212482\n50\n\n\n202212452\n65\n\n\n202212387\n70\n\n\n202212354\n90\n\n\n\n\n\n\n\n\ntype(df[['att']])\n\npandas.core.frame.DataFrame\n\n\n\ndf.att 나 df[‘att’]는 series를 리턴하고 df[[‘att’]]는 dataframe을 리턴한다.\n\n- 방법4 : ndarray 스타일\n\ndf.iloc[:,0] \n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법5: ndarray스타일\n\ndf.iloc[:,[0]]\n\n\n\n\n\n\n\n\natt\n\n\n\n\n202212380\n65\n\n\n202212370\n95\n\n\n202212363\n65\n\n\n202212488\n55\n\n\n202212312\n80\n\n\n202212377\n75\n\n\n202212463\n65\n\n\n202212471\n60\n\n\n202212400\n95\n\n\n202212469\n90\n\n\n202212318\n55\n\n\n202212432\n95\n\n\n202212443\n95\n\n\n202212367\n50\n\n\n202212458\n50\n\n\n202212396\n95\n\n\n202212482\n50\n\n\n202212452\n65\n\n\n202212387\n70\n\n\n202212354\n90\n\n\n\n\n\n\n\n\ndf.iloc[:,0]은 series를 리턴하고 df.iloc[:,[0]]은 dataframe을 리턴한다.\n\n- 방법6: ndarray 스타일과 dict 스타일의 혼합\n\ndf.loc[:,'att'] \n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법7: ndarray 스타일과 dict 스타일의 혼합\n\ndf.loc[:,['att']] \n\n\n\n\n\n\n\n\natt\n\n\n\n\n202212380\n65\n\n\n202212370\n95\n\n\n202212363\n65\n\n\n202212488\n55\n\n\n202212312\n80\n\n\n202212377\n75\n\n\n202212463\n65\n\n\n202212471\n60\n\n\n202212400\n95\n\n\n202212469\n90\n\n\n202212318\n55\n\n\n202212432\n95\n\n\n202212443\n95\n\n\n202212367\n50\n\n\n202212458\n50\n\n\n202212396\n95\n\n\n202212482\n50\n\n\n202212452\n65\n\n\n202212387\n70\n\n\n202212354\n90\n\n\n\n\n\n\n\n\ndf.loc[:,‘att’]은 series를 리턴하고 df.loc[:,[‘att’]]은 dataframe을 리턴한다.\n\n- 방법7: nparray 스타일 + bool 인덱싱\n\ndf.iloc[:,[True,False,False,False]]\n\n\n\n\n\n\n\n\natt\n\n\n\n\n202212380\n65\n\n\n202212370\n95\n\n\n202212363\n65\n\n\n202212488\n55\n\n\n202212312\n80\n\n\n202212377\n75\n\n\n202212463\n65\n\n\n202212471\n60\n\n\n202212400\n95\n\n\n202212469\n90\n\n\n202212318\n55\n\n\n202212432\n95\n\n\n202212443\n95\n\n\n202212367\n50\n\n\n202212458\n50\n\n\n202212396\n95\n\n\n202212482\n50\n\n\n202212452\n65\n\n\n202212387\n70\n\n\n202212354\n90\n\n\n\n\n\n\n\n- 방법8: ndarray와 dict의 홉합형 + bool 인덱싱\n\ndf.loc[:,[True,False,False,False]]\n\n\n\n\n\n\n\n\natt\n\n\n\n\n202212380\n65\n\n\n202212370\n95\n\n\n202212363\n65\n\n\n202212488\n55\n\n\n202212312\n80\n\n\n202212377\n75\n\n\n202212463\n65\n\n\n202212471\n60\n\n\n202212400\n95\n\n\n202212469\n90\n\n\n202212318\n55\n\n\n202212432\n95\n\n\n202212443\n95\n\n\n202212367\n50\n\n\n202212458\n50\n\n\n202212396\n95\n\n\n202212482\n50\n\n\n202212452\n65\n\n\n202212387\n70\n\n\n202212354\n90\n\n\n\n\n\n\n\n\n\n여러개의 칼럼을 선택\n- 방법1: dict스타일\n\ndf[['att','fin']]\n\n\n\n\n\n\n\n\natt\nfin\n\n\n\n\n202212380\n65\n40\n\n\n202212370\n95\n80\n\n\n202212363\n65\n30\n\n\n202212488\n55\n80\n\n\n202212312\n80\n100\n\n\n202212377\n75\n15\n\n\n202212463\n65\n90\n\n\n202212471\n60\n0\n\n\n202212400\n95\n10\n\n\n202212469\n90\n20\n\n\n202212318\n55\n25\n\n\n202212432\n95\n0\n\n\n202212443\n95\n35\n\n\n202212367\n50\n30\n\n\n202212458\n50\n85\n\n\n202212396\n95\n95\n\n\n202212482\n50\n10\n\n\n202212452\n65\n45\n\n\n202212387\n70\n35\n\n\n202212354\n90\n90\n\n\n\n\n\n\n\n- 방법2: ndarray 스타일 (정수리스트로 인덱싱, 슬라이싱, 스트라이딩)\n\ndf.iloc[:,[0,1]] #정수의 리스트를 전달하여 칼럼추출\n\n\n\n\n\n\n\n\natt\nrep\n\n\n\n\n202212380\n65\n55\n\n\n202212370\n95\n100\n\n\n202212363\n65\n90\n\n\n202212488\n55\n80\n\n\n202212312\n80\n30\n\n\n202212377\n75\n40\n\n\n202212463\n65\n45\n\n\n202212471\n60\n60\n\n\n202212400\n95\n65\n\n\n202212469\n90\n80\n\n\n202212318\n55\n75\n\n\n202212432\n95\n95\n\n\n202212443\n95\n55\n\n\n202212367\n50\n80\n\n\n202212458\n50\n55\n\n\n202212396\n95\n30\n\n\n202212482\n50\n50\n\n\n202212452\n65\n55\n\n\n202212387\n70\n70\n\n\n202212354\n90\n90\n\n\n\n\n\n\n\n\ndf.iloc[:,0:2]  #슬라이싱, 0,1,2에서 마지막 2는 제외되고 0,1에 해당하는 것만 추출\n\n\n\n\n\n\n\n\natt\nrep\n\n\n\n\n202212380\n65\n55\n\n\n202212370\n95\n100\n\n\n202212363\n65\n90\n\n\n202212488\n55\n80\n\n\n202212312\n80\n30\n\n\n202212377\n75\n40\n\n\n202212463\n65\n45\n\n\n202212471\n60\n60\n\n\n202212400\n95\n65\n\n\n202212469\n90\n80\n\n\n202212318\n55\n75\n\n\n202212432\n95\n95\n\n\n202212443\n95\n55\n\n\n202212367\n50\n80\n\n\n202212458\n50\n55\n\n\n202212396\n95\n30\n\n\n202212482\n50\n50\n\n\n202212452\n65\n55\n\n\n202212387\n70\n70\n\n\n202212354\n90\n90\n\n\n\n\n\n\n\n\ndf.iloc[:,2:]  #슬라이싱\n\n\n\n\n\n\n\n\nmid\nfin\n\n\n\n\n202212380\n50\n40\n\n\n202212370\n50\n80\n\n\n202212363\n60\n30\n\n\n202212488\n75\n80\n\n\n202212312\n30\n100\n\n\n202212377\n100\n15\n\n\n202212463\n45\n90\n\n\n202212471\n25\n0\n\n\n202212400\n20\n10\n\n\n202212469\n80\n20\n\n\n202212318\n35\n25\n\n\n202212432\n45\n0\n\n\n202212443\n15\n35\n\n\n202212367\n40\n30\n\n\n202212458\n15\n85\n\n\n202212396\n30\n95\n\n\n202212482\n45\n10\n\n\n202212452\n15\n45\n\n\n202212387\n40\n35\n\n\n202212354\n80\n90\n\n\n\n\n\n\n\n\ndf.iloc[:,::2]  #슬라이싱, 스트라이딩\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n202212380\n65\n50\n\n\n202212370\n95\n50\n\n\n202212363\n65\n60\n\n\n202212488\n55\n75\n\n\n202212312\n80\n30\n\n\n202212377\n75\n100\n\n\n202212463\n65\n45\n\n\n202212471\n60\n25\n\n\n202212400\n95\n20\n\n\n202212469\n90\n80\n\n\n202212318\n55\n35\n\n\n202212432\n95\n45\n\n\n202212443\n95\n15\n\n\n202212367\n50\n40\n\n\n202212458\n50\n15\n\n\n202212396\n95\n30\n\n\n202212482\n50\n45\n\n\n202212452\n65\n15\n\n\n202212387\n70\n40\n\n\n202212354\n90\n80\n\n\n\n\n\n\n\n- 방법3: ndarray와 dict의 혼합형\n\ndf.loc[:,['att','mid']]\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n202212380\n65\n50\n\n\n202212370\n95\n50\n\n\n202212363\n65\n60\n\n\n202212488\n55\n75\n\n\n202212312\n80\n30\n\n\n202212377\n75\n100\n\n\n202212463\n65\n45\n\n\n202212471\n60\n25\n\n\n202212400\n95\n20\n\n\n202212469\n90\n80\n\n\n202212318\n55\n35\n\n\n202212432\n95\n45\n\n\n202212443\n95\n15\n\n\n202212367\n50\n40\n\n\n202212458\n50\n15\n\n\n202212396\n95\n30\n\n\n202212482\n50\n45\n\n\n202212452\n65\n15\n\n\n202212387\n70\n40\n\n\n202212354\n90\n80\n\n\n\n\n\n\n\n\ndf.loc[:,'att':'rep']  # key로 하는 슬라이싱은 마지막 'rep'까지 표시되어 나온다\n\n\n\n\n\n\n\n\natt\nrep\n\n\n\n\n202212380\n65\n55\n\n\n202212370\n95\n100\n\n\n202212363\n65\n90\n\n\n202212488\n55\n80\n\n\n202212312\n80\n30\n\n\n202212377\n75\n40\n\n\n202212463\n65\n45\n\n\n202212471\n60\n60\n\n\n202212400\n95\n65\n\n\n202212469\n90\n80\n\n\n202212318\n55\n75\n\n\n202212432\n95\n95\n\n\n202212443\n95\n55\n\n\n202212367\n50\n80\n\n\n202212458\n50\n55\n\n\n202212396\n95\n30\n\n\n202212482\n50\n50\n\n\n202212452\n65\n55\n\n\n202212387\n70\n70\n\n\n202212354\n90\n90\n\n\n\n\n\n\n\n\ndf.loc[:,:'rep']\n\n\n\n\n\n\n\n\natt\nrep\n\n\n\n\n202212380\n65\n55\n\n\n202212370\n95\n100\n\n\n202212363\n65\n90\n\n\n202212488\n55\n80\n\n\n202212312\n80\n30\n\n\n202212377\n75\n40\n\n\n202212463\n65\n45\n\n\n202212471\n60\n60\n\n\n202212400\n95\n65\n\n\n202212469\n90\n80\n\n\n202212318\n55\n75\n\n\n202212432\n95\n95\n\n\n202212443\n95\n55\n\n\n202212367\n50\n80\n\n\n202212458\n50\n55\n\n\n202212396\n95\n30\n\n\n202212482\n50\n50\n\n\n202212452\n65\n55\n\n\n202212387\n70\n70\n\n\n202212354\n90\n90\n\n\n\n\n\n\n\n\ndf.loc[:,'rep':]\n\n\n\n\n\n\n\n\nrep\nmid\nfin\n\n\n\n\n202212380\n55\n50\n40\n\n\n202212370\n100\n50\n80\n\n\n202212363\n90\n60\n30\n\n\n202212488\n80\n75\n80\n\n\n202212312\n30\n30\n100\n\n\n202212377\n40\n100\n15\n\n\n202212463\n45\n45\n90\n\n\n202212471\n60\n25\n0\n\n\n202212400\n65\n20\n10\n\n\n202212469\n80\n80\n20\n\n\n202212318\n75\n35\n25\n\n\n202212432\n95\n45\n0\n\n\n202212443\n55\n15\n35\n\n\n202212367\n80\n40\n30\n\n\n202212458\n55\n15\n85\n\n\n202212396\n30\n30\n95\n\n\n202212482\n50\n45\n10\n\n\n202212452\n55\n15\n45\n\n\n202212387\n70\n40\n35\n\n\n202212354\n90\n80\n90\n\n\n\n\n\n\n\n- 방법4: bool을 이용한 인덱싱\n\ndf.iloc[:,[True,False,True,False]]\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n202212380\n65\n50\n\n\n202212370\n95\n50\n\n\n202212363\n65\n60\n\n\n202212488\n55\n75\n\n\n202212312\n80\n30\n\n\n202212377\n75\n100\n\n\n202212463\n65\n45\n\n\n202212471\n60\n25\n\n\n202212400\n95\n20\n\n\n202212469\n90\n80\n\n\n202212318\n55\n35\n\n\n202212432\n95\n45\n\n\n202212443\n95\n15\n\n\n202212367\n50\n40\n\n\n202212458\n50\n15\n\n\n202212396\n95\n30\n\n\n202212482\n50\n45\n\n\n202212452\n65\n15\n\n\n202212387\n70\n40\n\n\n202212354\n90\n80\n\n\n\n\n\n\n\n\ndf.loc[:,[True,False,True,False]]\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n202212380\n65\n50\n\n\n202212370\n95\n50\n\n\n202212363\n65\n60\n\n\n202212488\n55\n75\n\n\n202212312\n80\n30\n\n\n202212377\n75\n100\n\n\n202212463\n65\n45\n\n\n202212471\n60\n25\n\n\n202212400\n95\n20\n\n\n202212469\n90\n80\n\n\n202212318\n55\n35\n\n\n202212432\n95\n45\n\n\n202212443\n95\n15\n\n\n202212367\n50\n40\n\n\n202212458\n50\n15\n\n\n202212396\n95\n30\n\n\n202212482\n50\n45\n\n\n202212452\n65\n15\n\n\n202212387\n70\n40\n\n\n202212354\n90\n80\n\n\n\n\n\n\n\n\ntest_ndarray[:,range(2)]\n\narray([[202212380,        65],\n       [202212370,        95],\n       [202212363,        65],\n       [202212488,        55],\n       [202212312,        80],\n       [202212377,        75],\n       [202212463,        65],\n       [202212471,        60],\n       [202212400,        95],\n       [202212469,        90],\n       [202212318,        55],\n       [202212432,        95],\n       [202212443,        95],\n       [202212367,        50],\n       [202212458,        50],\n       [202212396,        95],\n       [202212482,        50],\n       [202212452,        65],\n       [202212387,        70],\n       [202212354,        90]])\n\n\n\ndf.iloc[:,range(2)]\n\n\n\n\n\n\n\n\natt\nrep\n\n\n\n\n202212380\n65\n55\n\n\n202212370\n95\n100\n\n\n202212363\n65\n90\n\n\n202212488\n55\n80\n\n\n202212312\n80\n30\n\n\n202212377\n75\n40\n\n\n202212463\n65\n45\n\n\n202212471\n60\n60\n\n\n202212400\n95\n65\n\n\n202212469\n90\n80\n\n\n202212318\n55\n75\n\n\n202212432\n95\n95\n\n\n202212443\n95\n55\n\n\n202212367\n50\n80\n\n\n202212458\n50\n55\n\n\n202212396\n95\n30\n\n\n202212482\n50\n50\n\n\n202212452\n65\n55\n\n\n202212387\n70\n70\n\n\n202212354\n90\n90\n\n\n\n\n\n\n\n\n\n첫번째 행을 선택\n- 방법1\n\ntest_ndarray[0,:]\n\narray([202212380,        65,        55,        50,        40])\n\n\n\ntest_ndarray[0]\n\narray([202212380,        65,        55,        50,        40])\n\n\n\ndf.iloc[0]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법2\n\ndf.iloc[[0]]  # 데이터프레임처럼\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n\n\n\n\n\n- 방법3\n\ndf.iloc[0,:]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법4\n\ndf.iloc[[0],:]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n\n\n\n\n\n- 방법5\n\ndf.loc['202212380']\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법6\n\ndf.loc[['202212380']]  # 데이터프레임처럼\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n\n\n\n\n\n- 방법7\n\ndf.loc['202212380',:]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법8\n\ndf.loc[['202212380'],:]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n\n\n\n\n\n- 방법9\n\nlen(df)\n\n20\n\n\n\n[True]+[False]*19\n\n[True,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False,\n False]\n\n\n\n_lst = [True]+[False]*19\n\n\ndf.iloc[_lst]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n\n\n\n\n\n\ndf.iloc[_lst,:]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n\n\n\n\n\n\ndf.loc[_lst]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n\n\n\n\n\n\ndf.loc[_lst,:]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n\n\n\n\n\n\n\n여러개의 행을 선택\n- 방법1\n\ndf.iloc[[0,2]]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212363\n65\n90\n60\n30\n\n\n\n\n\n\n\n\ndf.iloc[[0,2],:]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212363\n65\n90\n60\n30\n\n\n\n\n\n\n\n- 방법2\n\ndf.loc[['202212380','202212363']]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212363\n65\n90\n60\n30\n\n\n\n\n\n\n\n\ndf.loc[['202212380','202212363'],:]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212363\n65\n90\n60\n30\n\n\n\n\n\n\n\n- 그 밖의 방법들\n\ndf.iloc[::4]  # 스트라이딩\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212312\n80\n30\n30\n100\n\n\n202212400\n95\n65\n20\n10\n\n\n202212443\n95\n55\n15\n35\n\n\n202212482\n50\n50\n45\n10\n\n\n\n\n\n\n\n\ndf.iloc[:5]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212370\n95\n100\n50\n80\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n\n\n\n\n\n\ndf.loc[:'202212312']\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212370\n95\n100\n50\n80\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n\n\n\n\n\n\ndf.att &lt; 80\n\n202212380     True\n202212370    False\n202212363     True\n202212488     True\n202212312    False\n202212377     True\n202212463     True\n202212471     True\n202212400    False\n202212469    False\n202212318     True\n202212432    False\n202212443    False\n202212367     True\n202212458     True\n202212396    False\n202212482     True\n202212452     True\n202212387     True\n202212354    False\nName: att, dtype: bool\n\n\n\ndf.loc[df.att&lt;80]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212377\n75\n40\n100\n15\n\n\n202212463\n65\n45\n45\n90\n\n\n202212471\n60\n60\n25\n0\n\n\n202212318\n55\n75\n35\n25\n\n\n202212367\n50\n80\n40\n30\n\n\n202212458\n50\n55\n15\n85\n\n\n202212482\n50\n50\n45\n10\n\n\n202212452\n65\n55\n15\n45\n\n\n202212387\n70\n70\n40\n35\n\n\n\n\n\n\n\n\ndf.loc[list(df.att&lt;80),'rep':]  # 리스트로 바꿔주는게 컴퓨터에게 좀 더 명확한 전달\n\n\n\n\n\n\n\n\nrep\nmid\nfin\n\n\n\n\n202212380\n55\n50\n40\n\n\n202212363\n90\n60\n30\n\n\n202212488\n80\n75\n80\n\n\n202212377\n40\n100\n15\n\n\n202212463\n45\n45\n90\n\n\n202212471\n60\n25\n0\n\n\n202212318\n75\n35\n25\n\n\n202212367\n80\n40\n30\n\n\n202212458\n55\n15\n85\n\n\n202212482\n50\n45\n10\n\n\n202212452\n55\n15\n45\n\n\n202212387\n70\n40\n35\n\n\n\n\n\n\n\n\ndf.loc[df.att&lt;80,'rep':] # 하지만 리스트화 안해도 되긴 한다..\n\n\n\n\n\n\n\n\nrep\nmid\nfin\n\n\n\n\n202212380\n55\n50\n40\n\n\n202212363\n90\n60\n30\n\n\n202212488\n80\n75\n80\n\n\n202212377\n40\n100\n15\n\n\n202212463\n45\n45\n90\n\n\n202212471\n60\n25\n0\n\n\n202212318\n75\n35\n25\n\n\n202212367\n80\n40\n30\n\n\n202212458\n55\n15\n85\n\n\n202212482\n50\n45\n10\n\n\n202212452\n55\n15\n45\n\n\n202212387\n70\n40\n35\n\n\n\n\n\n\n\n\ndf.iloc[list(df.att&lt;80),1:]\n\n\n\n\n\n\n\n\nrep\nmid\nfin\n\n\n\n\n202212380\n55\n50\n40\n\n\n202212363\n90\n60\n30\n\n\n202212488\n80\n75\n80\n\n\n202212377\n40\n100\n15\n\n\n202212463\n45\n45\n90\n\n\n202212471\n60\n25\n0\n\n\n202212318\n75\n35\n25\n\n\n202212367\n80\n40\n30\n\n\n202212458\n55\n15\n85\n\n\n202212482\n50\n45\n10\n\n\n202212452\n55\n15\n45\n\n\n202212387\n70\n40\n35\n\n\n\n\n\n\n\n- 아래는 에러가 난다.\n\ndf.iloc[df.att&lt;80,1:]\n\nValueError: Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types\n\n\n\n\nquery (중요!!!)\n- 예제1\n\ndf.query('att==90 and mid&gt;30')\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212469\n90\n80\n80\n20\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n- 예제2\n\ndf.query('att&lt;rep and mid&lt;fin')\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212370\n95\n100\n50\n80\n\n\n202212488\n55\n80\n75\n80\n\n\n202212458\n50\n55\n15\n85\n\n\n\n\n\n\n\n- 예제3\n\ndf.query('att&lt;rep&lt;80')\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212318\n55\n75\n35\n25\n\n\n202212458\n50\n55\n15\n85\n\n\n\n\n\n\n\n- 예제4\n\ndf.query('50&lt;att&lt;=90 and mid&lt;fin')\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212463\n65\n45\n45\n90\n\n\n202212452\n65\n55\n15\n45\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n- 예제5\n\ndf.query('(mid+fin)/2 &gt;= 60')\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212370\n95\n100\n50\n80\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212463\n65\n45\n45\n90\n\n\n202212396\n95\n30\n30\n95\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n- 예제6\n\n_mean = df.att.mean()\n_mean\n\n73.0\n\n\n\ndf.query('att&gt;=73')\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212370\n95\n100\n50\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212377\n75\n40\n100\n15\n\n\n202212400\n95\n65\n20\n10\n\n\n202212469\n90\n80\n80\n20\n\n\n202212432\n95\n95\n45\n0\n\n\n202212443\n95\n55\n15\n35\n\n\n202212396\n95\n30\n30\n95\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n\ndf.query('att&gt;=_mean')  # keyError 가 난다!\n\nUndefinedVariableError: name '_mean' is not defined\n\n\n\ndf.query('att&gt;=@_mean')   # 앞에 @ 골뱅이를 붙여주면 에러 안난다.\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212370\n95\n100\n50\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212377\n75\n40\n100\n15\n\n\n202212400\n95\n65\n20\n10\n\n\n202212469\n90\n80\n80\n20\n\n\n202212432\n95\n95\n45\n0\n\n\n202212443\n95\n55\n15\n35\n\n\n202212396\n95\n30\n30\n95\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n- 예제7\n\ndf.query('index &lt;= \"202212354\"')\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212312\n80\n30\n30\n100\n\n\n202212318\n55\n75\n35\n25\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n\ndf.query('index &lt;= \"202212354\" or index==\"202212387\"')  # 밖에를 큰따옴표 하고 안쪽을 작은따옴표 해도 된다.\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n202212312\n80\n30\n30\n100\n\n\n202212318\n55\n75\n35\n25\n\n\n202212387\n70\n70\n40\n35\n\n\n202212354\n90\n90\n80\n90\n\n\n\n\n\n\n\n사실 이 기능은 시계열자료에서 꽃핀다.\n- 예제8\n\npd.date_range('20230101',periods=10)\n\nDatetimeIndex(['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04',\n               '2023-01-05', '2023-01-06', '2023-01-07', '2023-01-08',\n               '2023-01-09', '2023-01-10'],\n              dtype='datetime64[ns]', freq='D')\n\n\n\n_df=pd.DataFrame(np.random.normal(size=(10,4)),columns=list('ABCD'), index=pd.date_range('20230101',periods=10))\n_df\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n2023-01-01\n-0.259429\n0.369731\n-0.279944\n0.099409\n\n\n2023-01-02\n-0.932515\n-0.311629\n0.828348\n-0.225257\n\n\n2023-01-03\n-0.011607\n0.927334\n-0.753145\n1.013249\n\n\n2023-01-04\n-1.050379\n-0.323094\n0.813898\n1.035724\n\n\n2023-01-05\n-0.921175\n0.513109\n-0.905361\n0.893707\n\n\n2023-01-06\n-1.521594\n0.856883\n-0.401441\n-1.111551\n\n\n2023-01-07\n0.958028\n-0.015302\n0.891259\n-0.826834\n\n\n2023-01-08\n1.822226\n-1.258543\n-0.705506\n-0.519831\n\n\n2023-01-09\n-0.593394\n-1.399224\n-1.616172\n-0.626952\n\n\n2023-01-10\n-0.083539\n0.528519\n0.051522\n0.126757\n\n\n\n\n\n\n\n\n_df.query(\"'2023-01-02' &lt; index &lt;= '2023-01-09'\")\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n2023-01-03\n-0.011607\n0.927334\n-0.753145\n1.013249\n\n\n2023-01-04\n-1.050379\n-0.323094\n0.813898\n1.035724\n\n\n2023-01-05\n-0.921175\n0.513109\n-0.905361\n0.893707\n\n\n2023-01-06\n-1.521594\n0.856883\n-0.401441\n-1.111551\n\n\n2023-01-07\n0.958028\n-0.015302\n0.891259\n-0.826834\n\n\n2023-01-08\n1.822226\n-1.258543\n-0.705506\n-0.519831\n\n\n2023-01-09\n-0.593394\n-1.399224\n-1.616172\n-0.626952\n\n\n\n\n\n\n\n\n_df.query(\"'2023-01-02' &lt; index &lt;= '2023-01-09' and A+B&lt;C\")\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n2023-01-04\n-1.050379\n-0.323094\n0.813898\n1.035724\n\n\n2023-01-06\n-1.521594\n0.856883\n-0.401441\n-1.111551\n\n\n2023-01-09\n-0.593394\n-1.399224\n-1.616172\n-0.626952\n\n\n\n\n\n\n\n- query가 만능은 아니다.\n\ndf.columns = pd.Index(['att score', 'rep score', 'mid score','fin score'])\n\n\ndf.query(\"att score &lt; 90\")  # 변수이름에 띄어쓰기가 들어가면 에러가 난다.\n\nSyntaxError: invalid syntax (&lt;unknown&gt;, line 1)\n\n\n\ndf.att socre\n\nSyntaxError: invalid syntax (&lt;ipython-input-285-4116dfe6888b&gt;, line 1)\n\n\n\ndf.loc[df[\"att score\"] &lt; 90, :] # 이렇게 하면 됨\n\n\n\n\n\n\n\n\natt score\nrep score\nmid score\nfin score\n\n\n\n\n202212380\n65\n55\n50\n40\n\n\n202212363\n65\n90\n60\n30\n\n\n202212488\n55\n80\n75\n80\n\n\n202212312\n80\n30\n30\n100\n\n\n202212377\n75\n40\n100\n15\n\n\n202212463\n65\n45\n45\n90\n\n\n202212471\n60\n60\n25\n0\n\n\n202212318\n55\n75\n35\n25\n\n\n202212367\n50\n80\n40\n30\n\n\n202212458\n50\n55\n15\n85\n\n\n202212482\n50\n50\n45\n10\n\n\n202212452\n65\n55\n15\n45\n\n\n202212387\n70\n70\n40\n35\n\n\n\n\n\n\n\n\n\n\npandas 공부 3단계\n\n전치\n\nndarray = np.arange(2*3).reshape(2,3)\ndf=pd.DataFrame(ndarray)\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n\n\n\n\n\n\nndarray.T\n\narray([[0, 3],\n       [1, 4],\n       [2, 5]])\n\n\n\ndf.T\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n0\n3\n\n\n1\n1\n4\n\n\n2\n2\n5\n\n\n\n\n\n\n\n\n\n합\n\nndarray.sum(axis=0)\n\narray([3, 5, 7])\n\n\n\ndf.sum(axis=0)\n\n0    3\n1    5\n2    7\ndtype: int64\n\n\n\nndarray.sum(axis=1)\n\narray([ 3, 12])\n\n\n\ndf.sum(axis=1)\n\n0     3\n1    12\ndtype: int64\n\n\n\n\ncumsum\n\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n\n\n\n\n\n\nndarray.cumsum(axis=0) #누적해서 더해짐\n\narray([[0, 1, 2],\n       [3, 5, 7]])\n\n\n\ndf.cumsum(axis=0)\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n5\n7\n\n\n\n\n\n\n\n\nndarray.cumsum(axis=1)\n\narray([[ 0,  1,  3],\n       [ 3,  7, 12]])\n\n\n\ndf.cumsum(axis=1)\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n3\n\n\n1\n3\n7\n12\n\n\n\n\n\n\n\n\n\n형태변환\n\nndarray.tolist()\n\n[[0, 1, 2], [3, 4, 5]]\n\n\n\ndf.to_numpy()\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\ndf.to_numpy().tolist()\n\n[[0, 1, 2], [3, 4, 5]]\n\n\n\ndf.to_dict()\n\n{0: {0: 0, 1: 3}, 1: {0: 1, 1: 4}, 2: {0: 2, 1: 5}}\n\n\n\n\n\npandas 공부 4단계 (생략)\n\n\n숙제\n- 아래의 DF에서 1,3번째 열을 추출하라.\n\ndf= pd.DataFrame({'att':[90,90,95],'rep':[80,90,90],'mid':[50,60,70], 'fin':[70,80,50]})\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n0\n90\n80\n50\n70\n\n\n1\n90\n90\n60\n80\n\n\n2\n95\n90\n70\n50\n\n\n\n\n\n\n\n\ndf[['att','mid']]\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n90\n50\n\n\n1\n90\n60\n\n\n2\n95\n70\n\n\n\n\n\n\n\n\ndf.iloc[:,[0,2]]\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n90\n50\n\n\n1\n90\n60\n\n\n2\n95\n70\n\n\n\n\n\n\n\n\ndf.iloc[:,::2]\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n90\n50\n\n\n1\n90\n60\n\n\n2\n95\n70\n\n\n\n\n\n\n\n\ndf.loc[:,['att','mid']]\n\n\n\n\n\n\n\n\natt\nmid\n\n\n\n\n0\n90\n50\n\n\n1\n90\n60\n\n\n2\n95\n70"
  },
  {
    "objectID": "posts/1. Basic/python 4_0328.html",
    "href": "posts/1. Basic/python 4_0328.html",
    "title": "파이썬 (0328) 4주차",
    "section": "",
    "text": "강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-zcnjAged1xIatgznRTy93c\n\n- (1/8) 파이썬이 어려웠던 이유\n- (2/8) 1세대 프로그래머\n- (3/8) 1세대 프로그래머의 삶 with python\n- (4/8) 1세대 프로그래머의 삶 with ipython\n- (5/8) 2세대 프로그래머, 3세대 프로그래머 (1)\n- (6/8) 3세대 프로그래머(2), 4세대 프로그래머\n- (7/8) 5세대 프로그래머\n- (8/8) 다양한 개발환경 구축방법 다시 리뷰, 숙제설명\n\n\n파이썬이 어려웠던 이유\n- 파이썬 배우는 초보자에게 가장 어려운것!\n\n선생님마다 설치하는 방법이 모두 다름\n\n- 왜 저렇게 설치방법이 다른가? 왜 다른 방법으로 각각 파이썬을 실행하는가? 이런것이 너무 어려움\n\n방법1: 파이썬프로그램 다운로드 -&gt; 시작버튼 눌러서 설치\n방법2: 아나콘다 설치 (그럼 자동으로 파이썬이 설치됨)\n방법3: 아나콘다 설치 + 가상환경\n…\n\n- 심지어 실행하는것도 다름\n\n방법1: 파이썬 프롬프트\n방법2: .py를 이용하여 실행?\n방법3: IDLE\n방법4: 파이참\n방법5: 스파이더\n방법6: Visual Studio Code\n방법7: 주피터노트북, 주피터랩\n\n가상환경을 만들어서 해라..\n아나콘다 네비게이터에 주피터가 있다..\n\n…\n\n- 머리아프니까 collab을 쓰라는 사람도 있음. 아니면 도커이미지를 줄테니까 그걸 쓰라는 사람도 있음. AWS를 쓰라는 사람도 있음.. \\(\\to\\) 이게 더 머리아픔\n- 핵심: 그냥 (1) 컴퓨터에 (2) 파이썬을 깔아서 (3) 실행하는 것임\n- 의문: 그런데 방법이 왜이렇게 많은가? 엑셀처럼 프로그램 설치하고 아이콘 더블클릭하면 끝나는 식으로 만들어야 하는것 아닌가?\n\n개발환경 구축방법이 많은 이유?\n- 파이썬 개발환경 구축은 수많은 방법이 있다.\n- 이는 마치 라면의 레시피를 검색하면 수많은 방법이 나오는것과 유사함.\n\n방법1: 스프를 먼저 넣고 끓인다음 라면을 넣어야 합니다.\n방법2: 양은냄비에 물넣고 물이 끊으면 라면과 스프를 같이 넣고 마지막에 계란을 넣는다.\n방법3: 먹다남은 삼겹살을 후라이팬에 볶은다음에 물을 붓고 라면을 넣는다.\n방법4: 용기에 라면+스프+뜨거운물 랩을 씌운뒤에 젓가락으로 구멍을 뚫고 전자렌지에 돌린다.\n…\n\n- 우리는 모든 방법을 나열할 순 없지만 모든 방법을 이해할 수 있다. 왜냐하면 라면을 끓이는 공통적인 맥락을 우리는 알고 있으니까\n- 파이썬을 설치하는 다양한 방법 역시 공통맥락을 파악하면 이해하기 쉽다.\n- 제목적: 파이썬을 설치하고 실행하는 공통맥락을 설명하고 싶음\n- 설치하는 방법이 다양한 이유? 파이썬이 인기있음 + 다양한 방법을 설치를 하면 각자의 장점이 뚜렷해서\n\n\n\n1세대 프로그래머\n\npython\n- 윈도우에서 anaconda prompt 실행 -&gt; python\n(base) C:\\Users\\python&gt;python\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; [1,2,3]+[4]\n[1, 2, 3, 4]\n&gt;&gt;&gt; a=[1,2,3]+[4]\n&gt;&gt;&gt; a\n[1, 2, 3, 4]\n- 2개를 실행할 수도 있음. (두 환경은 각각 서로 독립적인 파이썬, 변수가 공유되지 않음) \\(\\star\\)\n- 아쉬운점: `?list’와 같이 도움말 기능이 동작하지 않음\n&gt;&gt;&gt; ?list\n  File \"&lt;stdin&gt;\", line 1\n    ?list\n    ^\nSyntaxError: invalid syntax\n&gt;&gt;&gt; \n\n\nipython\n- 윈도우에서 anaconda prompt 실행 -&gt; ipython\n(base) C:\\Users\\python&gt;ipython\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: a=[1,2,3]\n\nIn [2]: a\nOut[2]: [1, 2, 3]\n\nIn [3]: a+[4]\nOut[3]: [1, 2, 3, 4]\n- ?list가 가능\nIn [4]: ?list\nInit signature: list(iterable=(), /)\nDocstring:\nBuilt-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\nType:           type\nSubclasses:     _HashedSeq, StackSummary, DeferredConfigList, SList, _ImmutableLineList, FormattedText, NodeList, _ExplodedList, Stack, _Accumulator, ...\n\n- 색깔이 알록달록해서 문법을 보기 편하다. (구문강조)\n\n\n1세대 프로그래머의 삶 with python\n- 1부터 10까지 합을 구하는 프로그램을 만들고 싶음\n- 시도1: python을 키고 아래와 같이 실행\n(base) C:\\Users\\python&gt;python\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; total = 0\n&gt;&gt;&gt; for i in range(10):\n...     total=total+i\n...\n&gt;&gt;&gt; total\n45\n&gt;&gt;&gt;\n- 반성: 정답은 55인데 45가 출력되었다! \\(\\to\\) range(10)을 range(1,11)으로 바꿔야겠다!\n- 시도2: range(1,11)을 바꿔야겠다고 생각하고 다시 입력하다가 오타가 발생\n&gt;&gt;&gt; total =0\n&gt;&gt;&gt; for i in range(1,11):\n...     total = totla +i\n...\n\n앗 totla이라고 잘못쳤다.\n\n- 반성: 다음에는 정신을 똑바로 차려야겠다.\n- 불편한점: … 다..\n\n\n1세대 프로그래머의 삶 with ipython\n- ipython을 사용한 프로그래머는 좀더 상황이 낫다\n(base) C:\\Users\\python&gt;ipython\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: total = 0\n\nIn [2]: for i in range(1,11):\n   ...:     total = total + i\n   ...:\n\nIn [3]: total\nOut[3]: 55\n\n편한점1: 자동으로 들여쓰기가 되어서 편함\n편한점2: 화살표를 이용해서 for문을 쓰는 도중에 위아래로 이동가능\n불편한점1: 화살표로 이동할수는 있는데 마우스로는 이동할 수 없다.\n불편한점2: 내가 작성한 코드를 관리하기 어렵다.\n\n\n\n\n2세대 프로그래머: 메모장 + anconda prompt를 이용 (.py를 이용한 python활용)\n- 메모장을 키고 아래의 내용을 적는다.\ntotal = 0 \nfor i in range(1,11): \n    total = total + i\nprint(total)\n- 파일이름을 mysum.py로 저장한다.\n- anaconda prompt에서 mysum.py파일이 저장된 폴더로 이동 -&gt; 실행\n(base) C:\\Users\\python&gt;cd Desktop\n\n(base) C:\\Users\\python\\Desktop&gt;dir\n C 드라이브의 볼륨에는 이름이 없습니다.\n 볼륨 일련 번호: 9AFD-A05F\n\n C:\\Users\\python\\Desktop 디렉터리\n\n2022-03-27  오전 11:32    &lt;DIR&gt;          .\n2022-03-27  오전 11:32    &lt;DIR&gt;          ..\n2022-03-27  오전 12:01             2,306 Chrome.lnk\n2022-03-26  오후 08:32             2,332 Microsoft Edge.lnk\n2022-03-27  오전 11:33                71 mysum.py\n               3개 파일               4,709 바이트\n               2개 디렉터리  743,643,467,776 바이트 남음\n\n(base) C:\\Users\\python\\Desktop&gt;python mysum.py\n55\n\n(base) C:\\Users\\python\\Desktop&gt;\n- 소감 - 편한점1: 마우스를 이용하여 이동가능 - 편한점2: 내가 작업한 내용은 바탕화면의 메모장에 저장이 되어있음 - 아쉬운점: ipython의 장점은 활용못함 (구문강조, 도움말기능)\n\n\n3세대 프로그래머: 메모장 + ipython\n- 전체적인 개발방식 - 메모장: 코드를 편집, 저장 - ipython: anaconda prompt처럼 메모장의 코드를 실행하고 결과를 확인 + 구문강조, 도움말확인기능 등을 이용하여 짧은 코드를 빠르게 작성\n- 기능 - ipython에서 !python mysum.py를 입력하면 anaconda prompt에서 python mysum.py를 입력한 것과 같은 효과 - ipython에서 %run mysum을 입력하면 메모장에서 mysum.py에 입력된 내용을 복사해서 ipython에 붙여넣어 실행한것과 같은 효과\n\n\n4세대 프로그래머: IDE(통합개발환경)를 사용\n- 메모장과 ipython을 하나로 통합한 프로그램이 등장! - jupyter notebook, jupyter lab - spyder - idle - VScode - …\n- 주피터의 트릭 (실제로 주피터는 ipython에 기생할 뿐 아무런 역할도 안해요)\n\n주피터를 실행\n새노트북을 생성 (파이썬으로 선택)\n\n\n컴퓨터는 내부적으로 ipython을 실행하고 그 ipython이랑 여러분이 방금만든 그 노트북과 연결\n\n\n처음보이는 cell에 1+1을 입력 -&gt; 쉬프트엔터 -&gt; 결과2가 출력\n\n\n처음보이는 cell하나 = 자동으로 열린 하나의 메모장\ncell 1+1을 입력 = 메모장에 1+1을 적음\n쉬프트+엔터후 결과2를 출력 = cell의 내용을 복사 -&gt; ipython에 붙여넣음 -&gt; ipython 계산된 결과를 복사 -&gt; cell로 돌아와 붙여넣기\n\n\n새로운 cell을 추가하고 2+2을 입력 -&gt; 쉬프트엔터 -&gt; 결과4가 출력\n\n\n새로운 cell을 추가 = 새로운 메모장 추가\ncell 2+2을 입력 = 새로운 메모장에 2+2를 적음\n쉬프트+엔터후 결과4를 출력 = cell의 내용을 복사 -&gt; ipython에 붙여넣음 -&gt; ipython 계산된 결과를 복사 -&gt; cell로 돌아와 붙여넣기\n\n- 중요한 사실들 - IDE는 내부적으로 연산을 수행하는 능력이 없다. (생각해볼것: 왜 R을 꼭 설치하고 Rstudio를 설치해야 했을까?)\n\n주피터에서 커널을 재시작한다는 의미는 메모장이 열린채로 ipython을 껐다가 다시 실행한다는 의미\n주피터는 단순히 ’메모장의 내용을 복사하여 붙여넣는 기계’라고 볼 수 있다. 이렇게 생각하면 주피터는 꼭 ipython에 연결할 이유는 없다. 실제로 주피터에 R을 연결해서 쓸 수 있다. 즉 하나의 IDE가 여러개의 언어와 연결될 수 있다.\nJupyterlab이라는 프로그램은 크롬에 있는 내용과 ipython간의 통신을 제어하는 프로그램일 뿐이다.\n\n\n\n5세대 프로그래머: 가상컴퓨터(anaconda), 원격컴퓨터(server), 클라우드컴퓨터(colab)의 개념 등장\n- 지금까지는 ipython이 실행되는 컴퓨터와 크롬이 실행되는 컴퓨터가 동일하다는 전제였음.\n- 생각해보니까 어차피 ipython이 실행된 컴퓨터에서 내가 크롬에 입력한 명령 “전달”되기만 하면 되므로 꼭 같은 컴퓨터일 필요는 없다.\n\n모델1: 원격컴퓨터\n- 준비상태 - 전북대컴퓨터: ipython을 실행 + 이 컴퓨터는 인터넷 연결이 되어있어야함 - 우리집노트북: 크롬실행 + 이 컴퓨터도 인터넷이 연결되어 있어야함\n- 명령입력 - 우리집노트북 크롬에서 1+1을 입력하고 쉬프트 엔터를 누름\n- 우리집노트북 -&gt; 전북대컴퓨터 - 우리집 노트북의 내부의 어떤프로그램은 1+1이라는 명령을 복사하여 카카오톡으로 전북대 컴퓨터에 전달 - 전북대 컴퓨터의 내부의 어떤프로그램은 1+1이라는 명령을 카톡으로 받아서 그것을 ipython에게 전달\n- 전북대컴퓨터 -&gt; 우리집노트북 - 전북대컴퓨터 내부의 ipython은 2라는 출력결과를 계산함 - 전북대컴퓨터 내부의 어떤프로그램은 계산결과를 카톡으로 우리집 노트북에 알려줌 - 나는 우리집 노트북에서 계산결과를 받아볼 수 있다.\n\n\n모델2: 원격컴퓨터 + 가상컴퓨터\n- 준비상태 - 성능좋은 전북대 컴퓨터 1개 - 내 노트북 1개 (그냥 싸고 가벼운거) - 대학원생 아이패드 1개 (그냥 싸고 가벼운거)\n- 아이디어\n\n성능좋은 전북대 컴퓨터를 논리적으로 3개로 분리 \\(\\to\\) 이를 각각 (base) (py39jl17) (py38r40) 컴퓨터라고 하자.\n나는 (py39jl17)에 접속하여 파이썬 3.9와 줄리아 1.7을 설치한뒤 실습한다.\n대학원생은 (py38r40)에 접속하여 파이썬 3.8과 R 4.0을 설치하고 실습한다.\n(base)는 예비용으로 아무것도 설치안한 깨끗한 상태 유지\n내가 뭘 실수해서 (py39jl17)컴퓨터가 망가졌으나 (py38r40)은 아무 타격없다.\n나는 (py39jl17)를 삭제하고 (base)로 부터 다시 새로운 컴퓨터를 복사하여 (py39jl17)을 다시 만든다.\n\n\n\n모델3: 가상컴퓨터\n- 여러분들 사례\n\n여러분들의 컴퓨터는 (base), (py39) 2개의 컴퓨터로 나누어져 있음\n여러분들이 (py39)에만 주피터랩을 설치\n(py39)에 있는 ipython과 여러분의 크롬창이 서로 통신하면서 실습\n장점: 서로 다른 환경에 서로다른 파이썬과 R등을 설치할 수 있다. \\(\\to\\) 패키지간의 충돌이 최소화 (파이썬 입문 수업을 듣고, 이후에 파이썬을 이용하는 어떤수업을 들음)\n\n\n\n모델4: 클라우드\n- 사례1 - 성능이 그저그런 컴퓨터 27개 - 대학원생을 포함하여 쓸 사람은 5명 - 한사람당 27/5(=5.4)대의 컴퓨터식 할당\n- 사례2: 구글코랩 - 구글에 여러가지 성능을 가진 컴퓨터가 \\(n\\)대 있음 - \\(m\\)명의 사람이 \\(n\\)대의 컴퓨터에 접속 - 적당히 컴퓨터 자언을 분배하여 사용\n\n\n\n요약 및 정리\n- 결국 (1) 컴퓨터에 (2) 파이썬을 설치하고 (3) 실행하는 과정은 생각보다 다양한 선택의 조합이 가능하다.\n\n그냥 내 노트북에 파이썬을 설치할지? 내 노트북안에 가상컴퓨터를 만들고 거기에 파이썬을 설치할지? 학교의 데스크탑에 파이썬을 설치하고 쓸지? 설치를 안하고 구글컴퓨터에 설치된 파이썬을 난 쓰기만 할지?\npython설치할지? ipython를 설치할지? 어차피 가상환경을 쓸꺼니가 anaconda를 설치할지? 아니면 코랩쓸꺼니까 설치안할지?\n어떤 IDE를 쓸지? IDE를 쓰지 않을지? 내가 IDE를 직접구성해서 만들지?\n\n하지만 공통적으로 관통하는 원리가 있다\n\n\n숙제\n- 주피터랩에서 ’myprod.py’파일을 만들고 1부터 5까지의 곱을 계산하는 코드를 작성후 %run myprod를 실행하여 출력결과를 확인\n\n%run myprod\n\n120"
  },
  {
    "objectID": "posts/1. Basic/python 4_0323.html",
    "href": "posts/1. Basic/python 4_0323.html",
    "title": "파이썬 (0323) 4주차",
    "section": "",
    "text": "연산\n- 하나있다.`\n\nscore={'boram':49, 'iu':80}\nscore\n\n{'boram': 49, 'iu': 80}\n\n\n\n'boram' in score\n\nTrue\n\n\n\n\n'iu' in score\n\nTrue\n\n\n\n'hynn' in score\n\nFalse\n\n\n- in은 사실 다른 자료형도 가능하다`\n(관찰1)\n\n'a' in 'boram'\n\nTrue\n\n\n\n'c' in 'boram'\n\nFalse\n\n\n(관찰2)\n\ntpl = 1,2,3\ntpl\n\n(1, 2, 3)\n\n\n\n1 in tpl\n\nTrue\n\n\n\n4 in tpl\n\nFalse\n\n\n(관찰3)\n\nscore=[['boram',49], ['iu',80]]\nscore\n\n[['boram', 49], ['iu', 80]]\n\n\n\n['boram', 49] in score\n\nTrue\n\n\n- in 연산자가 dict형에 사용되면 key를 기준으로 True, False을 판단한다.\n\n\n메소드\n(get)\n\nscore={'boram':49, 'iu':80}\nscore\n\n{'boram': 49, 'iu': 80}\n\n\n\nscore.get('boram')\n\n49\n\n\n아래와 같은 기능\n\nscore['boram']\n\n49\n\n\n미묘한 차이점이 존재함\n\nscore['hynn']  # hynn이 없어서 키에러 출력, 그런 key는 없다..\n\nKeyError: 'hynn'\n\n\n\nscore.get('hynn')  #hynn이 없으면 아무것도 출력안함\n\n(kyes, values, items)\n-.keys()는 딕셔너리의 키를 리턴한다.\n\nscore={'boram':49, 'iu':80}\nscore\n\n{'boram': 49, 'iu': 80}\n\n\n\n?score.keys\n\n\n_keys=score.keys()\n_keys\n\ndict_keys(['boram', 'iu'])\n\n\n\ntype(_keys)   # 모르는 자료형이지만, list나 tuple과 같이 자료형을 바꿀수 있다.\n\ndict_keys\n\n\n\nlist(_keys)  # 아무튼 그 이상한 자료형도 리스트화가 가능\n\n['boram', 'iu']\n\n\n-.values()는 딕셔너리의 키를 리턴한다.\n\n_values=score.values()\n_values\n\ndict_values([49, 80])\n\n\n\ntype(_values)\n\ndict_values\n\n\n\nlist(_values)\n\n[49, 80]\n\n\n-.items()는 딕셔너리의 키를 리턴한다.\n\n_items=score.items()\n_items\n\ndict_items([('boram', 49), ('iu', 80)])\n\n\n\ntype(_items)\n\ndict_items\n\n\n\nlist(_items)\n\n[('boram', 49), ('iu', 80)]\n\n\n- for문에서의 dict\n(예시1)\n\nfor i in score.keys():\n    print(i)\n\nboram\niu\n\n\n\nfor i in score:\n    print(i)\n\nboram\niu\n\n\n\n딕셔너리 그자체도 for문에 넣을 수 있다.\ni에는 value가 삭제되어 들어간다. (즉 key만)\n결과를 보면 score대신에 score.keys()와 list(score)를 넣었을때와 결과가 같다.\n\n\nNote: list(score)하면 key만 리턴된다.\n\n(예시2)\n\nfor i in score.values():\n    print(i)\n\n49\n80\n\n\n(예시3)\n\nfor k in score.items():\n    print(k)\n\n('boram', 49)\n('iu', 80)\n\n\n(예시4)\n\nfor i,j in score.items():\n    print(i,j)\n\nboram 49\niu 80\n\n\n(예시5)\n\nfor i,j in score.items():\n    print(i + '의 중간고사 점수는 %s점입니다' %j)\n\nboram의 중간고사 점수는 49점입니다\niu의 중간고사 점수는 80점입니다\n\n\n[보충학습] 문자열 새치기\n\n'제 이름은 %s입니다.'  % '김보람' \n\n'제 이름은 김보람입니다.'\n\n\n\n'제 이름은 %s입니다.'  % [1,2]\n\n'제 이름은 [1, 2]입니다.'\n\n\n\n1+1\n\n2\n\n\n\n[1,2]+[3,4]\n\n[1, 2, 3, 4]\n\n\n\n%는 새치기연산자임. %s는 새치기하는 자리라고 생각\n\n보충학습끝\n\n\n딕셔너리 고급\n키는 문자열만 가능한 것이 아니다.\n- 정수키\n\nscore = {0:49, 1:80, 1:99} # key를 0,1,2로\nscore\n\n{0: 49, 1: 99}\n\n\n- 인덱싱은?\n\nscore[0] # 키로 인덱싱을 하고 있는데 마치 원소의 위치로 인덱싱을 하는 기분\n\n49\n\n\n- 그럼 혹시 이것도?\n\nscore[:2]\n\nTypeError: unhashable type: 'slice'\n\n\n\nscore[-1]   # 될리가 없지..\n\nKeyError: -1\n\n\n- key로 가능한 것이 문자열만 가능한 것이 아니라 다른 것도 가능하다. (숫자,튜플,,)\n(예시)\n\nscore={(0,'boram'):49, (1, 'iu'):80, (2, 'hynn'):99}\nscore\n\n{(0, 'boram'): 49, (1, 'iu'): 80, (2, 'hynn'): 99}\n\n\n\nscore[(0,'boram')]\n\n49\n\n\n\nscore[0,'boram'] #tuple이니까 가로 생략 가능\n\n49\n\n\n(예시)\n\nscore={('boram',0):10, ('boram',1):20, ('boram',2):30} #0은 출석점수, 1은 레포트 점수, 2는 중간고사 점수\nscore\n\n{('boram', 0): 10, ('boram', 1): 20, ('boram', 2): 30}\n\n\n\nscore[('boram',0)]\n\n10\n\n\n\nscore['boram',0]\n\n10\n\n\n\nscore[('broam,3')] = 99  # 보람의 기말고사 점수를 추가\n\n\nscore\n\n{('boram', 0): 10, ('boram', 1): 20, ('boram', 2): 30, 'broam,3': 99}\n\n\n- 문자열, 숫자값, 튜플의 공통점? 불변객체\n\na=11\n\n\na=22  # 22로 수정된 것이 아니고 재할당된것임..\n\n\na\n\n22\n\n\n\na='boram'\n\n\na='Broam'\n\n\na  # 이것도 재할당..\n\n'Broam'\n\n\n\na[0]\n\n'B'\n\n\n\na[0]='b'  # 문자열 불변\n\nTypeError: 'str' object does not support item assignment\n\n\n\n# 수정이랑 재할당을 구분하는 방법 -&gt; 메모리 주소 값을 찍어보면 된다.\n\n[참고로만]\n(인트형은 불변)\n\na=1\na, id(a)\n\n(1, 2254873389360)\n\n\n\na=2\na, id(a)\n\n(2, 2254873389392)\n\n\n(문자열도 불변)\n\na='boram'\na, id(a)\n\n('boram', 2254959000432)\n\n\n\na='Boram'\na, id(a)\n\n('Boram', 2254988509296)\n\n\n(리스트는 가변)\n\na=list('boram')\na, id(a)\n\n(['b', 'o', 'r', 'a', 'm'], 2254989018304)\n\n\n\na[0]='B'\n\n\na,id(a)   #id가 같다. 편집!\n\n(['B', 'o', 'r', 'a', 'm'], 2254989018304)\n\n\n\n\n집합\n\n선언\n\na={'notebook', 'desktop'}\n\n\n\n원소추출\n- 일단 인덱스로는 못한다.\n\na={'notebook', 'desktop'}\na[0]\n\nTypeError: 'set' object is not subscriptable\n\n\n- 딱히 하는 방법이 없다. 그리고 이걸 하는 의미가 없다. 원소에 접근해서 뭐하려고…!!\n원소추가\n- 이건 의미가 있다.\n\na={'notebook', 'desktop'}\n\n\na.add('ipad')\na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\na.add('notebook') # 이미 원소로 있는 건 추가 되지 않음\na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n원소삭제\n\na.remove('notebook')\na\n\n{'desktop', 'ipad'}\n\n\n연산\n- in 연산자\n\n1 in [1,2,3,4]\n\nTrue\n\n\n\n5 in [1,2,3,4]\n\nFalse\n\n\n\na=('desktop','ipad','notebook')\na\n\n('desktop', 'ipad', 'notebook')\n\n\n\n'notebook' in a\n\nTrue\n\n\n- 참고로 in 연산자는 집합에서만 쓰는 것은 아님\n- 합집합, 교집합, 차집합\n\nday1 = {'notebook', 'desktop'}\nday2 = {'notebook', 'ipad'}\n\n\nday1 | day2   # 합집합\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\nday1 & day2 # 교집합\n\n{'notebook'}\n\n\n\nday1 - day2  # 차집합\n\n{'desktop'}\n\n\n\nday2 - day1\n\n{'ipad'}\n\n\n- 부분집합\n\nday1={'notebook','desktop'}\nday2= day1 | {'ipad'}\n\n\nday1\n\n{'desktop', 'notebook'}\n\n\n\nday2\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\nday1&lt;day2   # day1는 day2의 부분집합인가?\n\nTrue\n\n\n\nday2&lt;day1\n\nFalse\n\n\n메소드\n- 합집합\n\nday1= {'notebook','desktop'}\nday2 = {'notebook','ipad'}\n\n\nday1.union(day2)\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\n# 나머지 메소드는 스스로 찾아보세용\n\nfor문\n\nday1= {'notebook','desktop'}\nday2 = {'notebook','ipad'}\n\n\nfor i in day1|day2:\n    print(i)\n\ndesktop\nipad\nnotebook\n\n\n(숙제) 길이가 4인 집합을 두개만들고 공통원소를 2개로 설정한 뒤 합집합을 구하는 코드를 작성하라.\n\nboram={'father','mother','me','coco'}\n\n\nlen(boram)\n\n4\n\n\n\nsu={'father','mother','su','name'}\n\n\nlen(su)\n\n4\n\n\n\nboram | su\n\n{'coco', 'father', 'me', 'mother', 'name', 'su'}"
  },
  {
    "objectID": "posts/1. Basic/python 3_0321.html",
    "href": "posts/1. Basic/python 3_0321.html",
    "title": "파이썬 (0321) 3주차",
    "section": "",
    "text": "(리스트가 아니고) 튜플을 쓰는 이유\n- 책의 설명 (파이썬에 한정되는 것은 아니고 모든 언어에 존재하는 불변형 객체에 적용가능한 설명) - 실수방지 - 빠르다, 다중작업에 유리하다, 여러사람과 작업하기에 유리하다, 깊은복사/얕은복사시 원하지 않는 오류(side effect라고 함)를 방지할 수 있다, 메모리관리에도 유리함 등등 - 느낌: 불변형은 기능제한이 있는데 가볍고 빠른, 가변형은 기능은 풍부하지만 약간 느리고 무거운 느낌임 (불변형: 라면사리, 가변형:라면)\n- 교수님 설명 (파이썬 한정 불변객체, 즉 튜플에 대한 설명) - 튜플의 장점은 소괄호의 생략에 있음 (파이썬과 줄리아만 가능) - 이것이 언패킹구문과 결합하여 어마무시한 가독성을 제공한다.\n\ndef mycal(a,b):\n    return a+b, a-b, a*b, a/b # 여러개의 값을 리턴하는 듯 보인다. -&gt;  사실은 길이가 4인 튜플 1개를 리턴\n\n\nmycal(2,3)\n\n(5, -1, 6, 0.6666666666666666)\n\n\n\n_, _, mulrslt, _ = mycal(2,3) # 병렬할당\n\n\nmulrslt\n\n6\n\n\n- 의문: 왜 튜플만 괄호를 생략할 수 있지?\n- 교수님 생각 - 튜플을 먼저 만들고, 괄호를 생략하는 문법을 추가한것은 아닐것임 - 원래 괄호없이 컴마만 대충찍어서 선언가능한 간단한 타입의 벡터형을 만들고 싶었을 것임 - 왜? 괄호없는 벡터를 만들고 + 연패킹을 사용하면 여러가지 구문들이 엄청나게 간단해짐 - 컴마컴마로 선언하는 벡터는 한 두번 쓰고 버리는 경우가 많으며 대부분 이름도 필요 없음 -&gt; 원소에 접근해서 sorting하여 순서를 바꾸고 싶다던가 원소를 추가할 이유가 없음 -&gt; 비싼 가변형으로 만들 이유가 없다. - 필요한것: 데이터가 벡터의 형태로 모여있기만 하면 된다.\n- 다른사람들 의견 (컴공과) - 튜플 + 언패킹에 충격 \\(\\to\\) 파이썬 편하다..\n\n\n인덱싱고급(스트라이딩)\n- 스트라이딩 [start:stop:step]\n\nlst = list('abcdefgh')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[0:8:2]\n\n['a', 'c', 'e', 'g']\n\n\n- 생략\n\nlst[:]\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[::2]\n\n['a', 'c', 'e', 'g']\n\n\n\nlst[:8:2]\n\n['a', 'c', 'e', 'g']\n\n\n- 예제: 짝수/홀수 원소 추출\n\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[::2]  # 1,3,5,7, ... 홀수 원소\n\n['a', 'c', 'e', 'g']\n\n\n\nlst[1::2] # 2,4,6,8,... 짝수 원소\n\n['b', 'd', 'f', 'h']\n\n\n- step = -1이면?\n\nlst[::-1]    # 뒤에서부터\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nreverse와 같은 기능\n\n(reverse)와 비교\n관찰1: reverse 메소드는 리소드 자체를 변화시킴\n\nlst = list('abcdefgh')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst.reverse()  # 리버스는 자체가 변화한다.\nlst  \n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n관찰2: [::-1] 는 리스트는 변화시키지 않음\n\nlst = list('abcdefgh')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[::-1]\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n- 사실 -step은 쓰는 것이 조금 까다롭다.\n(예제) 처음과 끝을 생략하지 않고 아래와 동일한 효과를 주는 코드를 만들어 보자.\n\nlst = list('abcdefgh')\nlst[::-1]\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n결국 lst[?:?:-1]의 꼴에서 적당히 ?의 값을 채우면 된다.\n\nlst[-1::-1] # 일단 첫 시작ㄷ은 제일 마지막 원소\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nlst[-1:0:-1] # 마지막 인덱스는 포함x\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b']\n\n\n\nlst[-1:-1:-1] \n\n[]\n\n\n잠깐 인덱스를 생각해보자.\n\n\n\na\nb\nc\nd\ne\nf\ng\nh\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n\n\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\n\nlst[-1:-8:-1] \n\n['h', 'g', 'f', 'e', 'd', 'c', 'b']\n\n\n\nlst[-1:-9:-1] \n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n(예제)\n\nlst[2::2]\n\n['c', 'e', 'g']\n\n\n\nlst[-2::-2]\n\n['g', 'e', 'c', 'a']\n\n\n\nlst[-2:2:2]\n\n[]\n\n\n\nlst[2:3:2]\n\n['c']\n\n\n\nlst[2:2:2]\n\n[]\n\n\n\nlst[2:2:-2]\n\n[]\n\n\n결론: -step을 자주 쓰진 말자\n\n\n컴프리헨션 고급 (if문이 포함된 컴프리헨션)\n- 예제: 제곱수준에서 12로 나누어 떨어지는 수만 원소로 가지는 리스트를 만들고 싶다. - 제곱수: 1,4, 9, 16, 25, 36, … - 12로 나누어 떨어지는 수: 36…\n(예비학습)\n\n12 % 5 # 나머지 리턴\n\n2\n\n\n(풀이)\n\nlst=[]\nfor i in range(1,101):\n    if (i**2 % 12 == 0 ):\n        lst.append(i**2)\n\n\nlst\n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]\n\n\n(풀이2)\n\n[i**2 for i in range(1,101) if (i**2 % 12==0)]\n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]\n\n\n\n\n함수고급 (조건부리턴)\n- 홀수 짝수를 판별하는 함수 만들기1\n\ndef test(a):\n    if a% 2 ==0:\n        return 'even'\n    else:\n        return 'odd'\n\n\ntest(0)\n\n'even'\n\n\n\ntest(3)\n\n'odd'\n\n\n\n[test(a) for a in range(1,11)]\n\n['odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even']\n\n\n- 홀수 짝수를 판별하는 함수 만들기2\n\ndef test(a):\n    return 'even' if a%2==0 else 'odd'\n\n\ntest(2)\n\n'even'\n\n\n\n[test(a) for a in range(1,11)]\n\n['odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even']\n\n\n\n\nlen함수\n- 0차원 자료형은 len함수가 동작하지 않음\n\na=1\nlen(a)\n\nTypeError: object of type 'int' has no len()\n\n\n\na=True\nlen(a)\n\nTypeError: object of type 'bool' has no len()\n\n\n\na=3.14\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nnote: 이것이 어떠한 수학적인 의미를 가지거나 0차원의 본질적인 진리를 뜻하는 것은 아니다. R에서는 1, 3.14, True의 길이가 1로 존재함\n\n- 1차원 자료형은 len함수가 동작\n\na='boram'\nlen(a)\n\n5\n\n\n\na=[1,2,3,4,5,6,7]\nlen(a)\n\n7\n\n\n\na=1,2,3,4\nlen(a)\n\n4\n\n\n\na=range(10)\nlen(a)\n\n10\n\n\n- 길이가 1인 1차원 자료형과 0차원 자료형은 다른것임\n\na='g'\nlen(a)\n\n1\n\n\n\na=[1]   \nlen(a)\n\n1\n\n\n\na=(1,)\nlen(a)\n\n1\n\n\n\na=range(1)\nlen(a)\n\n1\n\n\n- 길이가 0인 1차원 자료형도 존재함\n\na=''\nlen(a)\n\n0\n\n\n\na=[]\nlen(a)\n\n0\n\n\n\na=()\nlen(a)\n\n0\n\n\n\na=range(0)\nlen(a)\n\n0\n\n\n\n\nsummary : str, list, tuple\n- str,list, tuple은 모두 시퀀스형이라는 공통점이 있다. \\(\\to\\) 원소의 위치번호로 인덱싱이 가능\n\nlst=[1,2,3,4]\n\n\nlst[0]  #위치번호=0\n\n1\n\n\n\nlst[-1]  #위치번호=1\n\n4\n\n\n- str, list, tuple은 차이점도 존재함. 잠깐 정리해보자.\n*** 시퀀스형의 카테고리***\n\n컨테이너형: list, tuple\n균일형: str\n가변형: list\n불변형: tuple, str\n\n*****표로 정리하면*****\n\n\n\n\n컨테이너형\n균일형\n\n\n\n\n가변형\nlist\n-\n\n\n불변형\ntuple\nstr\n\n\n\n- 시퀀스형이 아닌 1차원 자료형도 있을까? 원소의 위치번호로 인덱싱이 불가능한 자료형\n- 왜 이런게 필요할까? - 벡터에서 원소를 뽑는것은 정보의 모임에서 정보를 검색하는 것과 같다. - 정보를 순서대로 나열한 뒤에 그 순서를 이용하여 검색하는 방법은 유용하다. - 하지만 경우에 따라서는 키워드 를 기억해서 그 키워드를 바탕으로 정보에 접근하는 방법이 유용할 수 있다.\n****카카오톡 대화내용 검색****\n(상황1) 오늘 아침에 와이프가 뭔가를 카톡으로 부탁함. 그런데 그 뭔가가 기억안남.\n(상황2) 개강전에 동료교수와 함께 저녁약속을 카톡으로 잡았었음. 그런데 그게 언제인지 기억안남.\n(상황3) 오늘아침 동료교수와 함께 점심약속을 카톡으로 잡았었음. 그런데 그 장소가 기억나지 않음\n- 순서대로 정리된 자료를 검색할때는 시퀀스형이 유리하다. 그런데 키워드로 검색하고 싶을 경우는 딕셔너리 타입이 유리하다.\n\n\ndict\n선언\n- 방법1\n\nscore={'boram':49, 'iu':80}\nscore\n\n{'boram': 49, 'iu': 80}\n\n\n\ntype(score)\n\ndict\n\n\n- 방법2\n\nscore=dict(boram=49, iu=80)\nscore\n\n{'boram': 49, 'iu': 80}\n\n\n\ntype(score)\n\ndict\n\n\n- 방법3\n\n_lst= [['boram',40],['iu',80]] \n_lst\n\n[['boram', 40], ['iu', 80]]\n\n\n\ndict(_lst)\n\n{'boram': 40, 'iu': 80}\n\n\n- 방법4\n\n_tpl = ('boram',49),('iu',80)\n_tpl\n\n(('boram', 49), ('iu', 80))\n\n\n\ndict(_tpl)\n\n{'boram': 49, 'iu': 80}\n\n\n원소추출\n\nscore={'boram':49, 'iu':80}\nscore\n\n{'boram': 49, 'iu': 80}\n\n\nboram의 점수를 추출하고 싶다면?\n\nscore[0]   # 이렇게 ㄴㄴ \n\nKeyError: 0\n\n\n\nscore['boram']   # 위치번호가 아닌 key를 넣어야 한다.\n\n49\n\n\n- 리스트로 저장했다면?\n\nscore=[['boram',49],['iu',80]]\nscore\n\n[['boram', 49], ['iu', 80]]\n\n\n(방법1)\n\nscore[0][1]  # boram의 점수를 출력하란 의미 , 가독성이 떨어짐,\n\n49\n\n\n(방법2)\n\n_keys = [score[i][0] for i in range(len(score))]   #리스트컴프리헨션\n_keys\n\n['boram', 'iu']\n\n\n\n_values = [score[i][1] for i in range(len(score)) if score[i][0]=='boram']  \n_values\n\n[49]\n\n\n원소추가, 변경, 삭제\n\nscore={'boram':49, 'iu':80}\nscore\n\n{'boram': 49, 'iu': 80}\n\n\n- 추가\n\nscore['hynn']=99 # 추가\n\n\nscore\n\n{'boram': 49, 'iu': 80, 'hynn': 99}\n\n\n\nscore['boram']\n\n49\n\n\n- 변경\n\nscore['iu']=99   # 변경 ( 가변형)\nscore\n\n{'boram': 49, 'iu': 99, 'hynn': 99}\n\n\n\nscore\n\n{'boram': 49, 'iu': 99, 'hynn': 99}\n\n\n-삭제1\n\nscore={'boram':49, 'iu':80, 'hynn':99}\ndel score['boram']   # 삭제 방법 1\nscore\n\n{'iu': 80, 'hynn': 99}\n\n\n-삭제2\n\nscore={'boram':49, 'iu':80, 'hynn':99}\nscore.pop('boram')   # 삭제 방법 2\nscore\n\n{'iu': 80, 'hynn': 99}\n\n\n- 참고로 리스트였다면 이러한 삭제작업역시 비효율적이였을 것임\n\nscore = [['guebin',49],['iu',80],['hynn',99]] \nscore\n\n[['guebin', 49], ['iu', 80], ['hynn', 99]]\n\n\n\nscore = [[key,val] for key,val in score if key != 'guebin'] \nscore\n\n[['iu', 80], ['hynn', 99]]\n\n\n(숙제) 길이가 4인 dictionary를 생성 - len 함수를 이용하여 길이를 측정 - key를 이용하여 각 원소에 접근하여 보기\n\n_number = {'sung':2195, 'park':2836, 'choi':4236, 'kim':4738}\n_number\n\n{'sung': 2195, 'park': 2836, 'choi': 4236, 'kim': 4738}\n\n\n\nlen(_number)\n\n4\n\n\n\n_number['park']\n\n2836\n\n\n\n_number['choi']\n\n4236\n\n\n\n_number['jung']=4280\n\n\n_number\n\n{'sung': 2195, 'park': 2836, 'choi': 4236, 'kim': 4738, 'jung': 4280}\n\n\n\n_number.pop('kim')\n\n4738\n\n\n\n_number\n\n{'sung': 2195, 'park': 2836, 'choi': 4236, 'jung': 4280}"
  },
  {
    "objectID": "posts/4. Class/2023-06-12-15wk-1.out.html",
    "href": "posts/4. Class/2023-06-12-15wk-1.out.html",
    "title": "파이썬 프로그래밍 15주차: 클래스-상속",
    "section": "",
    "text": "최규빈\n2023-06-12"
  },
  {
    "objectID": "posts/4. Class/2023-06-12-15wk-1.out.html#상속의-사용방법",
    "href": "posts/4. Class/2023-06-12-15wk-1.out.html#상속의-사용방법",
    "title": "파이썬 프로그래밍 15주차: 클래스-상속",
    "section": "상속의 사용방법",
    "text": "상속의 사용방법\n- 클래스를 조금 수정하고 싶을때, 아래와 같은 문법을 이용하면 편리하다.\nclass 새로운_클래스_이름(수정할_클래스_이름): \n    def 수정_및_추가할_함수이름(self,...):\n        ..."
  },
  {
    "objectID": "posts/4. Class/2023-06-12-15wk-1.out.html#간단한-사용예시",
    "href": "posts/4. Class/2023-06-12-15wk-1.out.html#간단한-사용예시",
    "title": "파이썬 프로그래밍 15주차: 클래스-상속",
    "section": "간단한 사용예시",
    "text": "간단한 사용예시\n\nclass Init:\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n\n\nclass Show(Init):\n    def show(self):\n        ## 여기는 Show 클래스야\n        print(\"Show클래스에서 정의된 show메소드를 실행합니다\")\n        print('value={}'.format(self.value))\n\n\na = Show(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.show()\n\nShow클래스에서 정의된 show메소드를 실행합니다\nvalue=5\n\n\n\na.show??\n\n\na.__init__??"
  },
  {
    "objectID": "posts/4. Class/2023-06-12-15wk-1.out.html#슈퍼클래스-메소드-재활용",
    "href": "posts/4. Class/2023-06-12-15wk-1.out.html#슈퍼클래스-메소드-재활용",
    "title": "파이썬 프로그래밍 15주차: 클래스-상속",
    "section": "슈퍼클래스 메소드 재활용",
    "text": "슈퍼클래스 메소드 재활용\n- 방법1: 직접 슈퍼클래스 명시\n\nclass Deco(Show):\n    def __init__(self,value):\n        ## 여기는 Deco클래스야~\n        print(\"짜라란~~\")\n        Show.__init__(self,value)\n        print(\"짠짠~!!\")\n\n\na=Deco(5)\n\n짜라란~~\nInit클래스에서 정의된 __init__메소드를 실행합니다\n짠짠~!!\n\n\n\na.show??\n\n\na.__init__??\n\n- 방법2: super() 이용 (생략안한버전)\n\nclass Deco(Show):\n    def __init__(self,value):\n        ## 여기는 Deco클래스야~\n        print(\"짜라란~~\")\n        super(Deco,self).__init__(value)\n        print(\"짠짠~!!\")\n\n\na=Deco(5)\n\n짜라란~~\nInit클래스에서 정의된 __init__메소드를 실행합니다\n짠짠~!!\n\n\n\na.show??\n\n\na.__init__??\n\n- 방법3: super() 이용 (생략한버젼) &lt;– 이렇게 쓰세요!\n\nclass Deco(Show):\n    def __init__(self,value):\n        ## 여기는 Deco클래스야~\n        print(\"짜라란~~\")\n        super().__init__(value)\n        print(\"짠짠~!!\")\n\n\na=Deco(5)\n\n짜라란~~\nInit클래스에서 정의된 __init__메소드를 실행합니다\n짠짠~!!\n\n\n\na.show??\n\n\na.__init__??\n\n- 방법4: super() 이용, 방법3을 이해하기 위한 코드\n\nclass Deco(Show):\n    def __init__(self,value):\n        ## 여기는 Deco클래스야~\n        print(\"짜라란~~\")\n        super(__class__,self).__init__(value)\n        print(\"짠짠~!!\")\n\n\na=Deco(5)\n\n짜라란~~\nInit클래스에서 정의된 __init__메소드를 실행합니다\n짠짠~!!\n\n\n\na.show??\n\n\na.__init__??\n\n- 이때 방법2-4는 완전히 동일한 코드이다, 방법1-4는 이 예제에서 같은효과이다."
  },
  {
    "objectID": "posts/4. Class/2023-06-12-15wk-1.out.html#다중상속",
    "href": "posts/4. Class/2023-06-12-15wk-1.out.html#다중상속",
    "title": "파이썬 프로그래밍 15주차: 클래스-상속",
    "section": "다중상속",
    "text": "다중상속\n\n일반적인 다중상속\n- Add 클래스선언\n\nclass Add:\n    def __init__(self,value):\n        self.value = value \n    def __add__(self,value2):\n        return self.value + value2\n\n\na=Add(2)\n\n\na+5\n\n\na*2 # 곱하기는 정의한적없음\n\n- Mul 클래스선언\n\nclass Mul:\n    def __init__(self,value):\n        self.value = value \n    def __mul__(self,value2):\n        return self.value * value2\n\n\na = Mul(5)\na.value\n\n\na+2 #정의한적 없음\n\n\na*2 \n\n- AddMul 클래스를 선언 (기존의 Add, Mul 상속받아서 이용)\n\nclass AddMul(Add,Mul):\n    pass \n\n\na = AddMul(5)\na.value\n\n\na+2\n\n\na*5\n\n\n\n다중상속 우선순위 (__init__이 겹치는뎅?)\n\nclass Add:\n    def __init__(self,value):\n        print(\"Add클래스에서 정의된 __init__ 메소드가 실행됩니다\")\n        self.value = value \n    def __add__(self,value2):\n        return self.value + value2\n              \nclass Mul:\n    def __init__(self,value):\n        print(\"Mul클래스에서 정의된 __init__ 메소드가 실행됩니다\")        \n        self.value = value \n    def __mul__(self,value2):\n        return self.value * value2        \n    \nclass AddMul(Add,Mul):\n    pass     \n\n\na = AddMul(5)\n\nAdd클래스에서 정의된 __init__ 메소드가 실행됩니다\n\n\n\n\n믹스인 클래스 (\\(\\star\\star\\star\\))\n\nclass Init:\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n\nclass Add(Init):\n    def __add__(self,value2):\n        return self.value + value2\n              \nclass Mul(Init):\n    def __mul__(self,value2):\n        return self.value * value2        \n    \nclass AddMul(Add,Mul):\n    pass     \n\n\na = AddMul(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na+2\n\n\na*5"
  },
  {
    "objectID": "posts/4. Class/2023-06-12-15wk-1.out.html#다중상속시-super의-활용",
    "href": "posts/4. Class/2023-06-12-15wk-1.out.html#다중상속시-super의-활용",
    "title": "파이썬 프로그래밍 15주차: 클래스-상속",
    "section": "다중상속시 super()의 활용",
    "text": "다중상속시 super()의 활용\n\nsuper()를 쓰지 않은 나쁜사용예시\n- 초기값을 설정하는 클래스 만듬\n\nclass Init:\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n\n- init을 상속받아서\n\n“\\({\\tt 초기값}= {\\tt 초기값} \\times 2\\)”\n“\\({\\tt 초기값}= {\\tt 초기값} + 5\\)”\n\n를 인스턴스 생성과 동시에 수행하는 클래스를 각각 만듦\n\nclass Times2(Init):\n    def __init__(self,value):\n        Init.__init__(self,value)\n        self.value = self.value * 2\n\n\na=Times2(5)\na.value\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\nclass Plus5(Init):\n    def __init__(self,value):\n        Init.__init__(self,value)\n        self.value = self.value + 5\n\n\na=Plus5(5)\na.value\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n- 지나고 보니까 “\\({\\tt 초기값} = {\\tt 초기값} \\times 2 + 5\\)” 를 인스턴스 생성과 동시에 수행해주는 클래스를 만들고 싶음.\n\nclass Times2Plus5(Times2,Plus5):\n    def __init__(self,value):\n        Times2.__init__(self,value)\n        Plus5.__init__(self,self.value)\n\n\na = Times2Plus5(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.value \n\n- 싫은이유1: 코드가 지저분하다.\n- 싫은이유2: 진정한 의미의 상속이 아닌것 같다.\n\nclass Times2Plus5():\n    def __init__(self,value):\n        Times2.__init__(self,value)\n        Plus5.__init__(self,self.value)\n\n\na = Times2Plus5(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.value \n\n\n\nsuper()를 활용한 좋은사용예시\n- 아키텍처를 아래와 같이 바꾸자\n\nclass Init(object):\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n        \nclass Times2(Init):\n    def __init__(self,value):\n        super().__init__(value)\n        self.value = self.value * 2\n        \nclass Plus5(Init):\n    def __init__(self,value):\n        super().__init__(value)\n        self.value = self.value + 5\n        \nclass Times2Plus5(Plus5,Times2):\n    def __init__(self,value):\n        super().__init__(value)\n\n- 써보자\n\na=Times2Plus5(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.value\n\n\n(5*2)+5\n\n- 이것이 왜 가능?\n\n원리: mro상으로 상위에 있는 순서대로 타고 올라간 뒤, mro순서대로 한번씩만 __init__을 실행함!!\n\n- 소감: 코드가 깔끔하긴해 + 진정한 상속의 느낌도 있어 (그렇지만 사용하고 싶지는 않음)"
  },
  {
    "objectID": "posts/4. Class/2023-06-12-15wk-1.out.html#super의-사용방법",
    "href": "posts/4. Class/2023-06-12-15wk-1.out.html#super의-사용방법",
    "title": "파이썬 프로그래밍 15주차: 클래스-상속",
    "section": "super()의 사용방법",
    "text": "super()의 사용방법\n- 이제 “\\(({\\tt 초기값} \\times 2 + 5)\\times 2\\)” 를 수행해주는 클래스를 만들고 싶음.\n\nclass Init(object):\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n        \nclass Times2(Init):\n    def __init__(self,value):\n        super().__init__(value)\n        self.value = self.value * 2\n        \nclass Plus5(Init):\n    def __init__(self,value):\n        super().__init__(value)\n        self.value = self.value + 5\n        \nclass Times2Plus5Times2(Plus5,Times2):\n    def __init__(self,value):\n        super().__init__(value)\n        super(Plus5,self).__init__(self.value)\n\n\na=Times2Plus5Times2(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.value\n\n\nTimes2Plus5Times2.mro()\n\n- 코드해석\n\nsuper().__init__(value) 은 Times2Plus5Times2의 MRO순서로 상위인 클래스 Init,Times2,Plus 의 __init__을 순서대로 실행하되 중복실행은 하지 않음.\nsuper(Plus5,self).__init__(self.value) 은 Plus5보다 MRO순서로 상위인 클래스 Init,Times2 의 __init__을 순서대로 실행하되 중복실행은 하지 않음.\n\n- 그냥 이게 낫지 않나?\n\nclass Init(object):\n    def __init__(self,value):\n        ## 여기는 Init 클래스야 \n        print(\"Init클래스에서 정의된 __init__메소드를 실행합니다\")        \n        self.value = value\n        \nclass Times2(Init):\n    def times2(self):\n        self.value = self.value * 2\n        \nclass Plus5(Init):\n    def plus5(self):\n        self.value = self.value + 5\n        \nclass Times2Plus5Times2(Plus5,Times2):\n    def times2plus5times2(self):\n        self.times2()\n        self.plus5()\n        self.times2()\n\n\na = Times2Plus5Times2(5)\n\nInit클래스에서 정의된 __init__메소드를 실행합니다\n\n\n\na.times2plus5times2()\n\n\na.value\n\n- 그래도 이 문법을 알아야 한다. 왜??\n\n\n\n\n\n\n\n\n\n단계\n인터넷밈\n클래스\n레포트표지\n\n\n\n\n1단계: 구상\n\\(\\bullet\\) 이거 재미있다.  \\(\\bullet\\) 밈화하자.\n\\(\\bullet\\) 이 코드 반복해서 자주 쓸 것 같다.  \\(\\bullet\\) 이 코드를 쉽게 찍어내는 (복사할 수 있는) 클래스를 만들자\n\\(\\bullet\\) 레포트 표지를 자주 만들 것 같음  \\(\\bullet\\) 양식파일을 만들까?\n\n\n2단계: 틀생성\n\\(\\bullet\\) “밈틀”: 복사하고 싶은 속성을 추려 밈을 생산하기에 유리한 틀을 만듬\n\\(\\bullet\\) 클래스의 선언\n\\(\\bullet\\) REPORT_2023_최규빈.hwp 양식파일을 생성\n\n\n3단계: 틀 \\(\\to\\) 복제\n\\(\\bullet\\) 밈화: “밈틀”에서 다양한 밈을 만들고 놈\n\\(\\bullet\\) 인스턴스화: 클래스에서 인스턴스를 생산\n\\(\\bullet\\) 레포트 양식표지에서 다양한 레포트를 냄\n\n\n4단계: 틀 \\(\\to\\) 틀변경 \\(\\to\\) 복제\n\\(\\bullet\\) 생각해보니까 초기 밈틀은 시시함.  \\(\\bullet\\) 초기 밈틀을 수정해 새로운 밈틀을 만들고 더 재미있는 밈을 만들고 놈\n\\(\\bullet\\) 초기클래스와 비슷한 클래스를 선언할 일이 생김  \\(\\bullet\\) 상속,오버라이딩: 초기클래스를 상속받아 클래스를 새롭게 정의하고 인스턴스를 재 생산\n\\(\\bullet\\) 공모전에 참가하여 결과보고서를 작성할 일이 생김.  \\(\\bullet\\) REPORT_2023_최규빈.hwp 를 적당히 변형하여 수정된 틀을 만들고 결과보고서 생산.\n\n\n\n\n상속은 위의 표에서 4단계에 해당한다. 즉 어떠한 클래스를 상속받을때는 “내가 만든 클래스”가 아닐 경우가 대부분이다. 따라서 “애초부터 메소드가 겹치지 않게 클래스들을 깔끔하게 디자인을 하는것” 은 불가능한 경우가 많다."
  },
  {
    "objectID": "posts/4. Class/2023-06-12-15wk-1.out.html#리스트의-상속",
    "href": "posts/4. Class/2023-06-12-15wk-1.out.html#리스트의-상속",
    "title": "파이썬 프로그래밍 15주차: 클래스-상속",
    "section": "리스트의 상속",
    "text": "리스트의 상속\n- list와 비슷한데 멤버들의 빈도가 계산되는 메소드를 포함하는 새로운 나만의 list를 만들고 싶다.\n\nlst = list('asdfasssdfa')\nlst \n\n- 각 원소들의 빈도를 구해보면 아래와 같다.\n\n{s:lst.count(s) for s in set(lst)}\n\n\nlst.freq() # 이렇게 실행하면 위의결과가 나왔으면 좋겠다.\n\n- 이것을 내가 정의하는 새로운 list의 메소드로 넣고 싶다.\n\nclass List(list):\n    def freq(self):\n        return {s:self.count(s) for s in set(self)}\n\n\nlst2 = List('asdfasssdfa')\n\n\nlst2\n\n\nlst\n\n\n#lst2+lst ## 거의 lst2는 일반적인 lst와 같은역할\n\n- 기존리스트에서 추가로 frequency() 메소드가 존재함.\n\nlst2.freq()"
  },
  {
    "objectID": "posts/4. Class/python 12_0518.html",
    "href": "posts/4. Class/python 12_0518.html",
    "title": "파이썬 (0518) 12주차",
    "section": "",
    "text": "- 클래스 오브젝트에 소속된 변수와 인스턴스오브젝트에 소속된 변수를 설명한다.\n\n\n- 파이썬은 모든 것이 오브젝트로 이루어져 있다. &lt;- 우선은 그냥 명언처럼 외우자\n- 오브젝트는 메모리 주소에 저장되는 모든 것을 의미한다.\n\na=1\nid(a)  # 메모리주소를 보는 명령어\n\n7390560\n\n\n\na='asdf'\nid(a)\n\n139914601692912\n\n\n\na=[1,2,3]\nid(a)\n\n139914601744176\n\n\n- 클래스와 인스턴스도 오브젝트이다.\n\nclass A:\n    x=0\n    def f(self):\n        print(self.x)\n\n\nA는 오브젝트\n\n\nid(A)\n\n37700928\n\n\n\na는 오브젝트\n\n\na=A()\nid(a)\n\n139914601844368\n\n\n\nb는 오브젝트\n\n\nb=A()\nid(b)\n\n139914601854160\n\n\n- 앞으로는 A를 클래스오브젝트, a,b를 인스턴스 오브젝트라고 부르자.\n\n\n\n- 시점0\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\nid(A)\n\n38051088\n\n\n\nA.x, A.y\n\n(0, 0)\n\n\n- 시점1\n\na= A()\nb= A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점2\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 1], [1, 1], [0, 1])\n\n\n- 시점3\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 2], [1, 2], [1, 2])\n\n\n- 시점4\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 3], [1, 3], [2, 3])\n\n\n- 시점5\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 4], [2, 4], [2, 4])\n\n\n- 시점6\n\nc=A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y], [c.x, c.y]\n\n([0, 4], [2, 4], [2, 4], [0, 4])\n\n\n- 시점7\n\nc.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y], [c.x, c.y]\n\n([0, 5], [2, 5], [2, 5], [1, 5])\n\n\n- 신기한점: 각 인스턴스에서 인스턴스이름.f()를 실행한 횟수를 서로 공유하는 듯 하다. (A가 관리하는 것처럼 느껴진다.)\n- x와 y는 약간 느낌이 다르다. x는 지점소속, y는 본사소속의 느낌?\n\n이 예제에서 x는 인스턴스오브젝트에 소속된 변수, y는 클래스 오브젝트에 소속된 변수처럼 느껴짐\n\n(약속) 앞으로는 인스턴스 오브젝트에 소속된 변수를 인스턴스 변수라고 하고, 클래스 오브젝트에 소속된 변수를 클래스 변수라고 하자.\n- 인스턴스 변수와 클래스 변수를 구분하는 방법? 인스턴스이름.__dict__를 쓰면 인스턴스 변수만 출력된다.\n\n따라서 a. + tab을 눌러서 나오는 변수중 a.__dict__에 출력되지 않으면 클래스 변수이다.\n\n\na.__dict__\n\n{'x': 2}\n\n\n\nb.__dict__\n\n{'x': 2}\n\n\n\nc.__dict__\n\n{'x': 1}\n\n\n- 이 예제에서 아래는 모두 클래스 변수이다.\n\na.y, b.y, c.y\n\n(5, 5, 5)\n\n\n\n\n\n- 시점0\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\n[A.x, A.y], [a.x, a.y]\n\n([0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\n[A.x,A.y], [a.x, a.y]\n\n([0, 3], [3, 3])\n\n\n- 시점2\n\na.x = 0 # f의 실행기록을 초기화 하고 싶다.\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\n[A.x,A.y], [a.x, a.y]\n\n([0, 4], [1, 4])\n\n\n\n\n\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\nb=A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 1], [1, 1], [0, 1])\n\n\n- 시점2\n\nA.y = 100\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 100], [1, 100], [0, 100])\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 101번 실행\n\n\n\n\n\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\n[A.x, A.y], [a.x, a.y]\n\n([0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x, A.y], [a.x, a.y]\n\n([0, 1], [1, 1])\n\n\n- 시점2\n\nA.x = 100   # 이렇게 되면 앞으로 만들어진 인스턴스튼 기본적으로 현재 인스턴스에서| 100번 f를 실행하였다는 정보를 가지고 태어나게 된다.\n\n\n[A.x, A.y], [a.x, a.y]\n\n([100, 1], [1, 1])\n\n\n- 시점3\n\nb=A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([100, 1], [1, 1], [100, 1])\n\n\n- 시점4\n\nb.f()\n\n현재 인스턴스에서 f가 101번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n- 시점5\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 102번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행\n\n\n\n\n\n\nclass B:\n    x=100   # 초기자본금\n    y=0\n    def f(self):   # f를 실행할때마다 돈을 쓴다.\n        self.x=self.x - 1\n        B.y = B.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 {}원 잔액남음\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 총 {}원 사용\".format(self.y))\n\n\na=B()\n\n\nb=B()\n\n\n[B.x, B.y], [a.x, a.y], [b.x, b.y]\n\n([100, 0], [100, 0], [100, 0])\n\n\n- 시점1\n\na.f() # 돈을 쓴다\n\n현재 인스턴스에서 99원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 1원 사용\n\n\n\na.f()\n\n현재 인스턴스에서 98원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 2원 사용\n\n\n\nb.f()\n\n현재 인스턴스에서 99원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 3원 사용\n\n\n- 시점2\n\n[B.x, B.y], [a.x, a.y], [b.x, b.y]\n\n([100, 3], [98, 3], [99, 3])\n\n\n\nB.x=999\n\n\n[B.x, B.y], [a.x, a.y], [b.x, b.y]\n\n([999, 3], [98, 3], [99, 3])\n\n\n- 시점3\n\nc=B()\n\n\nc.f()\n\n현재 인스턴스에서 998원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 4원 사용\n\n\n- 시점4\n\na.f()\n\n현재 인스턴스에서 97원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 5원 사용\n\n\n\nb.f()\n\n현재 인스턴스에서 98원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 6원 사용\n\n\n\nc.f()\n\n현재 인스턴스에서 997원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 7원 사용\n\n\n\nc.f()\n\n현재 인스턴스에서 996원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 8원 사용\n\n\n\n\n\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\n[A.x, A.y]\n\n[0, 0]\n\n\n\na=A()\nb=A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x,b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n- 시점2\n\na.__dict__\n\n{'x': 2}\n\n\n\na.y  # 인스턴스 a에 소속되어 있지만 클래스 변수 \n\n3\n\n\n\na.y = 999 # A.y 였으면 다 바꼈을 테지만 a.y 였다면??\n# 내가 하드코딩으로 a.y에 999 입력 -&gt; 이것이 A.y나 b.y에도 반영될까? (x)\n\n\n[A.x, A.y], [a.x, a.y], [b.x,b.y]\n\n([0, 3], [2, 999], [1, 3])\n\n\n\na.__dict__\n\n{'x': 4, 'y': 999}\n\n\n- 시점3\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 6번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 4번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 7번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 4번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행\n\n\n- 요약 - 인스턴스에서 클래스 변수의 값을 변경하면? -&gt; 클래스변수의 값이 변경되는 것이 아니라 인스턴스 변수가 새롭게 만들어져서 할당 된다. - 이 예제에서 a.y는 이제 클래스변수에서 인스턴스 변수로 재탄생 되었다. 즉, 999오브젝트가 새롭게 만들어져서 a.x라는 이름을 얻은것이다. - 기존의 A.y나 b.y에는 아무런 변화가 없다.\n\nid(999) #999도 오브젝트임\n\n139914476320048\n\n\n\na.y = 999 는 새로운 인스턴스 변수 y를 할당하는 역할을 한다. 클래스변수의 값을 변경하는 것이 아니다. (왜냐하면 애초에 a.y는 없는 값이었고, A.y를 빌리고 있었던 것임)\n\n\na.__dict__\n\n{'x': 4, 'y': 999}\n\n\n\nb.__dict__\n\n{'x': 4}\n\n\n\n\n\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클레스레벨)\".format(A.y))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n\na=A()\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (인스턴스레벨)\n\n\n\nb=A()\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (인스턴스레벨)\n\n\n- 시점1\n\na.y = 999\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행 (인스턴스레벨)\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행 (인스턴스레벨)\n\n\n\n\n\n- 의문: 아래의 코드에서 x는 클래스 변수라고 봐야할까? 인스턴스 변수라고 봐야할까? —&gt; 클래스 변수!\nclass SoWhaTV: \n    x=0   # 이 시점에서 x는 클래스변수인가? 아니면 인스턴스 변수인가?\n    def f(self):\n        print(self.x)\n- 시점0\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클레스레벨)\".format(A.y))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n\na=A()\nb=A()\n\n\na.x, a.y, b.x, b.y\n\n(0, 0, 0, 0)\n\n\n\na.__dict__, b.__dict__\n\n({}, {})\n\n\n\n지금 시점에서 a.x, a.y, b.x, b.y는 모두 클래스 변수임\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (인스턴스레벨)\n\n\n\na.__dict__, b.__dict__\n\n({'x': 1}, {})\n\n\n\n이 순간 a.x가 클래스변수에서 인스턴스 변수로 변경되었다. (예제5와 같이..) 왜? f가 실행되면서 self.x = self.x + 1이 실행되었으므로!\n\n- 시점2\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (인스턴스레벨)\n\n\n\na.__dict__, b.__dict__\n\n({'x': 1}, {'x': 1})\n\n\n\n\n\n- 아래처럼 코드를 바꾸면 어떻게 되는가?\n\nclass A:\n    def __init__(self):\n        self.x=0 # 인스턴스 변수로 나중에 쓸꺼니까 명시함\n        A.y=0  # 클래스변수로 나중에 쓸꺼니까 명시함\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클레스레벨)\".format(A.y))\n        #print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n- 사용\n\na=A()\nb=A()\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클레스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클레스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행 (클레스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행 (클레스레벨)\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행 (클레스레벨)\n\n\n- 잘 되는 것 같다?\n- 조금만 생각해보면 엉터리라는 것을 알 수 있다. 아래를 관찰하자.\n\nc=A()   # 이 시점에서 __init__()이 실행된다\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클레스레벨)\n\n\n\n클래스 레벨의 변수가 왜 초기화가 되었지?\n\n- 오류의 이유? c=A()가 실행되는 시점에 __init__()이 실행되면서 A.y=0이 실행된다. 따라서 강제 초기화가 진행되었다.\n\nㅇ"
  },
  {
    "objectID": "posts/4. Class/python 12_0518.html#클래스-공부-3단계",
    "href": "posts/4. Class/python 12_0518.html#클래스-공부-3단계",
    "title": "파이썬 (0518) 12주차",
    "section": "",
    "text": "- 클래스 오브젝트에 소속된 변수와 인스턴스오브젝트에 소속된 변수를 설명한다.\n\n\n- 파이썬은 모든 것이 오브젝트로 이루어져 있다. &lt;- 우선은 그냥 명언처럼 외우자\n- 오브젝트는 메모리 주소에 저장되는 모든 것을 의미한다.\n\na=1\nid(a)  # 메모리주소를 보는 명령어\n\n7390560\n\n\n\na='asdf'\nid(a)\n\n139914601692912\n\n\n\na=[1,2,3]\nid(a)\n\n139914601744176\n\n\n- 클래스와 인스턴스도 오브젝트이다.\n\nclass A:\n    x=0\n    def f(self):\n        print(self.x)\n\n\nA는 오브젝트\n\n\nid(A)\n\n37700928\n\n\n\na는 오브젝트\n\n\na=A()\nid(a)\n\n139914601844368\n\n\n\nb는 오브젝트\n\n\nb=A()\nid(b)\n\n139914601854160\n\n\n- 앞으로는 A를 클래스오브젝트, a,b를 인스턴스 오브젝트라고 부르자.\n\n\n\n- 시점0\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\nid(A)\n\n38051088\n\n\n\nA.x, A.y\n\n(0, 0)\n\n\n- 시점1\n\na= A()\nb= A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점2\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 1], [1, 1], [0, 1])\n\n\n- 시점3\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 2], [1, 2], [1, 2])\n\n\n- 시점4\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 3], [1, 3], [2, 3])\n\n\n- 시점5\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 4], [2, 4], [2, 4])\n\n\n- 시점6\n\nc=A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y], [c.x, c.y]\n\n([0, 4], [2, 4], [2, 4], [0, 4])\n\n\n- 시점7\n\nc.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y], [c.x, c.y]\n\n([0, 5], [2, 5], [2, 5], [1, 5])\n\n\n- 신기한점: 각 인스턴스에서 인스턴스이름.f()를 실행한 횟수를 서로 공유하는 듯 하다. (A가 관리하는 것처럼 느껴진다.)\n- x와 y는 약간 느낌이 다르다. x는 지점소속, y는 본사소속의 느낌?\n\n이 예제에서 x는 인스턴스오브젝트에 소속된 변수, y는 클래스 오브젝트에 소속된 변수처럼 느껴짐\n\n(약속) 앞으로는 인스턴스 오브젝트에 소속된 변수를 인스턴스 변수라고 하고, 클래스 오브젝트에 소속된 변수를 클래스 변수라고 하자.\n- 인스턴스 변수와 클래스 변수를 구분하는 방법? 인스턴스이름.__dict__를 쓰면 인스턴스 변수만 출력된다.\n\n따라서 a. + tab을 눌러서 나오는 변수중 a.__dict__에 출력되지 않으면 클래스 변수이다.\n\n\na.__dict__\n\n{'x': 2}\n\n\n\nb.__dict__\n\n{'x': 2}\n\n\n\nc.__dict__\n\n{'x': 1}\n\n\n- 이 예제에서 아래는 모두 클래스 변수이다.\n\na.y, b.y, c.y\n\n(5, 5, 5)\n\n\n\n\n\n- 시점0\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\n[A.x, A.y], [a.x, a.y]\n\n([0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\n[A.x,A.y], [a.x, a.y]\n\n([0, 3], [3, 3])\n\n\n- 시점2\n\na.x = 0 # f의 실행기록을 초기화 하고 싶다.\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\n[A.x,A.y], [a.x, a.y]\n\n([0, 4], [1, 4])\n\n\n\n\n\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\nb=A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 1], [1, 1], [0, 1])\n\n\n- 시점2\n\nA.y = 100\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([0, 100], [1, 100], [0, 100])\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 101번 실행\n\n\n\n\n\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\n[A.x, A.y], [a.x, a.y]\n\n([0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x, A.y], [a.x, a.y]\n\n([0, 1], [1, 1])\n\n\n- 시점2\n\nA.x = 100   # 이렇게 되면 앞으로 만들어진 인스턴스튼 기본적으로 현재 인스턴스에서| 100번 f를 실행하였다는 정보를 가지고 태어나게 된다.\n\n\n[A.x, A.y], [a.x, a.y]\n\n([100, 1], [1, 1])\n\n\n- 시점3\n\nb=A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x, b.y]\n\n([100, 1], [1, 1], [100, 1])\n\n\n- 시점4\n\nb.f()\n\n현재 인스턴스에서 f가 101번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n- 시점5\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 102번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행\n\n\n\n\n\n\nclass B:\n    x=100   # 초기자본금\n    y=0\n    def f(self):   # f를 실행할때마다 돈을 쓴다.\n        self.x=self.x - 1\n        B.y = B.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 {}원 잔액남음\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 총 {}원 사용\".format(self.y))\n\n\na=B()\n\n\nb=B()\n\n\n[B.x, B.y], [a.x, a.y], [b.x, b.y]\n\n([100, 0], [100, 0], [100, 0])\n\n\n- 시점1\n\na.f() # 돈을 쓴다\n\n현재 인스턴스에서 99원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 1원 사용\n\n\n\na.f()\n\n현재 인스턴스에서 98원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 2원 사용\n\n\n\nb.f()\n\n현재 인스턴스에서 99원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 3원 사용\n\n\n- 시점2\n\n[B.x, B.y], [a.x, a.y], [b.x, b.y]\n\n([100, 3], [98, 3], [99, 3])\n\n\n\nB.x=999\n\n\n[B.x, B.y], [a.x, a.y], [b.x, b.y]\n\n([999, 3], [98, 3], [99, 3])\n\n\n- 시점3\n\nc=B()\n\n\nc.f()\n\n현재 인스턴스에서 998원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 4원 사용\n\n\n- 시점4\n\na.f()\n\n현재 인스턴스에서 97원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 5원 사용\n\n\n\nb.f()\n\n현재 인스턴스에서 98원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 6원 사용\n\n\n\nc.f()\n\n현재 인스턴스에서 997원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 7원 사용\n\n\n\nc.f()\n\n현재 인스턴스에서 996원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 8원 사용\n\n\n\n\n\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\n[A.x, A.y]\n\n[0, 0]\n\n\n\na=A()\nb=A()\n\n\n[A.x, A.y], [a.x, a.y], [b.x,b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n- 시점2\n\na.__dict__\n\n{'x': 2}\n\n\n\na.y  # 인스턴스 a에 소속되어 있지만 클래스 변수 \n\n3\n\n\n\na.y = 999 # A.y 였으면 다 바꼈을 테지만 a.y 였다면??\n# 내가 하드코딩으로 a.y에 999 입력 -&gt; 이것이 A.y나 b.y에도 반영될까? (x)\n\n\n[A.x, A.y], [a.x, a.y], [b.x,b.y]\n\n([0, 3], [2, 999], [1, 3])\n\n\n\na.__dict__\n\n{'x': 4, 'y': 999}\n\n\n- 시점3\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 6번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 4번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 7번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 4번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행\n\n\n- 요약 - 인스턴스에서 클래스 변수의 값을 변경하면? -&gt; 클래스변수의 값이 변경되는 것이 아니라 인스턴스 변수가 새롭게 만들어져서 할당 된다. - 이 예제에서 a.y는 이제 클래스변수에서 인스턴스 변수로 재탄생 되었다. 즉, 999오브젝트가 새롭게 만들어져서 a.x라는 이름을 얻은것이다. - 기존의 A.y나 b.y에는 아무런 변화가 없다.\n\nid(999) #999도 오브젝트임\n\n139914476320048\n\n\n\na.y = 999 는 새로운 인스턴스 변수 y를 할당하는 역할을 한다. 클래스변수의 값을 변경하는 것이 아니다. (왜냐하면 애초에 a.y는 없는 값이었고, A.y를 빌리고 있었던 것임)\n\n\na.__dict__\n\n{'x': 4, 'y': 999}\n\n\n\nb.__dict__\n\n{'x': 4}\n\n\n\n\n\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클레스레벨)\".format(A.y))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n\na=A()\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (인스턴스레벨)\n\n\n\nb=A()\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (인스턴스레벨)\n\n\n- 시점1\n\na.y = 999\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행 (인스턴스레벨)\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행 (인스턴스레벨)\n\n\n\n\n\n- 의문: 아래의 코드에서 x는 클래스 변수라고 봐야할까? 인스턴스 변수라고 봐야할까? —&gt; 클래스 변수!\nclass SoWhaTV: \n    x=0   # 이 시점에서 x는 클래스변수인가? 아니면 인스턴스 변수인가?\n    def f(self):\n        print(self.x)\n- 시점0\n\nclass A:\n    x=0\n    y=0\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클레스레벨)\".format(A.y))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n\na=A()\nb=A()\n\n\na.x, a.y, b.x, b.y\n\n(0, 0, 0, 0)\n\n\n\na.__dict__, b.__dict__\n\n({}, {})\n\n\n\n지금 시점에서 a.x, a.y, b.x, b.y는 모두 클래스 변수임\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (인스턴스레벨)\n\n\n\na.__dict__, b.__dict__\n\n({'x': 1}, {})\n\n\n\n이 순간 a.x가 클래스변수에서 인스턴스 변수로 변경되었다. (예제5와 같이..) 왜? f가 실행되면서 self.x = self.x + 1이 실행되었으므로!\n\n- 시점2\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클레스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (인스턴스레벨)\n\n\n\na.__dict__, b.__dict__\n\n({'x': 1}, {'x': 1})\n\n\n\n\n\n- 아래처럼 코드를 바꾸면 어떻게 되는가?\n\nclass A:\n    def __init__(self):\n        self.x=0 # 인스턴스 변수로 나중에 쓸꺼니까 명시함\n        A.y=0  # 클래스변수로 나중에 쓸꺼니까 명시함\n    def f(self):\n        self.x=self.x + 1\n        A.y = A.y + 1\n        # self.y = self.y + 1 이렇게 안쓰고 위에처럼 써보자!\n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클레스레벨)\".format(A.y))\n        #print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n- 사용\n\na=A()\nb=A()\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클레스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클레스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행 (클레스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행 (클레스레벨)\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행 (클레스레벨)\n\n\n- 잘 되는 것 같다?\n- 조금만 생각해보면 엉터리라는 것을 알 수 있다. 아래를 관찰하자.\n\nc=A()   # 이 시점에서 __init__()이 실행된다\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클레스레벨)\n\n\n\n클래스 레벨의 변수가 왜 초기화가 되었지?\n\n- 오류의 이유? c=A()가 실행되는 시점에 __init__()이 실행되면서 A.y=0이 실행된다. 따라서 강제 초기화가 진행되었다.\n\nㅇ"
  },
  {
    "objectID": "posts/4. Class/python 12_0523.html",
    "href": "posts/4. Class/python 12_0523.html",
    "title": "파이썬 (0523) 12주차",
    "section": "",
    "text": "import numpy as np"
  },
  {
    "objectID": "posts/4. Class/python 12_0523.html#클래스공부-4단계",
    "href": "posts/4. Class/python 12_0523.html#클래스공부-4단계",
    "title": "파이썬 (0523) 12주차",
    "section": "클래스공부 4단계",
    "text": "클래스공부 4단계\n\nMotivating Example\n- 가위바위보\n\n방법1\n\n\nclass RPC2:\n    def throw2(self):\n        print(np.random.choice(['가위', '바위','보']))\n\n\na=RPC2()\n\n\na.throw2()\n\n바위\n\n\n\n방법2\n\n\nclass RPC:\n    def thorw(self, candidate):\n        print(np.random.choice(candidate))\n\n\na=RPC()\n\n\na.thorw(['가위','바위','보'])\n\n바위\n\n\n\n방법3\n\n\nclass RPC3:\n    def __init__(self, candidate=['가위','바위','보']):\n        self.candidate = candidate\n    def throw3(self):\n        print(np.random.choice(self.candidate))\n\n\na=RPC3()   # __init__ 는 암묵적으로 실행\n\n\na.throw3()\n\n바위\n\n\n\n방법4\n\n\nclass RPC4:\n    pass\n\n\nb=RPC4()\n\n\ndef initt(b, candidate=['가위','바위','보']):\n    b.candidate = candidate\n\n\ninitt(b)\n\n\nb.candidate\n\n['가위', '바위', '보']\n\n\n\ndef throww(b):\n        print(np.random.choice(b.candidate))\n\n\nthroww(b)\n\n가위\n\n\n\n방법5\n\n\n# 위의 코드를 하나로 합치면..\n\n\nclass RPC4:\n    def __init__(self, candidate=['가위','바위','보']):\n        self.candidate = candidate\n    def throww(self):\n        print(np.random.choice(self.candidate))\n\n\na=RPC4()\n\n\na.throww()\n\n가위\n\n\n- 생각해보니까 throw는 choose + show 의 결합인 것 같다.\n\nclass RPC:\n    def __init__(self, candidate=['가위','바위','보']):\n        self.candidate = candidate\n    def choose(self):\n        self.actions = np.random.choice(self.candidate)\n    def show(self):\n        print(self.actions)\n\n\na=RPC()\n\n\na.actions()   # 지금은 정의되지 않음\n\nAttributeError: 'RPC' object has no attribute 'actions'\n\n\n\na.choose()\n\n\na.actions  # 가위, 바위, 보 중 고른 결과가 나옴\n\n'가위'\n\n\n\na.show()\n\n가위\n\n\n보충학습 : 위와 같은 코드\n\nclass _RPS: ## 시점1\n    pass # &lt;- 이렇게하면 아무기능이 없는 비어있는 클래스가 정의된다\n\n\n_a = _RPS() ## 시점2\ndef _init(_a,candidate=['가위','바위','보']):\n    _a.candidate = candidate \n_init(_a)\n\n\n_a.actions ## 시점3\n\nAttributeError: '_RPS' object has no attribute 'actions'\n\n\n\ndef _choose(_a): ## 시점4\n    _a.actions = np.random.choice(_a.candidate)\n_choose(_a)\n\n\n_a.actions ## 시점5\n\n'보'\n\n\n\ndef _show(_a): ## 시점6\n    print(_a.actions)\n_show(_a)\n\n보\n\n\n- 또 다른 인스턴스 b를 만들자. b는 가위만 낼 수 있다.\n\nRPC?\n\n\nInit signature: RPC(candidate=['가위', '바위', '보'])\nDocstring:      &lt;no docstring&gt;\nType:           type\nSubclasses:     \n\n\n\n\n\nb=RPC(['가위'])\n\n\nb.candidate\n\n['가위']\n\n\n\nb.choose()\nb.show()\n\n가위\n\n\n- a,b의 선택들을 모아서 기록을 하고 싶다.\n\nclass RPS:\n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])   # 지금 현재 내가 선택한 마지막만 보여줘!\n\n\na=RPS()\nb=RPS(['가위'])\n\n\nfor i in range(5):\n    a.choose()\n    a.show()\n\n바위\n가위\n바위\n바위\n보\n\n\n\na.actions   # 지금까지 뽑힌 히스토리들\n\n['바위', '가위', '바위', '바위', '보']\n\n\n\nfor i in range(5):\n    b.choose()\n    b.show()\n\n가위\n가위\n가위\n가위\n가위\n\n\n\nb.actions\n\n['가위', '가위', '가위', '가위', '가위']\n\n\n\na.candidate, a.actions\n\n(['가위', '바위', '보'], ['바위', '가위', '바위', '바위', '보'])\n\n\n\nb.candidate, b.actions\n\n(['가위'], ['가위', '가위', '가위', '가위', '가위'])\n\n\n- info라는 함수를 만들어서 a의 오브젝트가 가지고 있는 정보를 모두 보도록 하자.\n(예비학습) 문자열 \\n이 포함된다면?\n\n'asdf\\n1234'\n\n'asdf\\n1234'\n\n\n\nprint('asdf\\n1234')\n\nasdf\n1234\n\n\n예비학습 끝\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def info(self):\n        print(\"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions))\n\n\na=RPS()\nb=RPS(['가위'])\n\n\nfor i in range(5):\n    a.choose()\n    a.show()    \n\n가위\n바위\n가위\n보\n보\n\n\n\nfor i in range(5):\n    b.choose()\n    b.show()\n\n가위\n가위\n가위\n가위\n가위\n\n\n\na.info()\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['가위', '바위', '가위', '보', '보']\n\n\n\nb.info()\n\n낼 수 있는 패: ['가위']\n기록: ['가위', '가위', '가위', '가위', '가위']\n\n\n- 만들고 보니까 info와 print의 기능이 거의 비슷함 \\(\\to\\) print(a)를 하면 a.info()와 동일한 효과를 내도록 만들 수 있을까?\n- 안될 거 같다. 왜?\n\n안될 것 같은 이유 1: print 는 파이썬 내장기능, 내장기능을 우리가 맘대로 커스터마이징해서 쓰기는 어려울 것 같다.\n안될 것 같은 이유 2: 이유1이 해결된다고 해도 문제다. 다 꼬아져버려… 그럼 지금까지 사용했던 print()의 결과는 어떻게 되는가?\n\n(예)\n\ntype(a)\n\n__main__.RPS\n\n\n\na?\n\n\nType:        RPS\nString form: &lt;__main__.RPS object at 0x7f6565f29e10&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\n- 그런데 a의 자료형(RPS자료형)에 해당하는 오브젝트들에 한정하여 print를 수정하는 방법이 가능하다면? (그럼 다른 오브젝트들은 수정된 print에 영향을 받지 않음)\n\n\n__str___\n- 관찰1: 현재 print(a)의 결과는 아래와 같다.\n\nprint(a)\n\n&lt;__main__.RPS object at 0x7f6565f29e10&gt;\n\n\n\nprint([1,2,3])\n\n[1, 2, 3]\n\n\n\na는 RPS클래스에서 만든 오브젝트이며 a가 저장된 메모리 주소는 0x7f6565f29e10라는 의미\n\n- 관찰2: a에는 __str__ 이 있다.\n\ndir(a)   # a + _ + tab을 누르면 숨겨진 메소드들이 나온다.\n\n['__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'actions',\n 'candidate',\n 'choose',\n 'info',\n 'show']\n\n\n\nset(dir(a)) & {'__str__'}\n\n{'__str__'}\n\n\n\na.__str__\n\n&lt;method-wrapper '__str__' of RPS object at 0x7f6565f29e10&gt;\n\n\n이것을 함수처럼 사용하니까 아래와 같이 된다.\n\na.__str__()\n\n'&lt;__main__.RPS object at 0x7f6565f29e10&gt;'\n\n\n?? print(a)를 해서 나오는 문자열이 리턴된다..\n\nprint(a.__str__()) # 이거 print(a)를 실행한 결과와 같다?\n\n&lt;__main__.RPS object at 0x7f6565f29e10&gt;\n\n\n- 생각: 만약 내가 a.__str__() 라는 함수를 재정의하여 리턴값을 boram hahaha로 바꾸게 되면 print(a)해서 나오는 결과는 어떻게 될까? (해커???)\n(예비학습)\n\ndef f():\n    print('adsf')\n\n\nf()\n\nadsf\n\n\n\ndef f():\n    print('boram hahaha')\n\n\nf()\n\nboram hahaha\n\n\n이런식으로 함수가 이미 정의되어 있더라도, 내가 나중에 덮어씌우면 그 함수의 기능을 다시 정의한다.\n(해킹시작)\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __str__(self):\n        return 'boram hahaha'\n    def info(self):\n        print(\"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions))\n\n\na=RPS()\n\n\nprint(a)\n\nboram hahaha\n\n\n\nprint(a.__str__())\n\nboram hahaha\n\n\n\n# 다른건 다 변함이 없음\n\n\na.choose()\na.show()\n\n가위\n\n\n\na.actions\n\n['가위']\n\n\n\na.info()\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['가위']\n\n\n- __str__의 리턴값을 info에서 타이핑했던 문자열로 재정의 한다면?\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __str__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\n\n\nprint(a)\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\na.choose()\na.show()\n\n바위\n\n\n\nprint(a)\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['보', '바위']\n\n\n\n\n파이썬의 비밀2\n- print(a)와 print(a.__str__()) 는 같은 문법이다.\n- 참고로 a.__Str__() 와 str(a) 도 같은 문법\n\na.__str__()\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: ['보', '바위']\"\n\n\n\nstr(a)\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: ['보', '바위']\"\n\n\n- 지금까지 썼던 기능들 확인!\n(예제1)\n\na=[1,2,3]\nprint(a)\n\n[1, 2, 3]\n\n\n\na.__str__()\n\n'[1, 2, 3]'\n\n\n\nstr(a)\n\n'[1, 2, 3]'\n\n\n(예제2)\n\na={1,2,3}\nprint(a)\n\n{1, 2, 3}\n\n\n\na.__str__()\n\n'{1, 2, 3}'\n\n\n\nstr(a)\n\n'{1, 2, 3}'\n\n\n(예제3)\n\na=np.array(1)\na.shape\n\n()\n\n\n\ntype(a.shape)\n\ntuple\n\n\n\nprint(a.shape)\n\n()\n\n\n\na.shape.__str__()\n\n'()'\n\n\n\nstr(a.shape)\n\n'()'\n\n\n(예제4)\n\na = range(10)\nprint(a)\n\nrange(0, 10)\n\n\n\na.__str__()\n\n'range(0, 10)'\n\n\n(예제5)\n\na = np.arange(100).reshape(10,10)\nprint(a)\n\n[[ 0  1  2  3  4  5  6  7  8  9]\n [10 11 12 13 14 15 16 17 18 19]\n [20 21 22 23 24 25 26 27 28 29]\n [30 31 32 33 34 35 36 37 38 39]\n [40 41 42 43 44 45 46 47 48 49]\n [50 51 52 53 54 55 56 57 58 59]\n [60 61 62 63 64 65 66 67 68 69]\n [70 71 72 73 74 75 76 77 78 79]\n [80 81 82 83 84 85 86 87 88 89]\n [90 91 92 93 94 95 96 97 98 99]]\n\n\n\na.__str__()\n\n'[[ 0  1  2  3  4  5  6  7  8  9]\\n [10 11 12 13 14 15 16 17 18 19]\\n [20 21 22 23 24 25 26 27 28 29]\\n [30 31 32 33 34 35 36 37 38 39]\\n [40 41 42 43 44 45 46 47 48 49]\\n [50 51 52 53 54 55 56 57 58 59]\\n [60 61 62 63 64 65 66 67 68 69]\\n [70 71 72 73 74 75 76 77 78 79]\\n [80 81 82 83 84 85 86 87 88 89]\\n [90 91 92 93 94 95 96 97 98 99]]'\n\n\n\nstr(a)\n\n'[[ 0  1  2  3  4  5  6  7  8  9]\\n [10 11 12 13 14 15 16 17 18 19]\\n [20 21 22 23 24 25 26 27 28 29]\\n [30 31 32 33 34 35 36 37 38 39]\\n [40 41 42 43 44 45 46 47 48 49]\\n [50 51 52 53 54 55 56 57 58 59]\\n [60 61 62 63 64 65 66 67 68 69]\\n [70 71 72 73 74 75 76 77 78 79]\\n [80 81 82 83 84 85 86 87 88 89]\\n [90 91 92 93 94 95 96 97 98 99]]'\n\n\n\n\n__repr__\n- 생각해보니까 print를 해서 원하는 정보를 확인하는 건 아니었음\n\na=[1,2,3]\n\n\na\n\n[1, 2, 3]\n\n\n\nprint(a)   # print(a.__str__()) + enter =&gt; a + enter 와 같은 효과?\n\n[1, 2, 3]\n\n\n- a + 엔터를 하면 print(a) + 엔터를 하는 것과 같은 효과인가?\n(반례)\n\na=np.array([1,2,3,4]).reshape(2,2)\n\n\na\n\narray([[1, 2],\n       [3, 4]])\n\n\n\nprint(a)\n\n[[1 2]\n [3 4]]\n\n\n- a + 엔터를 하면 print(a) + 엔터가 다른 경우도 있다. \\(\\to\\) 서로 다른 숨겨진 기능이 잇다! \\(\\to\\) 결론 : 그 기능은 __repr__에 저장되어 있다.\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __repr__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\n\n\na  # print(a.__repr__())\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n- 그럼 지금까지 한것은?\n\na = np.array([1,2,3])\n\n\na\n\narray([1, 2, 3])\n\n\n\nprint(a)\n\n[1 2 3]\n\n\n\na.__repr__()\n\n'array([1, 2, 3])'\n\n\n\na.__str__()\n\n'[1 2 3]'\n\n\n\n\n파이썬의 비밀3\n- 대화형 콘솔에서 오브젝트 이름 + 엔터 를 쳐서 나오는 출력은 __repr__ 의 결과와 연관 있다.\n\na = np.array(range(10000)).reshape(100,100)\n\n\na\n\narray([[   0,    1,    2, ...,   97,   98,   99],\n       [ 100,  101,  102, ...,  197,  198,  199],\n       [ 200,  201,  202, ...,  297,  298,  299],\n       ...,\n       [9700, 9701, 9702, ..., 9797, 9798, 9799],\n       [9800, 9801, 9802, ..., 9897, 9898, 9899],\n       [9900, 9901, 9902, ..., 9997, 9998, 9999]])\n\n\n\na.__repr__()\n\n'array([[   0,    1,    2, ...,   97,   98,   99],\\n       [ 100,  101,  102, ...,  197,  198,  199],\\n       [ 200,  201,  202, ...,  297,  298,  299],\\n       ...,\\n       [9700, 9701, 9702, ..., 9797, 9798, 9799],\\n       [9800, 9801, 9802, ..., 9897, 9898, 9899],\\n       [9900, 9901, 9902, ..., 9997, 9998, 9999]])'\n\n\n- 참고로 a.__repr__() 은 representation의 약자인데, repr(a)와 같다.\n\n\n주피터 노브북의 비밀 (__repr__html__)\n- 요즘에는 IDE의 발전에 따라서 오브젝트이름+엔터 칠때 나오는 출력의 형태도 다양해지고 있다.\n\nimport pandas as pd\n\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\n\n\ndf\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\n예쁘게 나온다.\n\n- 그런데? print(df.__repr__())의 결과가 조금 다르게 나온당\n\nprint(df.__repr__())\n\n   a  b\n0  1  2\n1  2  3\n2  3  4\n\n\n- print(df.__repr__()) 는 예전 검은화면에서 코딩할 때가 나오는 출력임\nPython 3.10.2 | packaged by conda-forge | (main, Feb  1 2022, 19:28:35) [GCC 9.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt; &gt;&gt; import pandas as pd \n&gt;&gt;&gt; df = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})&gt;&gt;&gt; df\n   a  b\n0  1  2\n1  2  3\n2  3  4\n&gt;&gt;&gt;\n- 주피터에서는? “오브젝트이름+엔터”치면 HTML(df._repr_html_())이 실행되고, _repr_html_()이 정의되어 있지 않으면 print(df.__repr__())이 실행된다.\n\ndf._repr_html_()\n\n'&lt;div&gt;\\n&lt;style scoped&gt;\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n&lt;/style&gt;\\n&lt;table border=\"1\" class=\"dataframe\"&gt;\\n  &lt;thead&gt;\\n    &lt;tr style=\"text-align: right;\"&gt;\\n      &lt;th&gt;&lt;/th&gt;\\n      &lt;th&gt;a&lt;/th&gt;\\n      &lt;th&gt;b&lt;/th&gt;\\n    &lt;/tr&gt;\\n  &lt;/thead&gt;\\n  &lt;tbody&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;0&lt;/th&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;1&lt;/th&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;2&lt;/th&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n    &lt;/tr&gt;\\n  &lt;/tbody&gt;\\n&lt;/table&gt;\\n&lt;/div&gt;'\n\n\n\nhtml코드\n\n\nfrom IPython.core.display import HTML\n\n\nHTML('&lt;div&gt;\\n&lt;style scoped&gt;\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n&lt;/style&gt;\\n&lt;table border=\"1\" class=\"dataframe\"&gt;\\n  &lt;thead&gt;\\n    &lt;tr style=\"text-align: right;\"&gt;\\n      &lt;th&gt;&lt;/th&gt;\\n      &lt;th&gt;a&lt;/th&gt;\\n      &lt;th&gt;b&lt;/th&gt;\\n    &lt;/tr&gt;\\n  &lt;/thead&gt;\\n  &lt;tbody&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;0&lt;/th&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;1&lt;/th&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;2&lt;/th&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n    &lt;/tr&gt;\\n  &lt;/tbody&gt;\\n&lt;/table&gt;\\n&lt;/div&gt;')\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\nHTML(df._repr_html_())\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n- 물론 df._repr_html_() 함수가 내부적으로 있어도 html이 지원되지 않는 환경이라면 print(__repr__())이 내부적으로 수행된다.\n\n\n__repr__와 __str__의 우선적용 순위\n(예제1)\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __repr__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\na\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\na.__repr__()\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n\nrepr(a)\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n- 여기까지는 상식수준의 결과. 아래 관찰하자\n\nprint(a) # print(a.__str__())\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\na.__str__()\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n\nstr(a)\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n- __str__()은 건드린적이 없다…?\n\na.__repr__??\n\n\nSignature: a.__repr__()\nDocstring: Return repr(self).\nSource:   \n    def __repr__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\nFile:      ~/Dropbox/coco/posts/python/&lt;ipython-input-201-29baf6ff56bf&gt;\nType:      method\n\n\n\n\n얘는 건드림\n\na.__str__??\n\n\nSignature:      a.__str__()\nCall signature: a.__str__(*args, **kwargs)\nType:           method-wrapper\nString form:    &lt;method-wrapper '__str__' of RPS object at 0x7f6561614c10&gt;\nDocstring:      Return str(self).\n\n\n\n\n얘는 안건드렸는디..\n(예제2)\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __str__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\n\n\nprint(a)\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\na\n\n&lt;__main__.RPS at 0x7f6561429950&gt;\n\n\n\na.__str__()\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n\na.__repr__()\n\n'&lt;__main__.RPS object at 0x7f6561429950&gt;'\n\n\n\na.__str__??\n\n\nSignature: a.__str__()\nDocstring: Return str(self).\nSource:   \n    def __str__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\nFile:      ~/Dropbox/coco/posts/python/&lt;ipython-input-214-cd2a21868510&gt;\nType:      method\n\n\n\n\n\na.__repr_??\n\nObject `a.__repr_` not found.\n\n\n(예제3)\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __repr__(self):\n        return \"haha\"\n    def __str__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\n\n\na\n\nhaha\n\n\n\nprint(a)\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n- __str__ 와 __repr__ 을 건드리지 않고 출력결과를 바꾸고 싶다면?\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} &lt;br/&gt; \n        기록: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions)\n\n\na=RPS()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        기록: []\n        \n\n\n\nprint(a)\n\n&lt;__main__.RPS object at 0x7f6561534410&gt;\n\n\n\nstr(a)\n\n'&lt;__main__.RPS object at 0x7f6561534410&gt;'\n\n\n\nrepr(a)\n\n'&lt;__main__.RPS object at 0x7f6561534410&gt;'\n\n\n\nfor i in range(5):\n    a.choose()\n    a.show()\n\n바위\n바위\n바위\n가위\n보\n\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        기록: ['바위', '바위', '바위', '가위', '보']"
  },
  {
    "objectID": "posts/4. Class/python 13_0530.html",
    "href": "posts/4. Class/python 13_0530.html",
    "title": "파이썬 (0530) 13주차",
    "section": "",
    "text": "- 상속\n\n\n- 아래와 같은 클래스를 만들자. - 이름, 직급, 연봉에 대한 정보가 있다. - 연봉을 올려주는 메소드가 존재\n\nclass Employee:\n    def __init__(self, name, position=None, pay=0):\n        self.name = name\n        self.position = position\n        self.pay = pay\n    def _repr_html_(self):\n        html_str = \"\"\"\n        이름: {} &lt;br/&gt;\n        직급: {} &lt;br/&gt;\n        연봉: {} &lt;br/&gt;\n        \"\"\".format(self.name, self.position, self.pay)\n        return html_str\n    def giveraise(self,pct):\n        self.pay = self.pay * (1+pct)\n        \n\n- 확인\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Employee('hodonh', position='mgr', pay=8000)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5000 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4000 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 8000 \n        \n\n\n\niu.giveraise(0.1)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn.giveraise(0.2)\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4800.0 \n        \n\n\n- 회사의 모든 직원의 연봉을 10%씩 올려보자.\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Employee('hodonh', position='mgr', pay=8000)\n\n\nfor i in [iu, hynn, hd]:\n    print(i.name)\n\niu\nhynn\nhodonh\n\n\n\nfor i in [iu, hynn, hd]:\n    i.giveraise(0.1) # 일괄적으로 상승\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 8800.0 \n        \n\n\n- 매니저 직급은 일반직원들의 상승분에서 5%의 보너스가 추가되어 상승한다고 가정\n- 모든회사 직원들의 연봉을 10% 상승\n(구현1) if문을 통한\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Employee('hodonh', position='mgr', pay=8000)\n\n\nfor i in [iu,hynn,hd]:\n    if i.position == 'mgr':\n        i.giveraise(0.1 + 0.05)\n    else:\n        i.giveraise(0.1)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 9200.0 \n        \n\n\n(구현2) 새로운 클래스를 만들자\n\nclass Manager:\n    def __init__(self, name, position=None, pay=0):\n        self.name = name\n        self.position = position\n        self.pay = pay\n    def _repr_html_(self):\n        html_str = \"\"\"\n        이름: {} &lt;br/&gt;\n        직급: {} &lt;br/&gt;\n        연봉: {} &lt;br/&gt;\n        \"\"\".format(self.name, self.position, self.pay)\n        return html_str\n    def giveraise(self,pct):\n        self.pay = self.pay * (1+pct+0.05)\n        \n\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Manager('hodonh', position='mgr', pay=8000)\n\n\nfor i in [iu,hynn,hd]:\n    i.giveraise(0.1)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 9200.000000000002 \n        \n\n\n- 구현3: 이미 만들어진 클래스에서\n\nclass Manager(Employee):\n    # 나머지 기타 함수내용은 Emplyee 클래스와 같음걸 표현하려면 위 가로에 Employee를 작성한다.\n    def giveraise(self,pct):\n        self.pay = self.pay * (1+pct+0.05)\n        \n\n\nhd=Manager('hodong',pay=8000)\nhd  # 명시하지 않았는데 상속됨\n\n\n        이름: hodong \n        직급: None \n        연봉: 8000 \n        \n\n\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Manager('hodonh', position='mgr', pay=8000)\n\n\nfor i in [iu,hynn,hd]:\n    i.giveraise(0.1)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 9200.000000000002 \n        \n\n\n- 요약: 이미 만들어진 클래스에서 대부분의 기능은 그대로 쓰지만 일부기능만 변경 혹은 추가하고 싶다면 클래스를 상속하면 된다!\n\n\n\n\n내가 만든 클래스를 계속 상속하는 경우\n\n- list 와 비슷한데 멤버들의 빈도가 계산되는 메소드를 포함하는 새로운 나만의 list를 만들자\n\nlst = ['a','b','a','c','b','a','d']\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n- 아래와 같은 딕셔너리를 만들고 싶다.\n\nfreq = {'a':3, 'b':2, 'c':1, 'd':1}  # 갯수\nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n\nlst.frequency()를 입력하면 위의 기능이 수행되도록 변형된 list를 쓰고 싶다.\n\n- 구현\n(시도1) 절반 성공\n\nfreq = {'a':0, 'b':0, 'c':0, 'd':0}   # 일단 다 0이라 생각하고 코드 짜기 \nfreq\n\n{'a': 0, 'b': 0, 'c': 0, 'd': 0}\n\n\n\nfor item in lst:\n    print(item)\n\na\nb\na\nc\nb\na\nd\n\n\n\nfor item in lst:\n    print(freq[item])\n\n0\n0\n0\n0\n0\n0\n0\n\n\n\nfor item in lst:\n    freq[item] = freq[item] + 1\n\n\nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n반쯤 성공.. 리스트가 a,b,c,d 라는걸 알고 있어야 함\n(시도2) 실패\n\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n\nfreq = dict()\nfreq\n\n{}\n\n\n\nfor item in lst:\n    freq[item] = freq[item] + 1\n\nKeyError: 'a'\n\n\n\nfreq['a']  # 매칭되는게 없다!\n\nKeyError: 'a'\n\n\n에러이유? freq['a'] 를 호출할 수 없다 -&gt; freq.get('a',0)을 이용\n\nfreq.get('a')   # 4주차 3월 23일 복습  get메소드를 사용하면 없어도 에러를 표시하지 않음\n\n\nfreq.get?\n\n\nSignature: freq.get(key, default=None, /)\nDocstring: Return the value for key if key is in the dictionary, else default.\nType:      builtin_function_or_method\n\n\n\n\n\nkey에 대응하는 값이 있으면 그 값을 리턴하고 없으면 default를 리턴\n\n\nfreq.get('a',0)  # a값 없으면 0으로 리턴\n\n0\n\n\n(시도3)\n\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n\nfreq = dict()\nfreq\n\n{}\n\n\n\nfor item in lst:\n    freq[item] = freq.get(item,0) + 1\n\n\nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n- 이것을 내가 정의하는 새로운 list의 메소드로 넣고 싶다.\n\nclass L(list):   # L 이라는 클래스에 list에 있는 모든걸 상속받겠다.\n    pass\n\n\na=[1,2,3]\na\n\n[1, 2, 3]\n\n\n\na?\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n\nclass L(list):\n    def frequency(self):\n        freq = dict()\n        for item in self:\n            freq[item] = freq.get(item,0) + 1\n        return freq\n\n\nlst = L([1,1,1,2,2,3])\n\n\nlst?  \n\nSyntaxError: invalid syntax (&lt;ipython-input-96-8d8983ef4faf&gt;, line 1)\n\n\n\n # 리스트 같아 보이지만 타입이 L! 내가 설정한 클래스\n\n\nlst  #원래 list에 있는 repr 기능을 상속받아서 이루어지는 결과\n\n[1, 1, 1, 2, 2, 3]\n\n\n\n_lst = L([4,5,6])\n_lst + _lst   # L자로형끼리 덧셈\n\n[4, 5, 6, 4, 5, 6]\n\n\n\nlst + [4,5,6]   # l자료형과  list 자료형의 덧셈도 가능\n\n[1, 1, 1, 2, 2, 3, 10, 10, 4, 5, 6]\n\n\n\nL자료형의 덧셈은 list의 덧셈과 완전히 같음\n\n\nlst.append(10)\nlst   # 요론 기본적인 리스트 기능도 가능\n\n[1, 1, 1, 2, 2, 3, 10, 10]\n\n\n\nlst.frequency()  # 리스트에서 이것 기능만 추가된거랑 똑같고 나머지는 다 리스트랑 똑같다\n\n{1: 3, 2: 2, 3: 1}"
  },
  {
    "objectID": "posts/4. Class/python 13_0530.html#클래스-공부-6단계",
    "href": "posts/4. Class/python 13_0530.html#클래스-공부-6단계",
    "title": "파이썬 (0530) 13주차",
    "section": "",
    "text": "- 상속\n\n\n- 아래와 같은 클래스를 만들자. - 이름, 직급, 연봉에 대한 정보가 있다. - 연봉을 올려주는 메소드가 존재\n\nclass Employee:\n    def __init__(self, name, position=None, pay=0):\n        self.name = name\n        self.position = position\n        self.pay = pay\n    def _repr_html_(self):\n        html_str = \"\"\"\n        이름: {} &lt;br/&gt;\n        직급: {} &lt;br/&gt;\n        연봉: {} &lt;br/&gt;\n        \"\"\".format(self.name, self.position, self.pay)\n        return html_str\n    def giveraise(self,pct):\n        self.pay = self.pay * (1+pct)\n        \n\n- 확인\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Employee('hodonh', position='mgr', pay=8000)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5000 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4000 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 8000 \n        \n\n\n\niu.giveraise(0.1)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn.giveraise(0.2)\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4800.0 \n        \n\n\n- 회사의 모든 직원의 연봉을 10%씩 올려보자.\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Employee('hodonh', position='mgr', pay=8000)\n\n\nfor i in [iu, hynn, hd]:\n    print(i.name)\n\niu\nhynn\nhodonh\n\n\n\nfor i in [iu, hynn, hd]:\n    i.giveraise(0.1) # 일괄적으로 상승\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 8800.0 \n        \n\n\n- 매니저 직급은 일반직원들의 상승분에서 5%의 보너스가 추가되어 상승한다고 가정\n- 모든회사 직원들의 연봉을 10% 상승\n(구현1) if문을 통한\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Employee('hodonh', position='mgr', pay=8000)\n\n\nfor i in [iu,hynn,hd]:\n    if i.position == 'mgr':\n        i.giveraise(0.1 + 0.05)\n    else:\n        i.giveraise(0.1)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 9200.0 \n        \n\n\n(구현2) 새로운 클래스를 만들자\n\nclass Manager:\n    def __init__(self, name, position=None, pay=0):\n        self.name = name\n        self.position = position\n        self.pay = pay\n    def _repr_html_(self):\n        html_str = \"\"\"\n        이름: {} &lt;br/&gt;\n        직급: {} &lt;br/&gt;\n        연봉: {} &lt;br/&gt;\n        \"\"\".format(self.name, self.position, self.pay)\n        return html_str\n    def giveraise(self,pct):\n        self.pay = self.pay * (1+pct+0.05)\n        \n\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Manager('hodonh', position='mgr', pay=8000)\n\n\nfor i in [iu,hynn,hd]:\n    i.giveraise(0.1)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 9200.000000000002 \n        \n\n\n- 구현3: 이미 만들어진 클래스에서\n\nclass Manager(Employee):\n    # 나머지 기타 함수내용은 Emplyee 클래스와 같음걸 표현하려면 위 가로에 Employee를 작성한다.\n    def giveraise(self,pct):\n        self.pay = self.pay * (1+pct+0.05)\n        \n\n\nhd=Manager('hodong',pay=8000)\nhd  # 명시하지 않았는데 상속됨\n\n\n        이름: hodong \n        직급: None \n        연봉: 8000 \n        \n\n\n\niu = Employee('iu', position='staff', pay=5000)\nhynn = Employee('hynn', position='staff', pay=4000)\nhd = Manager('hodonh', position='mgr', pay=8000)\n\n\nfor i in [iu,hynn,hd]:\n    i.giveraise(0.1)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodonh \n        직급: mgr \n        연봉: 9200.000000000002 \n        \n\n\n- 요약: 이미 만들어진 클래스에서 대부분의 기능은 그대로 쓰지만 일부기능만 변경 혹은 추가하고 싶다면 클래스를 상속하면 된다!\n\n\n\n\n내가 만든 클래스를 계속 상속하는 경우\n\n- list 와 비슷한데 멤버들의 빈도가 계산되는 메소드를 포함하는 새로운 나만의 list를 만들자\n\nlst = ['a','b','a','c','b','a','d']\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n- 아래와 같은 딕셔너리를 만들고 싶다.\n\nfreq = {'a':3, 'b':2, 'c':1, 'd':1}  # 갯수\nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n\nlst.frequency()를 입력하면 위의 기능이 수행되도록 변형된 list를 쓰고 싶다.\n\n- 구현\n(시도1) 절반 성공\n\nfreq = {'a':0, 'b':0, 'c':0, 'd':0}   # 일단 다 0이라 생각하고 코드 짜기 \nfreq\n\n{'a': 0, 'b': 0, 'c': 0, 'd': 0}\n\n\n\nfor item in lst:\n    print(item)\n\na\nb\na\nc\nb\na\nd\n\n\n\nfor item in lst:\n    print(freq[item])\n\n0\n0\n0\n0\n0\n0\n0\n\n\n\nfor item in lst:\n    freq[item] = freq[item] + 1\n\n\nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n반쯤 성공.. 리스트가 a,b,c,d 라는걸 알고 있어야 함\n(시도2) 실패\n\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n\nfreq = dict()\nfreq\n\n{}\n\n\n\nfor item in lst:\n    freq[item] = freq[item] + 1\n\nKeyError: 'a'\n\n\n\nfreq['a']  # 매칭되는게 없다!\n\nKeyError: 'a'\n\n\n에러이유? freq['a'] 를 호출할 수 없다 -&gt; freq.get('a',0)을 이용\n\nfreq.get('a')   # 4주차 3월 23일 복습  get메소드를 사용하면 없어도 에러를 표시하지 않음\n\n\nfreq.get?\n\n\nSignature: freq.get(key, default=None, /)\nDocstring: Return the value for key if key is in the dictionary, else default.\nType:      builtin_function_or_method\n\n\n\n\n\nkey에 대응하는 값이 있으면 그 값을 리턴하고 없으면 default를 리턴\n\n\nfreq.get('a',0)  # a값 없으면 0으로 리턴\n\n0\n\n\n(시도3)\n\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n\nfreq = dict()\nfreq\n\n{}\n\n\n\nfor item in lst:\n    freq[item] = freq.get(item,0) + 1\n\n\nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n- 이것을 내가 정의하는 새로운 list의 메소드로 넣고 싶다.\n\nclass L(list):   # L 이라는 클래스에 list에 있는 모든걸 상속받겠다.\n    pass\n\n\na=[1,2,3]\na\n\n[1, 2, 3]\n\n\n\na?\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n\nclass L(list):\n    def frequency(self):\n        freq = dict()\n        for item in self:\n            freq[item] = freq.get(item,0) + 1\n        return freq\n\n\nlst = L([1,1,1,2,2,3])\n\n\nlst?  \n\nSyntaxError: invalid syntax (&lt;ipython-input-96-8d8983ef4faf&gt;, line 1)\n\n\n\n # 리스트 같아 보이지만 타입이 L! 내가 설정한 클래스\n\n\nlst  #원래 list에 있는 repr 기능을 상속받아서 이루어지는 결과\n\n[1, 1, 1, 2, 2, 3]\n\n\n\n_lst = L([4,5,6])\n_lst + _lst   # L자로형끼리 덧셈\n\n[4, 5, 6, 4, 5, 6]\n\n\n\nlst + [4,5,6]   # l자료형과  list 자료형의 덧셈도 가능\n\n[1, 1, 1, 2, 2, 3, 10, 10, 4, 5, 6]\n\n\n\nL자료형의 덧셈은 list의 덧셈과 완전히 같음\n\n\nlst.append(10)\nlst   # 요론 기본적인 리스트 기능도 가능\n\n[1, 1, 1, 2, 2, 3, 10, 10]\n\n\n\nlst.frequency()  # 리스트에서 이것 기능만 추가된거랑 똑같고 나머지는 다 리스트랑 똑같다\n\n{1: 3, 2: 2, 3: 1}"
  },
  {
    "objectID": "posts/4. Class/python 13_0530.html#appendix-사용자-정의-자료형의-유용함",
    "href": "posts/4. Class/python 13_0530.html#appendix-사용자-정의-자료형의-유용함",
    "title": "파이썬 (0530) 13주차",
    "section": "Appendix: 사용자 정의 자료형의 유용함",
    "text": "Appendix: 사용자 정의 자료형의 유용함\n- 사용자정의 자료형이 어떤 경우에는 유용할 수 있다.\n\n!pip install matplotlib\n\nCollecting matplotlib\n  Downloading matplotlib-3.5.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (11.2 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 11.2/11.2 MB 97.5 MB/s eta 0:00:00a 0:00:01\nCollecting fonttools&gt;=4.22.0\n  Downloading fonttools-4.38.0-py3-none-any.whl (965 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 965.4/965.4 kB 81.8 MB/s eta 0:00:00\nRequirement already satisfied: packaging&gt;=20.0 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib) (23.0)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib) (2.8.2)\nCollecting pyparsing&gt;=2.2.1\n  Downloading pyparsing-3.0.9-py3-none-any.whl (98 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 98.3/98.3 kB 18.6 MB/s eta 0:00:00\nCollecting kiwisolver&gt;=1.0.1\n  Downloading kiwisolver-1.4.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (1.1 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.1/1.1 MB 82.9 MB/s eta 0:00:00\nRequirement already satisfied: numpy&gt;=1.17 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib) (1.21.6)\nCollecting cycler&gt;=0.10\n  Downloading cycler-0.11.0-py3-none-any.whl (6.4 kB)\nRequirement already satisfied: pillow&gt;=6.2.0 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib) (9.4.0)\nRequirement already satisfied: typing-extensions in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from kiwisolver&gt;=1.0.1-&gt;matplotlib) (4.4.0)\nRequirement already satisfied: six&gt;=1.5 in /home/koinup4/anaconda3/envs/py37/lib/python3.7/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.16.0)\nInstalling collected packages: pyparsing, kiwisolver, fonttools, cycler, matplotlib\nSuccessfully installed cycler-0.11.0 fonttools-4.38.0 kiwisolver-1.4.4 matplotlib-3.5.3 pyparsing-3.0.9\n\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n- 예제1\n\nyear = ['2016', '2017', '2017', '2017', 2017, 2018, 2018, 2019, 2019]\nvalue = np.random.randn(9)\n\n\ndf = pd.DataFrame({'year':year, 'value':value})\ndf\n\n\n\n\n\n\n\n\nyear\nvalue\n\n\n\n\n0\n2016\n0.729447\n\n\n1\n2017\n0.110630\n\n\n2\n2017\n0.108119\n\n\n3\n2017\n-0.095107\n\n\n4\n2017\n-0.337716\n\n\n5\n2018\n-0.134635\n\n\n6\n2018\n-2.182677\n\n\n7\n2019\n-0.150227\n\n\n8\n2019\n0.849774\n\n\n\n\n\n\n\n\nplt.plot(df.year, df.value)\n\nTypeError: 'value' must be an instance of str or bytes, not a int\n\n\n\n\n\n\ndf.year\n\n0    2016\n1    2017\n2    2017\n3    2017\n4    2017\n5    2018\n6    2018\n7    2019\n8    2019\nName: year, dtype: object\n\n\n\ndtype이 object 로 되어있어서 그림이 그려지지 않는다.. float로 되어야 할텐데?\n에러의 이유: df.year에 str, int가 동시에 있음\n\n\nnp.array(df.year)\n\narray(['2016', '2017', '2017', '2017', 2017, 2018, 2018, 2019, 2019],\n      dtype=object)\n\n\n\n자료형의 형태를 바꿔주면 해결할 수 있다.\n\n\nnp.array(df.year, dtype=np.float64)\n\narray([2016., 2017., 2017., 2017., 2017., 2018., 2018., 2019., 2019.])\n\n\n\nnp.array(df.year).astype(np.float64) # 위와 같은 효과\n\narray([2016., 2017., 2017., 2017., 2017., 2018., 2018., 2019., 2019.])\n\n\n\ndf.year.astype(np.float64)  # 위와 같은 효과\n\n0    2016.0\n1    2017.0\n2    2017.0\n3    2017.0\n4    2017.0\n5    2018.0\n6    2018.0\n7    2019.0\n8    2019.0\nName: year, dtype: float64\n\n\n\nplt.plot(df.year.astype(np.float64), df.value,'.')\n\n\n\n\n- 예제2\n\nyear = ['2016', '2017', '2017', '2017년', 2017, 2018, 2018, 2019, 2019]\nvalue = np.random.randn(9)\n\n\ndf = pd.DataFrame({'year':year, 'value':value})\ndf\n\n\n\n\n\n\n\n\nyear\nvalue\n\n\n\n\n0\n2016\n-0.254312\n\n\n1\n2017\n0.839603\n\n\n2\n2017\n-1.386845\n\n\n3\n2017년\n0.010756\n\n\n4\n2017\n0.949379\n\n\n5\n2018\n0.280954\n\n\n6\n2018\n-0.227516\n\n\n7\n2019\n-1.100002\n\n\n8\n2019\n0.152285\n\n\n\n\n\n\n\n\nnp.array(df.year, dtype=np.float64) # \"년\"이 써있어서 타입을 일괄적으로 바꾸기 어렵다.\n\nValueError: could not convert string to float: '2017년'\n\n\n\ndf.year   # 어떤 값이 있는지 확인\n\n0     2016\n1     2017\n2     2017\n3    2017년\n4     2017\n5     2018\n6     2018\n7     2019\n8     2019\nName: year, dtype: object\n\n\n\nnp.unique(df.year)   # 섞여있는 타입에서는 unique는 동작하지 않는다.\n\nTypeError: '&lt;' not supported between instances of 'int' and 'str'\n\n\n\nL(df.year).frequency()\n\n{'2016': 1, '2017': 2, '2017년': 1, 2017: 1, 2018: 2, 2019: 2}\n\n\n\n’2016’과 같은 형태, ’2017년’과 같은 형태, 숫자형이 혼합 .. 이라는 파악 가능 -&gt; 맞춤형 변환이 필요함\n\n\n'2017년'.replace(\"년\",\"\")\n\n'2017'\n\n\n\ndef f(a):    # 데이터의 구조를 모르면 이런 함수를 짤 수가 없다. -&gt; 자료의 구조를 확인해준다는 의미에서 freq가 있다면 편리하다.\n    if type(a) is str:\n        if \"년\" in a:\n            return int(a.replace(\"년\",\"\"))\n        else:\n            return int(a)\n    else:\n        return a\n\n\n[f(a) for a in df.year]\n\n[2016, 2017, 2017, 2017, 2017, 2018, 2018, 2019, 2019]\n\n\n\ndf.year = [f(a) for a in df.year]\n\n\ndf\n\n\n\n\n\n\n\n\nyear\nvalue\n\n\n\n\n0\n2016\n-0.254312\n\n\n1\n2017\n0.839603\n\n\n2\n2017\n-1.386845\n\n\n3\n2017\n0.010756\n\n\n4\n2017\n0.949379\n\n\n5\n2018\n0.280954\n\n\n6\n2018\n-0.227516\n\n\n7\n2019\n-1.100002\n\n\n8\n2019\n0.152285\n\n\n\n\n\n\n\n\nplt.plot(df.year, df.value, '.')"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "",
    "text": "a='Jeonbuk National University' \n\n\na[-10:]\n\n'University'\n\n\n\n\n\n\na.lower()\n\n'jeonbuk national university'\n\n\n\n\n\n\n'A'.isupper()\n\nTrue\n\n\n\n'Aa'.isupper()\n\nFalse\n\n\n\n'aa'.isupper()\n\nFalse\n\n\n\n'aA'.isupper()\n\nFalse\n\n\n\n문자열이 모두 대문자가 맞는지 확인\n\n\n\n\n\n‘a’*2\n‘a’*‘2’\n‘a’+2\n‘a’+‘2’\n\n\n'a'*2\n\n'aa'\n\n\n\n'a'*'2'\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n\n'a'+2\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n'a'+'2'\n\n'a2'\n\n\n\n\n\n\n'제 이름은 {}입니다'.format('최규빈')\n\n'제 이름은 최규빈입니다'\n\n\n\n'제 이름은 {}이고 사는곳은 {}입니다.'.format('최규빈','전주')\n\n'제 이름은 최규빈이고 사는곳은 전주입니다.'\n\n\n\n'제 이름은 {}이고 사는곳은 {}입니다.'.format('전주','김보람')\n\n'제 이름은 전주이고 사는곳은 김보람입니다.'\n\n\n\n뒤에 format을 순서에 맞춰서 써줘야 한다.\n\n\nstring = '전북대학교 학생엠티가 {}월{}일-{}월{}일 완주 곶감펜션에서 있다고 합니다. 자세한 일정 등은 다시 공지하겠습니다.' \nstring.format(3,24,3,25)\n\n'전북대학교 학생엠티가 3월24일-3월25일 완주 곶감펜션에서 있다고 합니다. 자세한 일정 등은 다시 공지하겠습니다.'\n\n\n\n\n\n\n'abcdefg'.replace('g','u')\n\n'abcdefu'\n\n\n\ng를 u로 바꿔줌\n\n\n\n\n\n'2023-03-22'.split('-')\n\n['2023', '03', '22']\n\n\n-을 기준으로 나누어줌\n\n'2023.03.22'.split('.')\n\n['2023', '03', '22']\n\n\n\n\n\n\n'a' in 'abcd'\n\nTrue\n\n\n\n‘a’라는 문자가 ’abcd’ 안에 있는지 확인해주는 함수\n\n\n'b' in 'boram'\n\nTrue\n\n\n\n'c' in 'boram'\n\nFalse"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "",
    "text": "a='Jeonbuk National University' \n\n\na[-10:]\n\n'University'\n\n\n\n\n\n\na.lower()\n\n'jeonbuk national university'\n\n\n\n\n\n\n'A'.isupper()\n\nTrue\n\n\n\n'Aa'.isupper()\n\nFalse\n\n\n\n'aa'.isupper()\n\nFalse\n\n\n\n'aA'.isupper()\n\nFalse\n\n\n\n문자열이 모두 대문자가 맞는지 확인\n\n\n\n\n\n‘a’*2\n‘a’*‘2’\n‘a’+2\n‘a’+‘2’\n\n\n'a'*2\n\n'aa'\n\n\n\n'a'*'2'\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n\n'a'+2\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n'a'+'2'\n\n'a2'\n\n\n\n\n\n\n'제 이름은 {}입니다'.format('최규빈')\n\n'제 이름은 최규빈입니다'\n\n\n\n'제 이름은 {}이고 사는곳은 {}입니다.'.format('최규빈','전주')\n\n'제 이름은 최규빈이고 사는곳은 전주입니다.'\n\n\n\n'제 이름은 {}이고 사는곳은 {}입니다.'.format('전주','김보람')\n\n'제 이름은 전주이고 사는곳은 김보람입니다.'\n\n\n\n뒤에 format을 순서에 맞춰서 써줘야 한다.\n\n\nstring = '전북대학교 학생엠티가 {}월{}일-{}월{}일 완주 곶감펜션에서 있다고 합니다. 자세한 일정 등은 다시 공지하겠습니다.' \nstring.format(3,24,3,25)\n\n'전북대학교 학생엠티가 3월24일-3월25일 완주 곶감펜션에서 있다고 합니다. 자세한 일정 등은 다시 공지하겠습니다.'\n\n\n\n\n\n\n'abcdefg'.replace('g','u')\n\n'abcdefu'\n\n\n\ng를 u로 바꿔줌\n\n\n\n\n\n'2023-03-22'.split('-')\n\n['2023', '03', '22']\n\n\n-을 기준으로 나누어줌\n\n'2023.03.22'.split('.')\n\n['2023', '03', '22']\n\n\n\n\n\n\n'a' in 'abcd'\n\nTrue\n\n\n\n‘a’라는 문자가 ’abcd’ 안에 있는지 확인해주는 함수\n\n\n'b' in 'boram'\n\nTrue\n\n\n\n'c' in 'boram'\n\nFalse"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-1",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-1",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "Quiz",
    "text": "Quiz\n\n1\n\na=[]\na\n\n[]\n\n\n\nlen(a)\n\n0\n\n\n\n\n2\n\nlen(3.14)\n\nTypeError: object of type 'float' has no len()\n\n\n\nlen([3.14]) \n\n1\n\n\n\nlen('3.14') \n\n4\n\n\n\n\n3\n\n[1]*1+[2]*2+[3]*2+[4]*4+[5]*5\n\n[1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n\n\n\n\n4\n\nsum([1,0,1,0])\n\n2\n\n\n\nsum([True,False,True,False])\n\n2\n\n\n\n\n5\n\nx = [80,60,80,90,55,85,95,100,35,70,75,65,95]\nx\n\n[80, 60, 80, 90, 55, 85, 95, 100, 35, 70, 75, 65, 95]\n\n\n\nsum([xi &gt;80 for xi in x])\n\n5\n\n\n\n\n6\n\n['A','B','C','D','A','A','B','A','F','C','C','C','A']\n\n['A', 'B', 'C', 'D', 'A', 'A', 'B', 'A', 'F', 'C', 'C', 'C', 'A']\n\n\n\na=['A','B','C','D','A','A','B','A','F','C','C','C','A']\n\n\na.count('A')\n\n5\n\n\n\na.count('B')\n\n2\n\n\n\nlst = ['A','B','C','D','A','A','B','A','F','C','C','C','A']\nsum([l &lt;'C' for l in lst])\n\n7\n\n\n\n\n7\n\nx=[1,2,1,5,6,2,4,7]\ny=[3,2,4,1,2,5,6,7] \n\n\n[x[i]**2+y[i]**2 for i in range(8)]\n\n[10, 8, 17, 26, 40, 29, 52, 98]\n\n\n\n\n8\n\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n\n\nsum([s.isupper() for s in test_arr ])\n\n155\n\n\n\n\n9\n\n['a'*i for i in range(1,11)]\n\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa']\n\n\n\n\n10\n\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\n\n\n[i[0]*i[1] for i in test_lst]\n\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n\n\n\n\n11\n\n[1,2,2,3,3,3]\n\n[1, 2, 2, 3, 3, 3]\n\n\n\na = []\nfor i in range(1,4):\n    a = a + [i]*i\n\n\na\n\n[1, 2, 2, 3, 3, 3]\n\n\n\n\n12\n\nlst = ['2022/09/21','2022/10/30','2022/12/25','2023/01/01','2023/01/31','2023/03/20']\n\n\n[a.replace('/','-') for a in lst]\n\n['2022-09-21',\n '2022-10-30',\n '2022-12-25',\n '2023-01-01',\n '2023-01-31',\n '2023-03-20']\n\n\n\n\n13\n\na='2021. 01. 05.'\na\n\n'2021. 01. 05.'\n\n\n\na.replace(' ','')\n\n'2021.01.05.'\n\n\n\n\n14\n\n'-'.join(['2022','01','05'])\n\n'2022-01-05'\n\n\n\n'.'.join(['2022','01','05'])\n\n'2022.01.05'\n\n\n\n'/'.join(['2022','01','05'])\n\n'2022/01/05'\n\n\n\n\n15\n\nblock = ['■'] \n\n\nblock*10\n\n['■', '■', '■', '■', '■', '■', '■', '■', '■', '■']\n\n\n\n'-'.join(block*10)\n\n'■-■-■-■-■-■-■-■-■-■'\n\n\n\n\n16\n\n['2023', '03', '22']\n\n['2023', '03', '22']\n\n\n\n'-'.join(['2023', '03', '22'])\n\n'2023-03-22'\n\n\n\n\n17\n\na = ('202250926',)\n\n\nlen(a)\n\n1\n\n\n\ntype(a)\n\ntuple\n\n\n\nb = ('boram',)\n\n\na + b\n\n('202250926', 'boram')\n\n\n\n\n18\n\nlst = [['2021-43052', 'GuebinChoi', 5, 10, 20, 25],\n       ['2019-12342', 'Heung-min Son', 10, 15, 30, 15],\n       ['2018-32234', 'hynn', 7, 20, 30, 15],\n       ['2022-42323', 'Minji', 8, 20, 20, 35],\n       ['2023-55342', 'Hanni', 7, 20, 30, 35],\n       ['2022-46624', 'Danielle', 3, 15, 30, 40],\n       ['2022-11239', 'Haerin', 10, 20, 30, 40],\n       ['2022-32114', 'Hyein', 10, 20, 20, 35]]\nlst \n\n[['2021-43052', 'GuebinChoi', 5, 10, 20, 25],\n ['2019-12342', 'Heung-min Son', 10, 15, 30, 15],\n ['2018-32234', 'hynn', 7, 20, 30, 15],\n ['2022-42323', 'Minji', 8, 20, 20, 35],\n ['2023-55342', 'Hanni', 7, 20, 30, 35],\n ['2022-46624', 'Danielle', 3, 15, 30, 40],\n ['2022-11239', 'Haerin', 10, 20, 30, 40],\n ['2022-32114', 'Hyein', 10, 20, 20, 35]]\n\n\n\nlen(lst)\n\n8\n\n\n\n\n19\n. 전북대학교 지침에 따라 출석점수가 7보다 작은 학생은 (즉 출석점수 &lt; 7 일 경우) F학점을 부여하게 되어있다. 이 기준에 따르면 F를 받는 학생은 모두 몇명인가?\n\nsum([a&lt;7 for _,_,a, *rest in lst])\n\n2\n\n\n\n\n20\n파이썬프로그래밍 수업의 경우 출석+레포트 &lt; 21 일 경우 F학점을 부여한다고 한다. 이 기준에 따르면 F를 받는 학생은 모두 몇명인가?\n\nsum([a+b&lt;21 for _,_,a,b, *rest in lst])\n\n2\n\n\n\n\n21\n리스트의 정렬순서를 [학번, 이름, …, 기말고사점수] 가 아니라 [이름, 학번, … , 기말고사점수] 와 같이 되도록 변경하는 코드를 작성하라.\n\n[[name,studentid,*rest] for studentid, name, *rest in lst]\n\n[['GuebinChoi', '2021-43052', 5, 10, 20, 25],\n ['Heung-min Son', '2019-12342', 10, 15, 30, 15],\n ['hynn', '2018-32234', 7, 20, 30, 15],\n ['Minji', '2022-42323', 8, 20, 20, 35],\n ['Hanni', '2023-55342', 7, 20, 30, 35],\n ['Danielle', '2022-46624', 3, 15, 30, 40],\n ['Haerin', '2022-11239', 10, 20, 30, 40],\n ['Hyein', '2022-32114', 10, 20, 20, 35]]\n\n\n\n\n22\n\ntext = \"국내뿐 아니라 해외 인기도 심상치 않다. 2023년 1월 18일 'Ditto'가 빌보드 핫 100에 96위로 진입했다. 이는 K-pop 역사상 데뷔후 최단 빌보드 Hot 100 차트 입성 기록이다. 다른 뮤지션들이 보통 데뷔 후 수년간 쌓아온 팬덤을 기반으로 빌보드에 입성한데 비해, 뉴진스의 기록은 이례적인 것으로 평가받고 있다. 또한 'OMG'가 빌보드 핫 100에 91위로 진입한 동시에 'Ditto'는 85위로 순위가 상승, 핫 100 주간차트에 두 곡을 올려놓았다. K-Pop 역사상 이 차트에 두 곡 이상을 진입시킨 아티스트는 방탄소년단과 블랙핑크가 유일하다. 'Ditto'는 1월 셋째주 기준, 빌보드뿐만 아니라 영국 오피셜 싱글 차트 '톱 100'에 2주 연속 진입하기도 했다.\"\n\n\naa=text.split('.')\naa\n\n['국내뿐 아니라 해외 인기도 심상치 않다',\n \" 2023년 1월 18일 'Ditto'가 빌보드 핫 100에 96위로 진입했다\",\n ' 이는 K-pop 역사상 데뷔후 최단 빌보드 Hot 100 차트 입성 기록이다',\n ' 다른 뮤지션들이 보통 데뷔 후 수년간 쌓아온 팬덤을 기반으로 빌보드에 입성한데 비해, 뉴진스의 기록은 이례적인 것으로 평가받고 있다',\n \" 또한 'OMG'가 빌보드 핫 100에 91위로 진입한 동시에 'Ditto'는 85위로 순위가 상승, 핫 100 주간차트에 두 곡을 올려놓았다\",\n ' K-Pop 역사상 이 차트에 두 곡 이상을 진입시킨 아티스트는 방탄소년단과 블랙핑크가 유일하다',\n \" 'Ditto'는 1월 셋째주 기준, 빌보드뿐만 아니라 영국 오피셜 싱글 차트 '톱 100'에 2주 연속 진입하기도 했다\",\n '']\n\n\n\nlen(aa)\n\n8\n\n\n\n그냥 ‘.’ 으로 구분해버리게 되면 맨 마지막 ““까지 길이를 세게 된다. 조심!\n\n\na=text.split('. ')\na\n\n['국내뿐 아니라 해외 인기도 심상치 않다',\n \"2023년 1월 18일 'Ditto'가 빌보드 핫 100에 96위로 진입했다\",\n '이는 K-pop 역사상 데뷔후 최단 빌보드 Hot 100 차트 입성 기록이다',\n '다른 뮤지션들이 보통 데뷔 후 수년간 쌓아온 팬덤을 기반으로 빌보드에 입성한데 비해, 뉴진스의 기록은 이례적인 것으로 평가받고 있다',\n \"또한 'OMG'가 빌보드 핫 100에 91위로 진입한 동시에 'Ditto'는 85위로 순위가 상승, 핫 100 주간차트에 두 곡을 올려놓았다\",\n 'K-Pop 역사상 이 차트에 두 곡 이상을 진입시킨 아티스트는 방탄소년단과 블랙핑크가 유일하다',\n \"'Ditto'는 1월 셋째주 기준, 빌보드뿐만 아니라 영국 오피셜 싱글 차트 '톱 100'에 2주 연속 진입하기도 했다.\"]\n\n\n\nlen(a)\n\n7\n\n\n\n\n23\n\na=text.split(' ')\na\nlen(a)\n\n90\n\n\n\n\n24\n\n['100' in s for s in a]\n\n[False, True, True, False, True, False, True]\n\n\n\nsum(['100' in s for s in a])\n\n4"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-2",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-2",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "Quiz",
    "text": "Quiz\n\n1\n\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n\n\ntest_arr[::2]\n\n'shraAABNa1cEAAIAAEkOpDrH1SrTpLG9jmBDUP+azHTWhIy5w8HJ9bUriz7lLV49F5VbpSgcaPvkd/TBWFRHoFRtqi1KXHZMiqVRsAwsMvlK7A3aJAnMQx+VW6/Im1uFjJpr8XpDjNyv/bretEm+WOPTI9PVLar2E6/lbg331KtIj2od1rTMVsxrF9r+7= cao@yatplcl'\n\n\n\n\n2\n\ntest_arr[::-1]\n\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n\n\n\n\n3\n\ndct={'202212377': {'att': 65, 'rep': 45, 'mid': 0, 'fin': 10},\n     '202212473': {'att': 95, 'rep': 30, 'mid': 60, 'fin': 10},\n     '202212310': {'att': 65, 'rep': 85, 'mid': 15, 'fin': 20},\n     '202212460': {'att': 55, 'rep': 35, 'mid': 35, 'fin': 5},\n     '202212320': {'att': 80, 'rep': 60, 'mid': 55, 'fin': 70},\n     '202212329': {'att': 75, 'rep': 40, 'mid': 75, 'fin': 85},\n     '202212408': {'att': 65, 'rep': 70, 'mid': 60, 'fin': 75},\n     '202212319': {'att': 60, 'rep': 25, 'mid': 20, 'fin': 35},\n     '202212348': {'att': 95, 'rep': 55, 'mid': 65, 'fin': 90},\n     '202212306': {'att': 90, 'rep': 25, 'mid': 95, 'fin': 50},\n     '202212308': {'att': 55, 'rep': 45, 'mid': 75, 'fin': 30},\n     '202212366': {'att': 95, 'rep': 60, 'mid': 25, 'fin': 55},\n     '202212367': {'att': 95, 'rep': 35, 'mid': 0, 'fin': 25},\n     '202212461': {'att': 50, 'rep': 55, 'mid': 90, 'fin': 45}}\n\n\n[a for a  in dct]\n\n['202212377',\n '202212473',\n '202212310',\n '202212460',\n '202212320',\n '202212329',\n '202212408',\n '202212319',\n '202212348',\n '202212306',\n '202212308',\n '202212366',\n '202212367',\n '202212461']\n\n\n\n\n4(\\(\\star\\))\n\n[a for a,b in dct.items() if b['att']&gt;70]\n\n['202212473',\n '202212320',\n '202212329',\n '202212348',\n '202212306',\n '202212366',\n '202212367']\n\n\n\n\n5\n\nimport requests\nurl = 'https://raw.githubusercontent.com/guebin/PP2023/main/posts/01_PythonBasic/Oxford-IIIT.txt'\ntxt = requests.get(url).content.decode()\n\n\nfname= txt.split('\\n')\n\n\nfname[:5]\n\n['Abyssinian_1.jpg',\n 'Abyssinian_10.jpg',\n 'Abyssinian_100.jpg',\n 'Abyssinian_100.mat',\n 'Abyssinian_101.jpg']\n\n\n\n\n6(\\(\\star\\))\n\ndef f(fname):\n    return 'cat' if fname[0].isupper() else 'dog'\n\n\nf('yorkshire_terrier_99.jpg')\n\n'dog'\n\n\n\nf('Abyssinian_1.jpg')\n\n'cat'\n\n\n\n\n7\n\nresult = [f(l) for l in fname]\nresult[:10]\n\n['cat', 'cat', 'cat', 'cat', 'cat', 'cat', 'cat', 'cat', 'cat', 'cat']\n\n\n\n\n8\n\nsum([c == 'cat' for c in result])\n\n2403\n\n\n\nsum([d == 'dog' for d in result])\n\n4990\n\n\n\n\n9\n\nsum(['pomeranian'  in s for s in fname])\n\n200"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-3",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-3",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "Quiz",
    "text": "Quiz\n\n1\n\ndct = {'a':0, 'b':1} \n\n\nlst = [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1]\n\n\ndct.items()\n\ndict_items([('a', 0), ('b', 1)])\n\n\n\n[k for l in lst for k,v in dct.items() if v==l]\n\n['b', 'a', 'b', 'a', 'b', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'a', 'b']\n\n\n\n\n2\n\ndct = {'겨울방학':[1,2], '1학기':[3,4,5,6], '여름방학':[7,8], '2학기':[9,10,11,12]}\ndct\n\n{'겨울방학': [1, 2], '1학기': [3, 4, 5, 6], '여름방학': [7, 8], '2학기': [9, 10, 11, 12]}\n\n\n\nmonth = [1,2,2,3,4,5,6,7,8,9,9,10,11,12] \n\n\n[x for l in month for x,y in dct.items() if l in y]\n\n['겨울방학',\n '겨울방학',\n '겨울방학',\n '1학기',\n '1학기',\n '1학기',\n '1학기',\n '여름방학',\n '여름방학',\n '2학기',\n '2학기',\n '2학기',\n '2학기',\n '2학기']\n\n\n\n\n3\n\ndct1 = {'바나나':0, '사과':1, '오토바이':2, '자동차':3, '자전거':4} \ndct2 = {'과일':['바나나','사과'], '탈것':['오토바이','자동차','자전거']} \n\n\ndef f(i):\n    return [k for l in i for k,v in dct1.items() if v == 1]\n\n\nf([0,1,0,1,4])\n\n['사과', '사과', '사과', '사과', '사과']\n\n\n\n\n4\n\ndef g(i):\n    return [k for l in i for k,v in dct2.items() if l in v]\n\n\ng(['바나나','바나나','바나나','자동차'])\n\n['과일', '과일', '과일', '탈것']\n\n\n\n\n5\n\ng(f([0,1,0,1,3,4,2,2,3,4,1,0]))\n\n['과일', '과일', '과일', '과일', '과일', '과일', '과일', '과일', '과일', '과일', '과일', '과일']\n\n\n\n\n6\n\nimport requests\nurl = 'https://raw.githubusercontent.com/guebin/PP2023/main/posts/01_PythonBasic/Oxford-IIIT.txt'\ntxt = requests.get(url).content.decode()\n\n\nlst = [''.join(filename.split('_')[:-1]) for filename in txt.split('\\n')]\n\n\nlst[:10],lst[810:820]\n\n(['Abyssinian',\n  'Abyssinian',\n  'Abyssinian',\n  'Abyssinian',\n  'Abyssinian',\n  'Abyssinian',\n  'Abyssinian',\n  'Abyssinian',\n  'Abyssinian',\n  'Abyssinian'],\n ['BritishShorthair',\n  'BritishShorthair',\n  'BritishShorthair',\n  'BritishShorthair',\n  'BritishShorthair',\n  'BritishShorthair',\n  'BritishShorthair',\n  'BritishShorthair',\n  'BritishShorthair',\n  'BritishShorthair'])\n\n\n\n\n7\n\n[s[0].isupper() for s in set(lst)].count(True) # 고양이 12\n\n12\n\n\n\n[s[0].isupper() for s in set(lst)].count(False) \n\n25\n\n\n\n\n8\n\ndct = {'cat': [s for s in set(lst) if s[0].isupper()], 'dog': [s for s in set(lst) if not s[0].isupper()]}\n\n\nlst2 = [k for l in lst for k, v in dct.items() if l in v]\n\n\nlst2[:10], lst2[-10:] # 바뀐 lst\n\n(['cat', 'cat', 'cat', 'cat', 'cat', 'cat', 'cat', 'cat', 'cat', 'cat'],\n ['dog', 'dog', 'dog', 'dog', 'dog', 'dog', 'dog', 'dog', 'dog', 'dog'])\n\n\n\n\n9\n\n{k:lst2.count(k) for k in ['dog','cat']}\n\n{'dog': 4990, 'cat': 2403}\n\n\n\n\n10\n\n{k:lst.count(k) for k in set(lst)}\n\n{'Ragdoll': 200,\n 'Birman': 200,\n 'americanpitbullterrier': 200,\n 'boxer': 200,\n 'RussianBlue': 200,\n 'japanesechin': 200,\n 'Bengal': 200,\n 'beagle': 200,\n 'havanese': 200,\n 'yorkshireterrier': 200,\n 'miniaturepinscher': 200,\n 'newfoundland': 200,\n 'bassethound': 200,\n 'wheatenterrier': 200,\n 'EgyptianMau': 200,\n 'Abyssinian': 203,\n 'pomeranian': 200,\n 'englishsetter': 200,\n 'Persian': 200,\n 'Sphynx': 200,\n 'leonberger': 200,\n 'Siamese': 200,\n 'MaineCoon': 200,\n 'BritishShorthair': 200,\n 'shibainu': 200,\n 'americanbulldog': 200,\n 'germanshorthaired': 200,\n 'keeshond': 200,\n 'samoyed': 200,\n 'pug': 200,\n 'Bombay': 200,\n 'staffordshirebullterrier': 191,\n 'englishcockerspaniel': 200,\n 'greatpyrenees': 200,\n 'scottishterrier': 199,\n 'chihuahua': 200,\n 'saintbernard': 200}"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-4",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-4",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "Quiz",
    "text": "Quiz\n\n1\n\na= np.array(0)\na.shape\n\n()\n\n\n\n\n2\n\na=[1,3,2,5,-3,3,8,2,3,1]\nnp.array(a)+1\n\narray([ 2,  4,  3,  6, -2,  4,  9,  3,  4,  2])\n\n\n\n\n3\n\nnp.arange(100)[::3]\n\narray([ 0,  3,  6,  9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48,\n       51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99])\n\n\n\n\n4\n\nnp.eye(5)\n\narray([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])\n\n\n\n\n5\n\na = np.array([[1,0],[0,3]])\n\n\nnp.linalg.inv(a)\n\narray([[1.        , 0.        ],\n       [0.        , 0.33333333]])\n\n\n\n\n6\n\nnp.random.seed(19931217)\n\n\na= np.random.randn(1000)\n\n\n\n7\n\nsum(a&gt;1.96) + sum(a&lt;-1.96)\n\n59\n\n\n\n\n8\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\na[:,[0]]\n\narray([[0],\n       [4],\n       [8]])\n\n\n\n\n9\n\nnp.random.seed(43052)\na=np.random.randint(low=20,high=25,size=(10,10))\n\n\na\n\narray([[23, 24, 23, 21, 23, 21, 23, 24, 23, 23],\n       [24, 22, 23, 21, 20, 21, 21, 21, 24, 20],\n       [24, 20, 24, 21, 20, 23, 24, 20, 23, 21],\n       [23, 24, 20, 23, 22, 23, 21, 21, 21, 22],\n       [22, 24, 24, 22, 21, 24, 20, 22, 21, 23],\n       [20, 23, 23, 21, 23, 20, 21, 22, 24, 20],\n       [20, 20, 20, 24, 23, 22, 20, 22, 24, 20],\n       [21, 24, 23, 22, 24, 21, 23, 22, 23, 22],\n       [22, 21, 24, 24, 24, 21, 22, 22, 22, 23],\n       [23, 20, 23, 23, 22, 20, 21, 22, 22, 23]])\n\n\n\n(a==20).sum(), (a==21).sum(), (a==22).sum()\n\n(17, 20, 19)\n\n\n\n\n10\n\nlst = [[i==j for i in range(5)] for j in range(5)]\nlst\n\n[[True, False, False, False, False],\n [False, True, False, False, False],\n [False, False, True, False, False],\n [False, False, False, True, False],\n [False, False, False, False, True]]\n\n\n\nnp.array([[i==j for i in range(5)] for j in range(5)])*1.0\n\narray([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])\n\n\n\n\n12\n\nnp.array([[i+j for i in range(5)] for j in range(5)] )\n\narray([[0, 1, 2, 3, 4],\n       [1, 2, 3, 4, 5],\n       [2, 3, 4, 5, 6],\n       [3, 4, 5, 6, 7],\n       [4, 5, 6, 7, 8]])\n\n\n\n\n13\n\nnp.array([[abs(i-j)&lt;2 for i in range(10)] for j in range(10)])*1\n\narray([[1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n       [1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n       [0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\n       [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\n       [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],\n       [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n       [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n       [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\n       [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]])\n\n\n\n\n14\n\nnp.random.rand(100)&lt;0.45\n\narray([False, False, False, False,  True, False, False,  True, False,\n        True, False,  True, False, False, False, False,  True,  True,\n        True, False, False, False, False, False,  True,  True,  True,\n        True, False, False,  True,  True, False,  True,  True,  True,\n       False, False, False, False,  True, False, False, False, False,\n        True,  True, False, False, False,  True,  True, False,  True,\n       False, False,  True,  True, False,  True, False, False, False,\n       False, False,  True, False, False,  True, False, False, False,\n        True, False, False,  True,  True,  True, False, False,  True,\n        True, False, False,  True,  True,  True,  True,  True,  True,\n       False, False, False,  True, False, False,  True,  True, False,\n       False])"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#lesson",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#lesson",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "lesson",
    "text": "lesson\n\na=np.array([1,2]) \nb=-a\n\n\na.shape\n\n(2,)\n\n\n\nb.shape\n\n(2,)\n\n\n\nc = np.concatenate([a,b])\nc\n\narray([ 1,  2, -1, -2])\n\n\n\nc.shape\n\n(4,)"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-5",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#quiz-5",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "Quiz",
    "text": "Quiz"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#section-62",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#section-62",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "1~6",
    "text": "1~6\n\na=np.array([1]*10)\nb=np.array([2]*10)\n\n\na\n\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n\n\n\nb\n\narray([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n\n\n\n1\n\nnp.concatenate([a,b],axis=0)\n\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n\n\n\n\n2\n\na=np.array([1]*10)\nb=np.array([2]*10)\n\n\na.reshape(10,1)\n\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1]])\n\n\n\nnp.concatenate([a.reshape(10,1),b.reshape(10,1)],axis=0)\n\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n\n\n\n\n3\n\na=np.array([1]*10)\nb=np.array([2]*10)\n\n\nnp.concatenate([a.reshape(1,10),b.reshape(1,10)],axis=0)\n\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])\n\n\n\n\n4\n\nnp.concatenate([a.reshape(10,1),b.reshape(10,1)],axis=1)\n\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\n\n\n\n5\n\na.shape\n\n(10,)\n\n\n\nb.shape\n\n(10,)\n\n\n\nnp.stack([a,b]).shape\n\n(2, 10)\n\n\n\nnp.stack([a,b])\n\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])\n\n\n\n\n6\n\nnp.stack([a,b],axis=1)\n\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])"
  },
  {
    "objectID": "posts/Summer Program-Python Programming Day1 Quiz.html#section-69",
    "href": "posts/Summer Program-Python Programming Day1 Quiz.html#section-69",
    "title": "Summer Program: Python Programming _ Day1 Quiz",
    "section": "7~8",
    "text": "7~8\n\nnp.random.seed(43052)\na=np.random.randn(10000).reshape(100,100)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825, ..., -0.18506968,\n         1.05538764,  1.18701443],\n       [-0.25027283, -1.58045215,  0.1124153 , ...,  1.0321894 ,\n         0.40438012, -0.13491595],\n       [-0.76763724, -0.64294232, -0.24782396, ..., -0.01530161,\n         0.89125897, -0.82683395],\n       ...,\n       [-1.41379028,  0.79611333, -0.71011837, ..., -0.9860352 ,\n         1.30755244,  2.18677233],\n       [ 1.33968105, -0.78457449, -0.10405858, ..., -0.71110186,\n         0.99841286,  2.34371635],\n       [-0.66422032, -0.07550233,  0.7405869 , ...,  1.03232398,\n        -0.18988252, -0.03578389]])\n\n\n\na.sum(axis=1)\n\narray([-8.13607922e+00,  9.87120533e+00, -1.41434956e+01, -2.21705363e+00,\n       -1.45535236e+01, -9.15821678e+00, -2.59866360e+00, -1.54562385e+01,\n       -1.42005088e+00, -3.51523111e+00,  9.70487578e+00, -1.26229105e+01,\n        1.66837113e+00,  2.43015457e+00,  2.72990184e+00, -7.99486429e+00,\n       -8.38305954e-01, -8.45002020e+00, -1.03610098e+00,  2.07251861e+01,\n        1.11461478e+01,  7.62144075e+00, -7.93734585e+00,  1.82844319e+01,\n       -2.63562392e+00, -8.97916930e+00, -1.88986183e+00, -9.32477049e+00,\n       -6.69074565e+00, -1.42463143e+01,  6.45540510e-01,  1.80911488e+00,\n        2.40997157e+00,  1.63367254e+01,  7.63990677e+00,  8.13524813e+00,\n        3.97159000e+00, -1.10542949e+00,  4.37564512e-01,  2.87299971e+00,\n       -4.01016768e+00,  5.71115215e+00, -4.64132698e+00, -9.13987753e+00,\n       -6.78326000e+00,  3.36308150e+00, -5.13704342e+00, -5.09782466e+00,\n        6.54192465e-03,  7.19722660e+00, -4.64674820e+00, -9.24124039e+00,\n        6.73530841e+00,  1.12168921e+00,  1.61615988e+00,  1.37602200e+01,\n        6.67289840e-01, -2.09578108e+00, -2.81826564e-01, -8.52416541e+00,\n       -7.21970047e+00,  2.27146777e+01, -1.40341974e+01,  1.69263136e+01,\n       -1.80568372e+01,  6.52142336e+00, -1.73092812e+01, -1.34999285e+01,\n       -7.85539317e+00, -4.74940393e-01, -2.75765037e+01,  8.74991555e+00,\n       -9.77324158e+00,  1.42854121e+01, -1.10130356e+00, -1.39206483e-01,\n       -1.54638921e+01,  1.36814794e+00,  8.41394160e+00, -2.42153833e+00,\n       -2.57155344e+01, -6.72423820e+00, -9.49366257e-01,  3.79493472e+00,\n       -6.23508582e+00,  7.75657189e+00,  9.69403620e+00,  1.46847519e+01,\n        7.36500792e+00, -2.54755192e+01,  1.22792449e+01, -1.02497847e+01,\n        1.30452028e+01,  3.92943038e+00, -3.27227585e+00, -1.06633071e+01,\n       -1.56942302e+01,  8.01451222e+00,  2.81546938e+00,  5.56774384e+00])\n\n\n\n8\n\na.mean(axis=0)\n\narray([ 5.05543481e-03, -8.11250975e-03, -7.27142023e-03,  9.64876493e-02,\n        5.64186324e-02, -2.22728206e-02,  1.32808256e-04, -9.60905067e-02,\n        9.42144096e-02, -1.21946518e-01, -2.21878576e-02, -3.77018716e-02,\n        2.35739166e-03, -1.13202128e-01, -9.00374437e-02, -3.09372275e-02,\n       -2.18029121e-02,  7.04210003e-02, -4.12563112e-02,  2.58233488e-02,\n        1.16578817e-01, -1.59430241e-01, -1.53668953e-02,  9.21879710e-02,\n       -1.11346500e-01, -1.20131585e-01,  5.94139652e-02, -3.27022797e-02,\n       -1.46466366e-02, -1.78386785e-02, -1.06650333e-01, -9.04542721e-02,\n       -8.52586244e-02,  5.52166280e-02,  1.94115122e-01,  4.64389603e-02,\n        5.13636914e-02,  1.11424801e-01, -4.18629084e-02,  9.23822150e-02,\n       -2.00433998e-02, -5.73784795e-02, -8.79928414e-02, -3.01766235e-02,\n        6.47256326e-02,  3.14419234e-02, -1.16146865e-01, -1.04800787e-01,\n        3.17924308e-02,  5.51687322e-02,  1.04913214e-01, -2.79741703e-03,\n        2.56767141e-01, -1.35620430e-01, -9.59492302e-02,  1.23241275e-01,\n       -5.26436946e-03, -3.14823093e-02, -4.00286104e-02, -1.48618576e-01,\n        4.85988487e-02, -1.37972086e-01, -1.04715966e-01, -7.13893940e-02,\n        4.35483376e-02, -2.10610822e-01, -1.03231108e-01, -1.62132451e-01,\n        2.85187037e-01, -8.25697744e-02,  4.33723229e-02,  1.32763889e-02,\n       -1.61919484e-01, -5.07924036e-02,  6.62243327e-02, -9.72863991e-02,\n        2.71962223e-01, -5.97710822e-02,  1.54580795e-01, -5.46739064e-02,\n       -1.08611574e-01, -1.56520706e-01, -1.40476317e-01,  1.06067589e-01,\n       -3.46141736e-02, -6.07673046e-02,  5.33471760e-03,  8.10276105e-02,\n       -1.31994569e-01, -1.00936968e-02,  6.13944222e-02, -9.72765699e-02,\n        1.61342793e-01,  1.02634369e-01, -5.03038014e-02, -7.50604837e-02,\n        2.63992605e-02,  6.98470602e-02, -1.89567885e-01,  7.91910813e-02])"
  },
  {
    "objectID": "posts/4. Class/python 11_0511.html",
    "href": "posts/4. Class/python 11_0511.html",
    "title": "파이썬 (0511) 11주차",
    "section": "",
    "text": "!pip install pillow\n\nCollecting pillow\n  Downloading Pillow-9.4.0-cp37-cp37m-manylinux_2_28_x86_64.whl (3.4 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.4/3.4 MB 57.2 MB/s eta 0:00:00a 0:00:01\nInstalling collected packages: pillow\nSuccessfully installed pillow-9.4.0\nimport requests\nfrom PIL import Image\n- 예제1\nurl= 'https://stat.jbnu.ac.kr/sites/stat/images/intro_about_02.jpg'\nImage.open(Image.io.BytesIO(requests.get(url).content))\n# 이미지 데이터를 분류 작업할때..\n- 예제2\nurl1 = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\nurl2 = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop2.png?raw=true'\nImage.open(Image.io.BytesIO(requests.get(url1).content))\nImage.open(Image.io.BytesIO(requests.get(url2).content))"
  },
  {
    "objectID": "posts/4. Class/python 11_0511.html#클래스-사용법",
    "href": "posts/4. Class/python 11_0511.html#클래스-사용법",
    "title": "파이썬 (0511) 11주차",
    "section": "클래스 사용법",
    "text": "클래스 사용법\n- 클래스를 선언\n\nclass STOOOP:\n    title=\"학교폭력\"\n    url= url1\n    end=\"멈춰~~~~\"\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end)\n\n\n규칙1: 메소드(=class안에 정의된 함수)의 첫번째 인자는 무조건 self\n규칙2: 메소드에서 class 안에 정의된 변수들(title, url, end)를 사용하려면 “self.변수이름”과 같은 형식으로 쓴다.\n\n즉 “self.title”, “self.url”, “self.end”와 같은 방식으로 써야한다.\n\n참고: 규칙2에서 가끔 self의 자리에 “STOOOP.title”, “STOOOP.url”, “STOOOP.end”와 같이 클래스의 이름으로 쓰기도 한다.\n\n- 클래스 사용에서\n- (예시1) STOOOP 클래스 -&gt; school instance를 만드는 과정\n\nschool=STOOOP()\n\n\nschool.stop()\n\n학교폭력\n멈춰~~~~\n\n\n\n\n\n- (예시2) STOOOP 클래스 -&gt; kospi 인스턴스를 만듬\n\nkospi=STOOOP()\n\n\nkospi.title=\"KOSPI 하락\"\n\n\nkospi.stop()\n\nKOSPI 하락\n멈춰~~~~\n\n\n\n\n\n\n클래스의 성능\n- 성능1: 클래스에서 인스터스를 생성\n\nschool = STOOOP()\nkospi = STOOOP()\n\n\n함수의 사용법과 비슷하다.\n클래스 이름을 쓰고 콘텐츠를 구체화 하는 과정에서 필요한 입력1, 입력2를 ()에 넣는다. 이때는 STOOOP(입력1, 입력2)와 같이 생성\n위의 예시는 따로 입력이 없으므로 비워둔 상태임. 즉 STOOOP()와 같은 식으로 생성.\n\n- 성능2: 클래스에서 만들어진 인스턴스는 그 내부에 변수를 따로 가지고 있는데, 그것을 독립적으로 출력 혹은 변경할 수 있다.\n\nschool.title #출ㄺ\n\n'학교폭력'\n\n\n\nkospi.title #출력\n\n'학교폭력'\n\n\n\nkospi.title = '코스피하락' #변경\n\n\nkospi.title\n\n'코스피하락'\n\n\n- 성능3: 클래스에서 만들어진 인스턴스는 그 내부에 자체적인 함수를 가지는데, 이것을 사용할 수 있다.\n\nschool.stop()\n\n학교폭력\n멈춰~~~~\n\n\n\n\n\n\nkospi.stop()\n\n코스피하락\n멈춰~~~~\n\n\n\n\n\n\n\n연습문제\n문제1 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있고, 변수 a의 초기값은 True이다.\n- 클래스에는 show()라는 메소드가 있는데, a의 값을 출력하는 기능을 한다.\n(풀이)\n\nclass Klass1:\n    a = True\n    def show(self):\n        print(self.a)\n\n\nex1=Klass1()\n\n\nex1.a\n\nTrue\n\n\n\nex1.show()\n\nTrue\n\n\n문제2 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있고, 변수 a의 초기값은 1이다.\n- 클래스에는 up()라는 메소드가 있는데, a의 값을 1증가시키는 기능을 한다.\n(풀이)\n\nclass Klass2:\n    a=1\n    def up(self):\n        self.a = self.a + 1\n\n\nex2=Klass2()\n\n\nex2.a\n\n1\n\n\n\nex2.up()\n\n\nex2.a\n\n2\n\n\n\nex2.up()\nex2.up()\nex2.up()\nex2.up()\nex2.a\n\n6\n\n\n문제3 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있고, 변수 a의 초기값은 0이다.\n- 클래스에는 up(),down(), show()라는 메소드가 있는데, 각각은 a의 값을 1증가시키고, 1감소시키고, a의 값을 출력하는 기능을 한다.\n(풀이)\n\nclass Klass3:\n    a=0\n    def up(self):\n        self.a=self.a+1\n        \n    def down(self):\n        self.a=self.a-1\n        \n    def show(self):\n        print(self.a)\n\n\nex3=Klass3()\n\n\nex3.show()\n\n0\n\n\n\nex3.up()\nex3.show()\n\n1\n\n\n\nex3.down()\nex3.show()\n\n0\n\n\n문제4 아래의 클래스를 구현하라.\n- 클래스내에는 변수 url이 있고, 초기값은 url1이다.\nurl1:’https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true’\n- 클래스에는 show()라는 메소드를 가지는데, 아래와 같은 기능을 한다. - 기능1: url의 그림을 출력 - 기능2: ‘당신은 이 그림을 \\(n\\)번 보았습니다.’ 출력.\\(n\\)은 그림을 본 횟수\n\nurl1\n\n'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n\n\n(풀이)\n\nclass Klass4:\n    n = 1\n    url = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n    def show(self):\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(\"당신은 이 이미지를 {}번 보았습니다\".format(self.n))\n        self.n = self.n+1 \n\n\na=Klass4()\n\n\na.show()\n\n\n\n\n당신은 이 이미지를 3번 보았습니다\n\n\n\nb=Klass4()\nb.url=url2\n\n\nb.show() # a와 독립적으로..\n\n\n\n\n당신은 이 이미지를 2번 보았습니다\n\n\n\n\n숙제\n\nimport numpy as np\n\n\nnp.random.choice([\"가위\",\"바위\",\"보\"])\n\n'보'\n\n\n\nclass homework:\n    def show(self):\n        self.work=np.random.choice([\"가위\",\"바위\",\"보\"])\n        print(self.work)\n\n\nwork = homework()\n\n\nwork.show()\n\n가위"
  },
  {
    "objectID": "posts/4. Class/python 10_0509.html",
    "href": "posts/4. Class/python 10_0509.html",
    "title": "파이썬 (0509) 10주차",
    "section": "",
    "text": "# jupyter notebook을 통한 ppt발표(슬라이드)가 가능. 관련 프로그램을 깔아야한다."
  },
  {
    "objectID": "posts/4. Class/python 10_0509.html#밈meme과-클래스",
    "href": "posts/4. Class/python 10_0509.html#밈meme과-클래스",
    "title": "파이썬 (0509) 10주차",
    "section": "밈(Meme)과 클래스",
    "text": "밈(Meme)과 클래스\n\n신혜선의 어쩔티비\n- 밈이란? 유전자처럼 복제가능한 something"
  },
  {
    "objectID": "posts/4. Class/python 10_0509.html#클래스",
    "href": "posts/4. Class/python 10_0509.html#클래스",
    "title": "파이썬 (0509) 10주차",
    "section": "클래스",
    "text": "클래스\n- 클래스에 대한 비유적 설명 (implicit definition)\n\n클래스는 과자틀과 비슷하다. 클래스란 똑같은 무엇인가를 계속 만들어 낼 수도 있는 설계도면이고 객체란 클래스로 만든 피조물을 뜻한다. (점프투파이썬)\nIn object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods). // 객체 지향 프로그래밍에서 클래스는 상태(멤버 변수) 및 동작 구현(멤버 함수 또는 메서드)에 대한 초기 값을 제공하는 객체 생성을 위한 확장 가능한 프로그램 코드 템플릿입니다.\nhttp://www.tcpschool.com/java/java_class_intro\nhttps://javacpro.tistory.com/29\nhttps://ko.wikipedia.org/wiki/%ED%81%B4%EB%9E%98%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)\n\n- 클래스에 대한 명시적 정의 (교수님 생각)\n\n클래스는 복제, 변형, 재생산을 용이하게 하기 위해 만들어진 확장가능한 프로그램의 코드의 단위(extensible program-code-template)이다. 즉 밈이다.\n\n- 클래스도 결국 밈이다. 생각해보면 클래스를 만들고 사용하는 과정이 인터넷에서 밈을 만들고 노는것과 닮아 있다.\n\n1단계: 개념의 인지 (이거 재미있겠다 밈으로 만들자 // 이 코드 쓸모있다, 이 코드를 쉽게 찍어내는 클래스로 만들어두자)\n2단계: 복사하고 싶은 속성을 추려 복사가능한 틀을 만듬 (밈 초기 컨텐츠 // 클래스의 선언)\n3단계: 밈에서 다양한 컨텐츠를 재생산, 때로는 변형하여 재생산, 때로는 그것을 응용한 다른밈을 만듬 (밈화 // 클래스의 인스턴스화, 상속, 메소드오버라이딩)"
  },
  {
    "objectID": "posts/4. Class/python 10_0509.html#멈춰-밈을-컨텐츠화",
    "href": "posts/4. Class/python 10_0509.html#멈춰-밈을-컨텐츠화",
    "title": "파이썬 (0509) 10주차",
    "section": "“멈춰” 밈을 컨텐츠화",
    "text": "“멈춰” 밈을 컨텐츠화\n- 멈춰 밈을 이용하여 코스피하락, 수강신청 매크로 등 다양한 예제를 만들자\n\nfrom IPython.core.display import HTML\n\n\n예비학습\n\n문자열포맷팅 (문자열끼워넣기)\n- 예제1\n\n'제 이름은 {}입니다.'.format('보람')\n\n'제 이름은 보람입니다.'\n\n\n-예제2\n\n'제 이름은 {}이고 사는 곳은 {}입니다.'.format('보람','전주')\n\n'제 이름은 보람이고 사는 곳은 전주입니다.'\n\n\n\n'제 이름은 {}이고 사는 곳은 {}입니다.'.format('전주','보람')\n\n'제 이름은 전주이고 사는 곳은 보람입니다.'\n\n\n-예제3\n\n'제 이름은 {name}이고 사는 곳은 {add}입니다.'.format(name='보람',add='전주')\n\n'제 이름은 보람이고 사는 곳은 전주입니다.'\n\n\n\n'제 이름은 {name}이고 사는 곳은 {add}입니다.'.format(add='전주',name='보람')\n\n'제 이름은 보람이고 사는 곳은 전주입니다.'\n\n\n\n\nHTML\n-예제1\n\nHTML(\"&lt;p&gt; 이름 &lt;/p&gt;\")\n\n 이름 \n\n\n-예제2\n\nHTML(\"&lt;img src='https://stat.jbnu.ac.kr/sites/stat/atchmnfl_mngr/imageSlide/469/temp_1573001043314100.jpg'&gt;\")\n\n\n\n\n- 예제3\n\nHTML(\"&lt;p&gt; 전북대학교 &lt;/p&gt;&lt;img src='https://stat.jbnu.ac.kr/sites/stat/atchmnfl_mngr/imageSlide/469/temp_1573001043314100.jpg'&gt;\")\n\n 전북대학교 \n\n\n\n\nHTML을 이용한 밈생성\n- 밈을 위한 이미지 주소\n\nurl1='https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\nurl2='https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop2.png?raw=true'\n\n- 예제1: 원본\n\nhtmlstr.format(title='학교폭력',url=url1,end='멈춰~~~~')\n\n\"&lt;p&gt; 학교폭력 &lt;/p&gt; &lt;img src='https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'&gt; &lt;p&gt; 멈춰~~~~ &lt;/p&gt;\"\n\n\n\nhtmlstr = \"&lt;p&gt; {title} &lt;/p&gt; &lt;img src='{url}'&gt; &lt;p&gt; {end} &lt;/p&gt;\"\nHTML(htmlstr.format(title='학교폭력',url=url1,end='멈춰~~~~'))\n\n 학교폭력    멈춰~~~~ \n\n\n- 예제2: 코스피하락 멈춰어\n\nHTML(htmlstr.format(title='코스피하락',url=url1,end='멈춰~~~~'))\n\n 코스피하락    멈춰~~~~ \n\n\n- 예제3: 매크로 멈춰어\n\nHTML(htmlstr.format(title='수강신청매크로',url=url1,end='멈춰~~~~'))\n\n 수강신청매크로    멈춰~~~~ \n\n\n\n\n\n함수를 만들어서 코드를 관리\n- 함수의 선언\n\ndef stop():\n    htmlstr = \"&lt;p&gt; {title} &lt;/p&gt; &lt;img src='{url}'&gt; &lt;p&gt; {end} &lt;/p&gt;\"\n    display(HTML(htmlstr.format(title=ttl,url=url,end=end)))   #display로 받아주는게 좋다\n    \n\n- 사용\n\nttl = '돈쓰는거'\nurl = url1\nend = '멈춰 ㅠ'\nstop()\n\n 돈쓰는거    멈춰 ㅠ \n\n\n\nttl = '술담배'\nurl = url1\nend = '멈춰!'\nstop()\n\n 술담배    멈춰! \n\n\n\nttl = '코코 주워먹는거'\nurl = url2\nend = '멈춰!!!!!'\nstop()\n\n 코코 주워먹는거    멈춰!!!!! \n\n\n\n\n클래스를 만들어서 관리\n\nclass STOOOP: #STOOOP은 양식문서의 이름이라 생각하자.\n    title = \"학교폭력\"\n    url = url1\n    end = \"멈춰~~~~\"\n    def stop(self):  # 규칙1: class안에서 정의된 함수는 첫번째 입력으로 무조건 self를 받는다.\n        htmlstr = \"&lt;p&gt; {title} &lt;/p&gt; &lt;img src='{url}'&gt; &lt;p&gt; {end} &lt;/p&gt;\"\n        display(HTML(htmlstr.format(title=self.title,url=self.url,end=self.end))) \n        # 규칙2: class안에서 정의된 변수 (title, url, end)를 쓰려면 \"self.변수이름\"의 형태로 써야함\n\n\nt=1 학교폭력멈춰\n\nschool = STOOOP()   \n\n# STOOOP이라는 이름의 양식문서를 복사해 하나의 hwp 파일을 만들어 밈을 생성하고 그 파일이름을 school이라고 하자.\n# 그러니가 STOOP.hwp 와 school.hwp가 잇다..\n\n\nschool.title\n\n'학교폭력'\n\n\n\nschool.url\n\n'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n\n\n\nschool.end\n\n'멈춰~~~~'\n\n\n\nschool.stop()\n\n 학교폭력    멈춰~~~~ \n\n\n\n\nt=2 코스피하락멈춰\n\nkospi = STOOOP() # 코스피하락 멈춰를 위해 STOOP.hwp양식문서에서 하나의 밈을 찍어낸다. (kospi.hwp)\nkospi.title = '코스피하락' #제목변경\n\n\nkospi.stop()\n\n 코스피하락    멈춰~~~~ \n\n\n\n\nt=3 수강신청매크로 멈춰\n\nmacro = STOOOP()\n\n\nmacro.title, macro.url, macro.end\n\n('학교폭력',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\nmacro.title = \"수강신청매크로\"\n\n\nmacro.stop()\n\n 수강신청매크로    멈춰~~~~ \n\n\n\n\nt=4 수강신청 매크로 멈춰 끝 물결대신 느낌표\n\nmacro.end = \"멈춰!!!!!!!!\"\n\n\nmacro.title, macro.url, macro.end\n\n('수강신청매크로',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰!!!!!!!!')\n\n\n\nmacro.stop()\n\n 수강신청매크로    멈춰!!!!!!!! \n\n\n\n\nt=5 코스피하락 다시 출력 (함수와 비교했을때 실수 발생x)\n\nkospi.stop()\n\n 코스피하락    멈춰~~~~ \n\n\n\n\nt=6 학교폭력 멈춰와 코스피하락 멈춰 동시에 출력\n\nschool.stop()\n\n 학교폭력    멈춰~~~~ \n\n\n\nkospi.stop()\n\n 코스피하락    멈춰~~~~ \n\n\n\n\nt=7 “학교폭력 멈춰”의 이미지를 신혜선으로 변경, “코스피하락 멈춰”의 title을 ’KOSPI하락’으로 변경\n\nschool.url = url2\nkospi.title = \"KOSPI하락\"\n\n\nschool.stop()\n\n 학교폭력    멈춰~~~~ \n\n\n\nkospi.stop()\n\n KOSPI하락    멈춰~~~~ \n\n\n\n\n\n숙제\n“수강신청 멈춰”의 이미지를 신혜선으로 변경하고 출력해볼 것\nmacro.url 변경 macro.stop() 을 사용\n\nmacro.url=url2\n\n\nmacro.stop()\n\n 수강신청매크로    멈춰!!!!!!!!"
  },
  {
    "objectID": "posts/4. Class/python 13_0525.html",
    "href": "posts/4. Class/python 13_0525.html",
    "title": "파이썬 (0525) 13주차",
    "section": "",
    "text": "import numpy as np"
  },
  {
    "objectID": "posts/4. Class/python 13_0525.html#클래스-공부-5단계",
    "href": "posts/4. Class/python 13_0525.html#클래스-공부-5단계",
    "title": "파이썬 (0525) 13주차",
    "section": "클래스 공부 5단계",
    "text": "클래스 공부 5단계\n- 지난시간까지 배운것: RPC자료형에 한정해서 print() 등의 기능을 조작할 수 있었다. (재정의 할 수 있었다.)\n- 이번시간에 배울것: 특정자료형에 한정하여 print 이외의 파이썬 내부기능을 조작하여 보자. (재정의하여 보자)\n\nmotive\n\na=1\nb=2\n\n\ntype(a)\n\nint\n\n\n\na+b\n\n3\n\n\n\na라는 인스턴스와 b라는 인스턴스를 + 라는 기호가 연결하고 있다.\n\n\na=[1,2]\nb=[3,4]\na+b\n\n[1, 2, 3, 4]\n\n\n\na라는 인스턴스와 b라는 인스턴스를 + 라는 기호가 연결하고 있다.\n\n- 동작이 다른 이유?\n\n클래스를 배우기 이전: int자료형의 + 는 “정수의 덧셈”을 의미하고 list 자료형의 +는 “자료의 추가”를 의미한다.\n클래스를 배운 이후: 아마 클래스는 + 라는 연산을 정의하는 숨겨진 메소드가 있을 것이다. (print가 그랬듯이) 그런데 int 클래스에서는 그 메소드를 “정수의 덧셈”이 되도록 정의하였고 list클래스에서는 그 메소드를 “자료의 추가”를 의미하도록 정의하였다.\n\n\na=1\nb=2\n\n\na.__add__\n\n&lt;method-wrapper '__add__' of int object at 0x70c560&gt;\n\n\n\ndir(a)\n\n['__abs__',\n '__add__',\n '__and__',\n '__bool__',\n '__ceil__',\n '__class__',\n '__delattr__',\n '__dir__',\n '__divmod__',\n '__doc__',\n '__eq__',\n '__float__',\n '__floor__',\n '__floordiv__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getnewargs__',\n '__gt__',\n '__hash__',\n '__index__',\n '__init__',\n '__init_subclass__',\n '__int__',\n '__invert__',\n '__le__',\n '__lshift__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__neg__',\n '__new__',\n '__or__',\n '__pos__',\n '__pow__',\n '__radd__',\n '__rand__',\n '__rdivmod__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rfloordiv__',\n '__rlshift__',\n '__rmod__',\n '__rmul__',\n '__ror__',\n '__round__',\n '__rpow__',\n '__rrshift__',\n '__rshift__',\n '__rsub__',\n '__rtruediv__',\n '__rxor__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__sub__',\n '__subclasshook__',\n '__truediv__',\n '__trunc__',\n '__xor__',\n 'bit_length',\n 'conjugate',\n 'denominator',\n 'from_bytes',\n 'imag',\n 'numerator',\n 'real',\n 'to_bytes']\n\n\n\na.__add__(b)\n\n3\n\n\n\nb.__add__(a)\n\n3\n\n\n\na=[1,2]\nb=[3,4]\n\n\na.__add__(b)\n\n[1, 2, 3, 4]\n\n\n\nb.__add__(a)\n\n[3, 4, 1, 2]\n\n\n- a+b는 사실 내부적으로 a.__add__(b)의 축약구문이다. 따라서 먄악 a.__add__(b)의 기능을 바꾸면 (재정의하면) a+b의 기능도 바뀔 것이다.\n\n\n__add__\n- 예제\n\nclass Student:\n    def __init__(self, age=20.0, semester=1):\n        self.age = age\n        self.semester = semester\n        print(\"입학을 축하합니다. 나이는 {}이고 현재 {}학기 입니다.\".format(self.age, self.semester))\n    def __add__(self,val): \n        # val == 0: 휴학 \n        # val == 1: 등록 \n        if val==0: \n            self.age=self.age+0.5\n        elif val==1:\n            self.age=self.age+0.5 \n            self.semester= self.semester+1 \n    def _repr_html_(self):\n        html_str = \"\"\"\n        나이: {}&lt;br/&gt;\n        학기: {}&lt;br/&gt;\n        \"\"\"\n        return html_str.format(self.age, self.semester)\n\n\niu = Student()\n\n입학을 축하합니다. 나이는 20.0이고 현재 1학기 입니다.\n\n\n\niu.semester\n\n1\n\n\n\niu  # 클래스가 저장되어있는 주소를 _repr_html_ 통해서 바꿔즘\n\n\n        나이: 20.0\n        학기: 1\n        \n\n\n\niu + 1 #1학년 2학기 등록\niu\n\n\n        나이: 20.5\n        학기: 2\n        \n\n\n\niu + 0 # 휴학\niu\n\n\n        나이: 21.0\n        학기: 2\n        \n\n\n- 연산을 연속으로 하고 싶다.\n\niu + 1 + 0 + 0 + 0 + 0\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n\n- 에러의 이유?\n\n1+1+1 #이거는 되는데?\n\n3\n\n\n\n(1+1)+1\n\n3\n\n\n\n_a = (1+1)\ntype(_a)\n\nint\n\n\n\n_a + 1    # 이 연산은 int인스턴스 + int인스턴스 \n\n3\n\n\n(안되는거)\n\niu+1+1\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n\n\n_a=iu+1\n\n\ntype(_a)\n\nNoneType\n\n\n\n_a+1\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n\n- 에러를 해결하는 방법: iu+1의 결과로 Student 클래스의 인스턴스가 리턴되면 된다.\n\nclass Student:\n    def __init__(self, age=20.0, semester=1):\n        self.age = age\n        self.semester = semester\n        print(\"입학을 축하합니다. 나이는 {}이고 현재 {}학기 입니다.\".format(self.age, self.semester))\n    def __add__(self,val): \n        # val == 0: 휴학 \n        # val == 1: 등록 \n        if val==0: \n            self.age=self.age+0.5\n        elif val==1:\n            self.age=self.age+0.5 \n            self.semester= self.semester+1 \n        return self\n    def _repr_html_(self):\n        html_str = \"\"\"\n        나이: {}&lt;br/&gt;\n        학기: {}&lt;br/&gt;\n        \"\"\"\n        return html_str.format(self.age, self.semester)\n\n\niu = Student()\n\n입학을 축하합니다. 나이는 20.0이고 현재 1학기 입니다.\n\n\n\niu + 1   # __add__의 return에 Student클래스의 인스턴스가 리턴되면서 자동으로 __repr_html_()실행\n\n\n        나이: 23.0\n        학기: 4\n        \n\n\n\niu + 1 + 0 + 0 + 0 \n\n\n        나이: 25.0\n        학기: 5\n        \n\n\n\n\n__mul__\n\na=1\nb=1\na*b\n\n1\n\n\n\na.__mul__\n\n&lt;method-wrapper '__mul__' of int object at 0x70c560&gt;\n\n\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} &lt;br/&gt; \n        기록: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions)\n\n\na=RPS()\nb=RPS()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        기록: []\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        기록: []\n        \n\n\n\na*b 해서 승패를 확인하기 위한 클래스를 만들자\n\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n        self.results = list()\n    def __mul__(self,other):\n        self.choose()\n        other.choose()\n        if self.actions[-1]=='가위' and other.actions[-1]=='가위':\n            self.results.append(0)\n            other.results.append(0)\n        if self.actions[-1]=='가위' and other.actions[-1]=='바위':\n            self.results.append(-1)\n            other.results.append(1)\n        if self.actions[-1]=='가위' and other.actions[-1]=='보':\n            self.results.append(1)\n            other.results.append(-1)\n        if self.actions[-1]=='바위' and other.actions[-1]=='가위':\n            self.results.append(1)\n            other.results.append(-1)\n        if self.actions[-1]=='바위' and other.actions[-1]=='바위':\n            self.results.append(0)\n            other.results.append(0)\n        if self.actions[-1]=='바위' and other.actions[-1]=='보':\n            self.results.append(-1)\n            other.results.append(1)\n        if self.actions[-1]=='보' and other.actions[-1]=='가위':\n            self.results.append(-1)\n            other.results.append(1)\n        if self.actions[-1]=='보' and other.actions[-1]=='바위':\n            self.results.append(1)\n            other.results.append(-1)\n        if self.actions[-1]=='보' and other.actions[-1]=='보':\n            self.results.append(0)\n            other.results.append(0)\n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} &lt;br/&gt; \n        액션: {} &lt;br/&gt;\n        승패: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions,self.results)\n\n\na=RPS()\nb=RPS()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: [] \n        승패: []\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: [] \n        승패: []\n        \n\n\n\nfor i in range(5):\n    a*b\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: ['보', '바위', '가위', '가위', '바위'] \n        승패: [1, 0, -1, 0, 1]\n        \n\n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: ['바위', '바위', '바위', '가위', '가위'] \n        승패: [-1, 0, 1, 0, -1]"
  },
  {
    "objectID": "posts/4. Class/python 13_0525.html#숙제",
    "href": "posts/4. Class/python 13_0525.html#숙제",
    "title": "파이썬 (0525) 13주차",
    "section": "숙제",
    "text": "숙제\nRPS클래스에서 player a와 player b를 만들어라. Player a는 [‘가위’,‘보’] 중에 하나를 낼 수 있다. 그리고 Player b는 [‘가위’,‘바위’] 중에 하나를 낼 수 있다. 두 player는 가지고 있는 패를 (같은확률로) 랜덤으로 낸다. (즉 player a가 가위만 내거나 보만 내는 경우는 없다.)\n\n누가 더 유리한가? 이유를 스스로 생각해보라. (이유를 정리하여 숙제로 제출할 필요 없음)\n50000번의 시뮬레이션을 해보고 결과를 분석해보라.\n\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n        self.results = list()\n    def __mul__(self,other):\n        self.choose()\n        other.choose()\n        if self.actions[-1]=='가위' and other.actions[-1]=='가위':\n            self.results.append(0)\n            other.results.append(0)\n        if self.actions[-1]=='가위' and other.actions[-1]=='바위':\n            self.results.append(-1)\n            other.results.append(1)\n        if self.actions[-1]=='보' and other.actions[-1]=='가위':\n            self.results.append(-1)\n            other.results.append(1)\n        if self.actions[-1]=='보' and other.actions[-1]=='바위':\n            self.results.append(1)\n            other.results.append(-1)\n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} &lt;br/&gt; \n        액션: {} &lt;br/&gt;\n        승패: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions,self.results)\n\n\na=RPS(['가위','보'])\nb=RPS(['가위','바위'])\n\n\nfor i in range(50000):\n    a*b\n\n\nsum(a.results)\n\n-12358\n\n\n\nsum(b.results)\n\n12358"
  },
  {
    "objectID": "posts/4. Class/python 11_0516.html",
    "href": "posts/4. Class/python 11_0516.html",
    "title": "파이썬 (0516) 11주차",
    "section": "",
    "text": "from PIL import Image\nimport requests"
  },
  {
    "objectID": "posts/4. Class/python 11_0516.html#클래스-공부-2단계",
    "href": "posts/4. Class/python 11_0516.html#클래스-공부-2단계",
    "title": "파이썬 (0516) 11주차",
    "section": "클래스 공부 2단계",
    "text": "클래스 공부 2단계\n\ninit()\n- STOOOP를 다시 복습\n\nurl1 = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\nurl2 = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop2.png?raw=true'\n\n\nclass STOOOP: \n    title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n\ns1=STOOOP() # STOOOP라는 클래스에서 s1이라는 인스턴스를 만드는 과정\n\n\ns1.title, s1.url, s1.end\n\n('학교폭력!',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\ns1.stop()\n\n학교폭력!\n멈춰~~~~\n\n\n\n\n\n- 왜 s1의 default title이 항상 “학교폭력”이어야 하는가? =&gt; __init__의 개발\n- 성능4: __init__() 함수를 이용하여 “클래스-&gt;인스턴스”의 시점에서 수행하는 일련의 동작들을 묶어서 수행할 수 있음\n\nclass STOOOP: \n    #title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def __init__(self,title):\n        self.title = title\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n- 잘못된사용\n\ns1=STOOOP()  # 이 시점에서 _init_ 이 수행된다!\n\nTypeError: __init__() missing 1 required positional argument: 'title'\n\n\n- 올바른사용\n\ns1=STOOOP(\"수강신청\")  # 이 시점에서 _init_ 이 수행된다!\n\n\ns1.title, s1.url, s1.end\n\n('수강신청',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\ns1.stop()\n\n수강신청\n멈춰~~~~\n\n\n\n\n\n- 잘못된 사용에서 에러가 발생한 이유?\nTypeError: __init__() missing 1 required positional argument: 'title'\n\ns1 = STOOOP() 가 실행되는 순간 __init__() 이 내부적으로 실행된다.\n그런데 __init__()의 첫번째 입력은 self 는 입력안해도 무방했음. (현재는 메소드와 함수를 구분하는 문법으로 self를 이해하면 된다.) 그런데 두번째 입력은 title은 입력을 해야했음.\n그런데 title을 입력하지 않아서 발생하는 에러\n\n- __init__(self, arg1, arg2, ...) 함수에 대하여 - 엄청나게 특별해 보이지만 사실 몇가지 특별한 점을 제외하고는 어떠한 마법도 없는 함수이다. - 특별한점1: 첫번째 입력으로 반드시 self를 넣어야함. (이거 ㄴ사실 클래스 내의 메소드 거의 다 그러하다.) - 특별한점2: 클래스에서 인스턴스를 만드는 시점에 자동으로 생성됨 - 특별한점3: __init__(self, arg1, arg2, ...) 의 입력중 self 이외의 입력들은 “클래스-&gt;인스턴스”의 시점에서 “인스턴스이름 = 클래스이름(arg1,arg2,…)”와 같이 사용한다. (이 예제의 경우 STOOOP(title)와 같이 사용해야함)\n- title 이 디폴트로 들어가는 상황도 불편했지만, title을 명시적으로 넣지 않으면 에러가 발생하는 것도 불편하다?\n\nclass STOOOP: \n    #title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def __init__(self,title=None):\n        self.title = title\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n\ns2=STOOOP()\ns3=STOOOP('KOSPI하락')\n\n\ns2.stop()\n\nNone\n멈춰~~~~\n\n\n\n\n\n\n제목이 없으면 없는데로\n\n\ns3.stop()\n\nKOSPI하락\n멈춰~~~~\n\n\n\n\n\n\n\nself의 의미\n- 이전 예제를 다시 복습\n\nclass Klass4:\n    n = 1\n    url = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n    def show(self):\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(\"당신은 이 이미지를 {}번 보았습니다\".format(self.n))\n        self.n = self.n+1 \n\n\nk4=Klass4()\n\n\nk4.show()\n\n\n\n\n당신은 이 이미지를 5번 보았습니다\n\n\n- 위의 예제는 아래와 같이 구현할 수도 있다.\n\nclass Klass4:\n    n = 1\n    url = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n    def show(self):\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(\"당신은 이 이미지를 {}번 보았습니다\".format(self.n))\n       # self.n = self.n+1 \n\n\nk4=Klass4()\n\n\nk4.n\n\n1\n\n\n\nk4.show()\n\n\n\n\n당신은 이 이미지를 1번 보았습니다\n\n\n\nk4.n = k4.n +1\n\n\nk4.show()\n\n\n\n\n당신은 이 이미지를 2번 보았습니다\n\n\n\nk4.n = k4.n + 1\n\n\nk4.show()\n\n\n\n\n당신은 이 이미지를 3번 보았습니다\n\n\n- 결국에는 k4.n = k4.n +1 의 기능을 구현하여 넣은 것이 self.n = slef.n + 1 이다.\n- 따라서 self는 k4에 대응한다. 즉 self는 인스턴스의 이름에 대응한다. 우리가 하고 싶은 것은 클래스를 선언하는 시점에 인스턴스가 생성된 이후의 시점에 대한 어떠한 동작들을 정의하고 싶음. 그런데 클래스를 설계하는 시점에서는 인스턴스의 이름이 정해지지 않았으므로 (아직 인스턴스가 태어나지도 않음) 이러한 동작들을 정의하기 불편하다. 그래서 클래스를 설계하는 시점에서 그 클래스로부터 만들어지는 인스턴스는 그냥 self라는 가칭으로 부른다. (굳이 비유하면 self는 인스턴스의 태명같은것..)\n\n# 여기서 말하는 인스턴스는 정확하게 무엇인가? 그냥.. self, k4 와 같이 이름을 말하는건가?\n\n- self의 의미는 (이후에 만들어질) 인스턴스의 이름이다. (즉 self는 인스턴스의 태명같은 것임)\n\n\n파이썬의 비밀1\n탐구 : 인스턴스의 자료형이 뭔지 탐구하자!\n- 아래의 두 클래스를 비교해보자\n\nclass STOOOP: \n    #title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def __init__(self,title=None): \n        self.title = title\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n\nclass Klass4:\n    n = 1\n    url = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n    def show(self):\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(\"당신은 이 이미지를 {}번 보았습니다\".format(self.n))\n        #self.n = self.n+1     \n\n- 인스턴스를 생성해보자.\n\nk4=Klass4()\ns1=STOOOP()\n\n- 타입을 알아보자.\n\nk4?\n\n\nType:        Klass4\nString form: &lt;__main__.Klass4 object at 0x7fc527259890&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\n\ns1?\n\n\nType:        STOOOP\nString form: &lt;__main__.STOOOP object at 0x7fc527259bd0&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\n-??? 타입은 자료형, 즉 int, float, list 이런 것 아니었나?\n\na=[1,2,3]\na?\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n\na=3.14\na?\n\n\nType:        float\nString form: 3.14\nDocstring:   Convert a string or number to a floating point number, if possible.\n\n\n\n\n- 그런데 지금 k4, s1의 타입은 Klass4, STOOOP이다.\n\n가설1: 사실 파이썬 내부에 Klass4, STOOOP 이라는 자료형이 있었다. 그런데 내가 만든 k4, s1이 우연히 그 자료형을 따르는 것 (억지스러움)\n\n\nclass SoWhatTV:\n    title='어쩔티비'\n\n\na=SoWhatTV()\na?\n\n\nType:        SoWhatTV\nString form: &lt;__main__.SoWhatTV object at 0x7fc5259e6810&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\n\n# 잉.. 우연히 자료형이 sowhattv가 잇을거 같진 않은데. .가설1이 맞진 않는거 같다\n\n\n가설2: type이 list인것은 사실 list라는 클래스에서 생긴 인스턴스이다. -&gt; 리스트자료형을 찍어낼 수 있는 어떠한 클래스가 내부적으로 존재할 것이다.\n\n깨달음1\n- 가설2가 맞다면 아래는 모두 어딘가에서 찍혀진 인스턴스이다.\n\na=[1,2,3]\na?\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n\na='1'\na?\n\n\nType:        str\nString form: 1\nLength:      1\nDocstring:  \nstr(object='') -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.\n\n\n\n\n- 그리고 위의 a=[1,2,3]과 같은 것들은 모두 “클래스-&gt;인스턴스”에 해당하는 과정이었음\n깨달음2\n- 생각해보니까 아래와 같이 list를 선언하는 방식도 있었음\n\na=list()\na\n\n[]\n\n\n\nlist라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다.\n\n- 아래도 가능\n\na=list((1,2,3))\na?\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n- list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법. 여기에서 (1,2,3)은 __init__()의 입력이다.\n깨달음3\n- 각 자료형마다 특수한 기능들이 있다.\n\na=[1,2,3]\na\n\n[1, 2, 3]\n\n\n- a. + tab 을 하면 append, clear 등등이 나온다.\n- 이러한 기능은 지금까지 우리가 “list자료형 특수기능들” 이라고 부르면서 사용했다. 그런데 a가 list클래스에서 생성된 인스턴스라는 관점에서 보면 이러한 기능들은 list클래스에서 정의된 메소드라고 볼 수 있다.\n깨달음4\n- a.f()는 f(a)로 해석가능하다고 했다. 이 해석에 따르면 메소드의 첫번째 입력은 메소드가 소속된 인스턴스라고 해석할 수 있다.\n- 동일한 논리로 아래의 코드는 stop()의 입력에서 s1을 넣는다는 의미이다.\n\ns1.stop()   #s1자체가 입력이 되는것\n\nNone\n멈춰~~~~"
  },
  {
    "objectID": "posts/4. Class/python 11_0516.html#숙제",
    "href": "posts/4. Class/python 11_0516.html#숙제",
    "title": "파이썬 (0516) 11주차",
    "section": "숙제",
    "text": "숙제\n아래의 조건에 맞는 클래스를 생성하라.\n\n[‘가위’,‘바위’]와 같은 리스트를 입력으로 받아 인스턴스를 생성한다.\n위의 리스트에서 하나의 값을 뽑는 메소드 f를 가지고 있다.\n\n\n# # 너무 헷 갈ㄹ  ㅕ .. \n\n# # 사용예시\n\n\n# a = Klass(['가위','바위'])\n# a.f() # 가위가 1/2 바위가 1/2의 확률로 출력 \n# b = Klass(['가위','바위','보'])\n# b.f() # 가위, 바위, 보가 1/3의 확률로 출력"
  },
  {
    "objectID": "posts/4. Class/python 14_0606.html",
    "href": "posts/4. Class/python 14_0606.html",
    "title": "파이썬 (0606) 14주차",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd"
  },
  {
    "objectID": "posts/4. Class/python 14_0606.html#클래스공부-7단계",
    "href": "posts/4. Class/python 14_0606.html#클래스공부-7단계",
    "title": "파이썬 (0606) 14주차",
    "section": "클래스공부 7단계",
    "text": "클래스공부 7단계\n\n함수공부\n- 다시 함수를 공부해보자\n\ndef f(x):\n    return x+1\n\n\nf(3)\n\n4\n\n\n- 함수의 사용방법? - 입력으로 변수 x를 받음 = 입력으로 인스턴스 x를 받음 - 출력으로 변수 x+1을 리턴 = 출력으로 인스턴스 x+1을 리턴\n- 사실1: 파이썬에서 함수는 인스턴스를 입력으로 받고 인스턴스를 출력한다.\n- 함수의 자료형?\n\nf\n\n&lt;function __main__.f(x)&gt;\n\n\n\n?f\n\n\nSignature: f(x)\nDocstring: &lt;no docstring&gt;\nFile:      ~/Dropbox/coco/posts/python/&lt;ipython-input-2-9897bae5f29b&gt;\nType:      function\n\n\n\n\n\ntype이 function 이다.\nf는 function 의 class의 instance이다.\n결국 f도 하나의 오브젝트에 불과하다.\n\n- 사실2: 함수도 결국 인스턴스이다. -&gt; 함수의 입력으로 함수를 쓸 수도 있고 함수의 출력으로 함수가 나올 수도 있다.\n\n\n함수형 프로그래밍\n(예제1) 숫자입력, 함수출력\n\ndef f(a):\n    def _f(x):\n        return (x-a)**2\n    return _f\n\n\ng=f(10)    # g(x) = (x-10)**2\n\n\ng(2)    # (8)**2\n\n64\n\n\n\n해석: f(a)는 a를 입력으로 받고 g(x) = (x-a)^2 함수를 리턴해주는 함수\n\n(예제1)의 다른표현: 익명함수 lambda\n표현1\n\ndef f(a):\n    _f = lambda x: (x-a)**2   # lambda x : (x-a)**2 가 실행되는 순간 함수오브젝트가 만들어지고 그것이 _f로 저장됨\n    return _f\n\n\ng=f(10)    # g(x) = (x-10)**2\n\n\ng(2)\n\n64\n\n\n표현2\n\ndef f(a):\n    return lambda x: (x-a)**2\n\n\ng=f(10)    # g(x) = (x-10)**2\n\n\ng(2)\n\n64\n\n\n\nlambda x: (x-a)**2 는 \\(\\text{lambda}(x) = (x-a)^2\\) 의 느낌으로 기억하면 쉽다.\nlambda x: (x-a)**2 는 “아직 이름이 없는 함수 오브젝트를 (가칭 lmabda라고 하자) 만들고 기능은 x를 입력으로 하고 (x-a)**2를 출력하도록 하자” 라는 뜻이로 해석\n\n\n(lambda x,y : x&lt;y)(2,3)\n\nTrue\n\n\n\nf=lambda x,y : x&lt;y   # 위와 같은 코드\nf(2,3)\n\nTrue\n\n\n(예제2) 함수입력, 숫자출력\n\ndef f(x):\n    return x**2\n\n\nf(3)\n\n9\n\n\n\ndef d(f,x):    # 함수를 입력을 받는 함수를 정의\n    h=0.0000000000001\n    return (f(x+h)-f(x)) / h\n\n\\[f'(x)\\approx \\frac{f(x+h)-f(x)}{h}\\]\n\n\\(h\\) 의 값이 점점 0에 가까울수록 등호에 가까워짐\n\n\nd(f,4)   # f'(4) = 2*4 = 8\n\n8.029132914089132\n\n\n(예제3) 함수입력, 함수출력\n\ndef f(x):\n    return x**2\n\n\ndef derivate(f):\n    def df(x):\n        h=0.0000000000001\n        return (f(x+h)-f(x)) / h\n    return df\n\n\nff = derivate(f)  # f미분\n\n\nff(10)  #f의 도함수\n\n19.895196601282805\n\n\n원래함수 시각화\n\nx=np.linspace(-1,1,100)\nplt.plot(x,f(x))\n\n\n\n\n도함수 시각화\n\nx=np.linspace(-1,1,100)\nplt.plot(x,ff(x))\n\n\n\n\n(예제3)의 다른표현\n\ndef f(x):\n    return x**2\n\n\ndef derivate(f):\n    h=0.0000000000001\n    return lambda x:(f(x+h)-f(x)) / h\n\n\nff=derivate(f)\n\n\nff(10)\n\n19.895196601282805\n\n\n(예제4) 함수들의 리스트\n\n# # 리스트의 컴마 컴마 안에 들어갈 수 있는것은 \n# [인스턴스, 인스턴스, 인스턴스]\n# [오브젝트, 오브젝트, 오브젝트]\n# [함수오브젝트, 함수오브젝트, 함수오브젝트]\n# # ....\n\n\nflst = [lambda x:x, lambda x:x**2, lambda x:x**3]\nflst\n\n[&lt;function __main__.&lt;lambda&gt;(x)&gt;,\n &lt;function __main__.&lt;lambda&gt;(x)&gt;,\n &lt;function __main__.&lt;lambda&gt;(x)&gt;]\n\n\n\nfor f in flst:\n    print(f(2))\n\n2\n4\n8\n\n\n\nfor f in flst:\n    plt.plot(x,f(x),'--')\n\n\n\n\n위 아래 동일\n\nplt.plot(x, (lambda x:x)(x),'--')\nplt.plot(x, (lambda x:x**2)(x),'--')\nplt.plot(x, (lambda x:x**3)(x),'--')\n\n\n\n\n\n\n정리\n- 지금까지 개념 - 함수: 변수를 입력으로 받아서 변수를 출력하는 개념 - 변수: 어떠한 값을 저장하는 용도로 쓰이거나 함수의 입력 혹은 출력으로 사용함\n- 파이썬의 함수형프로그래밍을 잘하려면? - 변수든 함수든 둘다 인스턴스임 - 변수를 함수처럼: 메소드 - 함수를 변수처럼(\\(\\star\\)) : 함수자체를 함수의 입력으로 혹은 출력으로 쓸 수도 있음. 함수를 특정 값처럼 생각해서 함수들의 list를 만들 수도 있다.\n\n\ncollable object\n- 함수 오브젝트의 비밀?\n\nf = lambda x: x+1\n\n\nf(4)\n\n5\n\n\n\n?f\n\n\nSignature: f(x)\nDocstring: &lt;no docstring&gt;\nFile:      ~/Dropbox/coco/posts/python/&lt;ipython-input-66-1a55436594c9&gt;\nType:      function\n\n\n\n\n\ndir(f)\n\n['__annotations__',\n '__call__',\n '__class__',\n '__closure__',\n '__code__',\n '__defaults__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__get__',\n '__getattribute__',\n '__globals__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__kwdefaults__',\n '__le__',\n '__lt__',\n '__module__',\n '__name__',\n '__ne__',\n '__new__',\n '__qualname__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__']\n\n\n\nset(dir(f)) & {'__call__'}\n\n{'__call__'}\n\n\n\n함수 오브젝트에는 숨겨징 기능 __call__이 있다.\n\n\nf.__call__(3)    # f(3)\n\n4\n\n\n\nf.__call__(4)   # f(4)\n\n5\n\n\n\n여기에 우리가 정의한 내용이 있따.\n\ncall 만 정의를 해주면 함수처럼 쓸 수 있다 ?! -&gt; list의 dir 확인해보면 call 없음\n- 함수처럼 쓸 수 없는 인스턴스는 단지 call이 없는 것일 뿐이다.\n\nclass Klass:\n    def __init__(self):\n        self.name = 'boram'\n\n\na=Klass()\n\n\na()\n\nTypeError: 'Klass' object is not callable\n\n\n\nTypeError: ‘Klass’ object is not callable\n\n\nclass Klass2(Klass):  # 상속\n    def __call__(self):\n        print(self.name)\n\n\nb=Klass2()\n\n\nb()\n\nboram\n\n\n\nb는 collable obeject 라는 의미. 즉 숨겨진 메서드로 __call__를 가진 오브젝트!\nKlass는 collable object를 만들지 못하지만 Klass2는 collable object를 만든다.\n\n- 클래스로 함수를 만들기\n\nclass AddConstant:\n    def __init__(self,c):\n        self.c = c\n    def __call__(self,a):\n        return a + self.c\n\n\nf = AddConstant(3)   # collabe object 생성, f.c에는 3이 저장되어 있음.\n\n\nf(7)   # f.c와 7을 더하는 기능을 수행, # f(x) = x+3 을 수행함\n\n10\n\n\n\nf(10)\n\n13\n\n\n- 클래스도 일종의 오브젝트이고 함수처럼 Klass()와 같이 사용하여 인스턴스를 만들었음. -&gt; Klass.__call__()는 Klass()와 같은 역할을 할 것이다.\n\nclass Klass:\n    def __init__(self):\n        self.name='coco'\n    \n\n\na=Klass.__call__()   # 이것이 a=Klass()와 같은 효과\n\n\na.name\n\n'coco'\n\n\n\n\n파이썬의 비밀 1~4\n\n파이썬의 비밀1: 자료형은 클래스의 비밀이다.(11주차)\n파이썬의 비밀2: 클래스에는 __str__처럼 숨겨진 메서드가 존재한다. 이를 이용하여 파이썬 내부의 기능을 가로챌 수 있다.(12주차0523)\n파이썬의 비밀3: 주피터노트북에서는 “오브젝트이름+엔터” 를 쳐서 나오는 출력은 __repr__로 가로챌 수 잇다.(주피터의 비밀)\n파이썬의 비밀4: 함수와 클래스는 숨겨진 메서드에 __call__을 가진 오브젝트일 뿐이다."
  },
  {
    "objectID": "posts/4. Class/python 14_0606.html#클래스공부-8단계",
    "href": "posts/4. Class/python 14_0606.html#클래스공부-8단계",
    "title": "파이썬 (0606) 14주차",
    "section": "클래스공부 8단계",
    "text": "클래스공부 8단계\n\nfor문의 복습\n- 아래와 같은 예제들을 관찰하여 for문을 복습하자.\n(예제1)\n\nfor i in [1,2,3,4]:\n    print(i)\n\n1\n2\n3\n4\n\n\n(예제2)\n\nfor i in (1,2,3,4):\n    print(i)\n\n1\n2\n3\n4\n\n\n(예제3)\n\nfor i in'1234':\n    print(i)\n\n1\n2\n3\n4\n\n\n(예제4)\n\na=5\nfor i in a:\n    print(i)\n\nTypeError: 'int' object is not iterable\n\n\n\n5라고 출력되어야 하지 않나?\n\n- 의문1:\nfor i in ???:\n    print(i)\n에서 ??? 자리에 올수 있는 것이 무엇일까?\n(예제5)\n상황1\n\nlst = [[1,2,3,4],[3,4,5,6]]\nfor l in lst:\n    print(l)\n\n[1, 2, 3, 4]\n[3, 4, 5, 6]\n\n\n상황2\n\ndf=pd.DataFrame(lst)\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n1\n2\n3\n4\n\n\n1\n3\n4\n5\n6\n\n\n\n\n\n\n\n\nfor i in df:\n    print(i)\n\n0\n1\n2\n3\n\n\n칼럼이름들이 나오는 것 같음 -&gt; 확인해보자\n\ndf.columns = pd.Index(['X'+str(i) for i in range(1,5)])\ndf\n\n\n\n\n\n\n\n\nX1\nX2\nX3\nX4\n\n\n\n\n0\n1\n2\n3\n4\n\n\n1\n3\n4\n5\n6\n\n\n\n\n\n\n\n\nfor i in df:\n    print(i)\n\nX1\nX2\nX3\nX4\n\n\n- 의문2: for의 출력결과는 어떻게 예측할 수 있을까?\n\n\nfor문의 동작원리\n- 의문1의 해결: 아래의 ???자리에 올 수 있는 것은 dir()하여 __iter__가 있는 object이다.\nfor i in ???:\n    print(i)\n이러한 오브젝트를 iterable object라고 한다.\n- 확인\n\na=[1,2,3]\nset(dir(a)) & {'__iter__'}\n\n{'__iter__'}\n\n\n\na='123'\nset(dir(a)) & {'__iter__'}\n\n{'__iter__'}\n\n\n\na=3\nset(dir(a)) & {'__iter__'}\n\nset()\n\n\n\n예상대로 예제 1~4에서는 int클래스의 instance만 __iter__ 가 없다.\n\n- __iter__ 의 역할: iterable object를 iterator로 만들 수 있다!\n\nlst = [1,2,3]\nlst\n\n[1, 2, 3]\n\n\n\nlst[1] # 충실한 리스트\n\n2\n\n\n\nltor = iter(lst)\n#ltor = lst.__iter__()\nltor\n\n&lt;list_iterator at 0x7f4b7b39efd0&gt;\n\n\n\nltor[1]   # 더이상 리스트가 아니다.\n\nTypeError: 'list_iterator' object is not subscriptable\n\n\n\nltor?\n\n\nType:        list_iterator\nString form: &lt;list_iterator object at 0x7f4b7b39efd0&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\n- iterator가 되면 무엇이 좋은가? -&gt; 숨겨진 기능 __next__ 가 열린다.\n\nset(dir(lst)) & {'__next__'}\n\nset()\n\n\n\nset(dir(ltor)) & {'__next__'}\n\n{'__next__'}\n\n\n\nlst에는 __next__가 없지만 ltor에는 있다!\n\n- 그래서 __next__의 기능은? -&gt; 원소를 차례대로 꺼내준다. + 더 이상 꺼낼 원소가 없으면 StopIteration Error를 발생시킨다.\n\nlst\n\n[1, 2, 3]\n\n\n\nltor.__next__()\n\n1\n\n\n\nltor.__next__()\n\n2\n\n\n\nltor.__next__()\n\n3\n\n\n\nltor.__next__()\n\nStopIteration: \n\n\n- for 문의 동작원리\nfor i in lst\n    print(i)\n\nlst.__iter__() 혹은 iter(lst) 를 이용하여 lst를 iterator로 만든다. (iterable object를 iterator object로 만든다.)\niterator에서 .__next__() 함수를 호출하고 결과를 i에 저장한 뒤에 for문 블락안에 있는 내용 (들여쓰기 된 내용)을 실행한다. -&gt; 반복\nStopIteration 에러가 발생하면 for무늘 멈춘다.\n\n- 아래의 ??? 자리에 올 수 있는 것이 iterable object가 아니라 iterator 자체여도 for 문이 돌아갈까? -&gt; (당연히 돌아가야 할 것 같음)\nfor i in ???\n    print(i)\n\nfor i in iter([1,2,3]):\n    print(i)\n\n1\n2\n3\n\n\n\n당연히 가능!\n\n- a가 iterator일때 iter(a) 의 출력결과가 a와 같도록 조정한다면 for문의 동작원리 (1) ~ (3) 을 수정하지 않아도 좋다. -&gt; 실제로 이렇게 동작한다.\n\nltor?\n\n\nType:        list_iterator\nString form: &lt;list_iterator object at 0x7f4b7b39efd0&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\n\ndir(ltor)\n\n['__class__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__length_hint__',\n '__lt__',\n '__ne__',\n '__new__',\n '__next__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__setstate__',\n '__sizeof__',\n '__str__',\n '__subclasshook__']\n\n\n- 요약 - iterable object는 숨겨진 기능으로 __iter__를 가진다. - iterator object는 숨겨진 기능으로 __iter__와 __next__를 가진다. (즉 iterator는 그 자체로 iterable object가 된다!)\n\nlst = [1,2,3]\nltor = iter(lst)\n\n\nset(dir(lst)) & {'__iter__', '__next__'}\n\n{'__iter__'}\n\n\n\nset(dir(ltor)) & {'__iter__', '__next__'}\n\n{'__iter__', '__next__'}\n\n\n- 의문2의 해결: for문의 출력결과는 어떻게 예측할 수 있을까? iterator를 만들어서 __next__()의 출력값을 확인하면 알 수 있다.\n\nfor i in df:\n    print(i)\n\nX1\nX2\nX3\nX4\n\n\n\ndftor = iter(df)\ndftor?\n\n\nType:        map\nString form: &lt;map object at 0x7f4b7c0d1350&gt;\nDocstring:  \nmap(func, *iterables) --&gt; map object\nMake an iterator that computes the function using arguments from\neach of the iterables.  Stops when the shortest iterable is exhausted.\n\n\n\n\n\ndftor.__next__()\n\n'X1'\n\n\n\ndftor.__next__()\n\n'X2'\n\n\n\ndftor.__next__()\n\n'X3'\n\n\n\ndftor.__next__()\n\n'X4'\n\n\n\ndftor.__next__()\n\nStopIteration: \n\n\n\n\nrange()\n- 파이썬에서 for문을 처음 배울 때: range(5)를 써라!\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\nrange(5) 가 도대체 무엇인가?\n\n\nset(dir(range(5))) & {'__iter__', '__next__'}\n\n{'__iter__'}\n\n\n- range(5)의 정체는 그냥 iterable object이다.\n- 그래서 언제든지 iterator로 바꿀 수 있다.\n\nrtor = iter(range(5))\nrtor\n\n&lt;range_iterator at 0x7f4b7af5d8a0&gt;\n\n\n\nset(dir(rtor)) & {'__iter__', '__next__'}\n\n{'__iter__', '__next__'}\n\n\n- for문에서 range(5)가 행동하는 방법?\n\nrtor = iter(range(5))\n\n\nrtor.__next__()\n\n0\n\n\n\nrtor.__next__()\n\n1\n\n\n\nrtor.__next__()\n\n2\n\n\n\nrtor.__next__()\n\n3\n\n\n\nrtor.__next__()\n\n4\n\n\n\nrtor.__next__()\n\nStopIteration: \n\n\n\n\nzip\n- 이터레이터의 개념을 알면 for문에 대한 이해도가 대폭 상승한다.\n\nfor i in zip([1,2,3],'abc'):\n    print(i)\n\n(1, 'a')\n(2, 'b')\n(3, 'c')\n\n\n\nzip은 뭐지?\n\n\nzip([1,2,3],'abc')\n\n&lt;zip at 0x7f4b7c63a690&gt;\n\n\n- 어차피 for i in ????: 의 ???? 자리는 iterable object의 자리이다.\n\nset(dir(zip([1,2,3],'abc'))) & {'__iter__', '__next__'}\n\n{'__iter__', '__next__'}\n\n\n\n__next__() 함수가 있음 \\(\\to\\) zip([1,2,3],'abc')은 그 자체로 iterator 이다!\n\n\nz = zip([1,2,3],'abc')\n\n\nz.__next__()\n\n(1, 'a')\n\n\n\nz.__next__()\n\n(2, 'b')\n\n\n\nz.__next__()\n\n(3, 'c')\n\n\n\nz.__next__()\n\nStopIteration: \n\n\n\n\n사용자정의 이터레이터\n- 내가 이터레이터를 만들어보자.\n\nclass Klass: # 찌를 내는 순간 for문이 멈추도록 하는 이터레이터를 만들자.\n    def __init__(self):\n        self.candidate = [\"묵\", \"찌\", \"빠\"]\n    def __iter__(self):\n        return self\n    def __next__(self):\n        action = np.random.choice(self.candidate)\n        if action == \"찌\":\n            print(\"찌가 나와서 for문을 멈춥니다.\")\n            raise StopIteration\n        else:\n            return action\n\n\na=Klass()\n\n\na?\n\n\nType:        Klass\nString form: &lt;__main__.Klass object at 0x7f4b7aabf0d0&gt;\nDocstring:   &lt;no docstring&gt;\n\n\n\n\n\nset(dir(a)) & {'__iter__', '__next__'}  # a는 이터레이터\n\n{'__iter__', '__next__'}\n\n\n\na.__next__()\n\n'묵'\n\n\n\na.__next__()\n\n'빠'\n\n\n\na.__next__()\n\n'묵'\n\n\n\na.__next__()\n\n'빠'\n\n\n\na.__next__()\n\n'묵'\n\n\n\na.__next__()\n\n'묵'\n\n\n\na.__next__()\n\n찌가 나와서 for문을 멈춥니다.\n\n\nStopIteration: \n\n\n\nfor i in a:\n    print(i)\n\n묵\n묵\n묵\n찌가 나와서 for문을 멈춥니다.\n\n\n\n\n파이썬의 비밀 1~5\n\n파이썬의 비밀1: 자료형은 클래스의 비밀이다.(11주차)\n파이썬의 비밀2: 클래스에는 __str__처럼 숨겨진 메서드가 존재한다. 이를 이용하여 파이썬 내부의 기능을 가로챌 수 있다.(12주차0523)\n파이썬의 비밀3: 주피터노트북에서는 “오브젝트이름+엔터” 를 쳐서 나오는 출력은 __repr__로 가로챌 수 잇다.(주피터의 비밀)\n파이썬의 비밀4: 함수와 클래스는 숨겨진 메서드에 __call__을 가진 오브젝트일 뿐이다.\n파이썬의 비밀5: for문의 비밀 (iterable object, iterator, StopIteration Error)"
  },
  {
    "objectID": "posts/4. Class/python 14_0606.html#클래스공부-9단계",
    "href": "posts/4. Class/python 14_0606.html#클래스공부-9단계",
    "title": "파이썬 (0606) 14주차",
    "section": "클래스공부 9단계",
    "text": "클래스공부 9단계\n\n예비학습 (변수의 범위)\n커널을 재시작하고 아래를 관찰하자\n예제1\n- 관찰1: 함수내의 변수 출력\n\ndef f():\n    x=10\n    print(x)\n\n\nf()\n\n10\n\n\n- 관찰2: 함수내의 변수가 없을 경우 출력이 되지 않음\n\ndef g():\n    print(x)\n\n\ng()\n\nNameError: name 'x' is not defined\n\n\n- 관찰3: 동일한 이름의 변수가 global에 있다면 함수내에 (local에) 그 이름의 변수가 선언되지 않아도 global의 변수를 빌려서 사용함\n\nx=20        # global\ndef g():    # local\n    print(x)\n\n\ng()\n\n20\n\n\n- 관찰4: f()가 실행되면서 x=10이 함수내에 (=local에) 실행되지만 이 결과가 외부의 x=20에 (=global에) 영향을 미치지는 못함\n\nf()\n\n10\n\n\n\nx\n\n20\n\n\n예제2\n(코드1)\n\nx= 38\ndef nextyear():\n    y=x+1\n    print(x,y)\nnextyear()\n\n38 39\n\n\n(코드2)\n\nx= 38\ndef nextyear():\n    y=x+1\n    print(x,y)\n    x=0\nnextyear()\n\nUnboundLocalError: local variable 'x' referenced before assignment\n\n\n- 해석: - 잘못된 해석: 코드1은 실행되었고 코드 2에서 에러가 남. 코드1과 2의 차이점은 x=0 이라는 코드가 코드2에 추가로 포함되어 있다는 것이다. 따라서 x=0이 잘못된 코드이고 이걸 실행하는 과정에서 에러가 발생했다. - 올바른 해석: 코드1에서는 x가 global variable 이고 코드2에서는 x가 local bariable이어서 생기는 문제\n- 코드2의 올바른 수정\n\nx= 38\ndef nextyear():\n    x=0\n    y=x+1\n    print(x,y)\nnextyear()\n\n0 1\n\n\n\n\n인스턴스 변수, 클래스 변수 (12주차) 0518\n- 예비학습이 주는 교훈\n(원칙1) global 에서 정의된 이름은 local에서 정의된 이름이 없을 경우 그를 대신할 수 있다. (local은 경우에 따라서 global에 있는 변수를 빌려 쓸 수 있다.)\n(원칙2) local과 global 에서 같은 이름이 ’x’가 각각 정의되어 있는 경우? global의 변수와 local의 변수는 각각 따로 행동하며 서로 영향을 주지 않는다. (독립적이다)\n\n만약에 local이 global의 변수를 같이 쓰고 있었다고 할지라도, 추후 새롭게 local에 이름이 새롭게 같은 이름의 변수가 정의된다면 그 순간 local과 global의 변수를 각자 따로 행동하며 서로 영향을 주지 않는다. \\(\\to\\) 아래 예제 확인\n\n\nx=10\ndef f():\n    print(x)\n\n\nf() # x를 빌려쓰는 신세\n\n10\n\n\n\ndef f():\n    x=20   # 이제 새롭게 x를 정의했으니까\n    print(x)\n\n\nf()    # 다른길을 간다\n\n20\n\n\n- 이전에 공부하였던 인스턴스변수와 클래스변수 역시 비슷한 행동을 보인다.\n\nclass Moo:\n    x=0  # 클래스변수\n    \n    \n    ## 인스턴스변수는 self.x 또는 __init__ 이렇게\n\n\nmoo=Moo()\n\n(관찰1)\n\nMoo.x, moo.x\n\n(0, 0)\n\n\n\nmoo.x는 사실 정의한적 없지만 Moo.x 를 빌려쓰고 있다 (원칙1)\n\n(관찰2)\n\nMoo.x=100\n\n\nMoo.x, moo.x\n\n(100, 100)\n\n\n\nMoo.x를 변화시키면 moo.x도 변화한다. (빌려쓰고 있는 것이므로, 원칙1 재확인)\n\n(관찰3)\n\nmoo.x = 200\n\n\nMoo.x, moo.x\n\n(100, 200)\n\n\n\nmoo.x=200 을 하는 순간 새롭게 인스턴스 변수를 선언한 셈이 된다. 따라서 원칙2가 적용되어 이제부터 Moo.x와 moo.x는 서로 독립적으로 행동한다.\n\n(관찰4)\n\nMoo.x= -99\n\n\nMoo.x, moo.x\n\n(-99, 200)\n\n\n\nmoo.x=99\n\n\nMoo.x, moo.x\n\n(-99, 99)\n\n\n\nMoo.x를 바꾼다고 해서 moo.x가 영향받지 않고 moo.x를 바꿔도 Moo.x가 영향 받지 않음 (완전히 독립, 원칙2의 재확인)\n\n- 포인트: (1) 클래스변수와 인스턴스 변수의 구분 (2) 인스턴스 변수가 정의되지 않으면 클래스변수를 빌려쓸 수 있음 (3) 인스턴스변수와 클래스변수가 같은 이름으로 저장되어 있으면 각각 독립적으로 행동\n\n\n인스턴스 메서드\n- self의 비밀: 사실 클래스에서 정의된 함수의 첫번째 인자의 이름이 꼭 self일 필요는 없다. (무엇으로 전달하든 클래스안에서 정의된 메소드의 첫번째 인자는 기본적으로 instance의 태명 역할을 한다.)\n\nclass Moo:\n    def __init__(abab):\n        abab.name = 'boram'\n    def f(self):\n        print(self.name)\n\n\nmoo=Moo()\n\n\nmoo.name\n\n'boram'\n\n\n\nmoo.f()\n\nboram\n\n\n\n# self대신에 ababab 이런거 써도 되긴 함\n\n- 인스턴스 메서드: 위의 __init__ 와 f 와 같이 첫번째 인자를 인스턴스의 태명으로 받는 함수를 인스턴스 메서드(간단히 메서드) 라고 한다. - 인스턴스 메소드는 self.f() 와 같이 사용한다. 의미는 f(self) 이다.\n\nmoo.name = 'hynn'\n\n\nmoo.__init__()   # 인스턴스메서드의 사용예시: self.__init__()의 꼴로 사용\n\n\nmoo.name\n\n'boram'\n\n\n\nmoo.f() # 인스턴스메서드의 사용예시: self.__init__()의 꼴로 사용\n\nboram\n\n\n\nMoo.__init__()  # 사용안됨\n\nTypeError: __init__() missing 1 required positional argument: 'abab'\n\n\n\nMoo.f()  # 사용안됨\n\nTypeError: f() missing 1 required positional argument: 'self'\n\n\n\n\n클래스 메서드\n- 클래스 메서드: 함수의 첫 인자로 클래스오브젝트를 받는 메서드를 클래스 메서드라고 한다.\n- 목표: Moo.f()와 같은 형태로 사용할 수 있는 함수를 만들어 보자 -&gt; 클래스 메서드를 만들어보자!\n\nclass Moo:\n    def f(self):\n        print(\"인스턴스 메서드\")\n\n\nmoo=Moo()\n\n\nmoo.f()\n\n인스턴스 메서드\n\n\n\nMoo.f()\n\nTypeError: f() missing 1 required positional argument: 'self'\n\n\n\nclass Moo:\n    @classmethod\n    def f(cls):  # 함수의 첫 인자로 클래스오브젝트를 받는다. cls는 클래스 Moo의 가칭이라고 생각하면 된다.\n        print(\"클래스 메서드\")\n\n\nmoo=Moo()\n\n\nMoo.f()\n\n클래스 메서드\n\n\n\nmoo.f()  # 상위에서 정의한걸 빌려옴.. \n#인스턴스 메서드를 따로 정의한적은 없지만 같은 이름의 클래스 메서드가 있으므로 빌려서 씀\n\n클래스 메서드\n\n\n- 예제\n\nclass Moo:\n    @classmethod\n    def set_class_x(cls,value): # 클래스메서드\n        cls.x=value   # 클래스변수 선언, note: Moo.x = value와 같은 코드 \n    def set_instance_x(self, value): # 인스턴스메서드\n        self.x = value  # 인스턴스 변수선언\n\n\nmoo=Moo()\n\n\nMoo.set_class_x(10)   # 클래스 메서드로 클래스 변수에 10을 설정\n\n\nMoo.set_instance_x(10)   # 클래스에서 인스턴스 메서드를 사용 -&gt; 사용 불가\n\nTypeError: set_instance_x() missing 1 required positional argument: 'value'\n\n\n\nMoo.x, moo.x   # 인스턴스 변수는 따로 설정하지 않았지만 클래스 변수값을 빌려쓰고 있음\n\n(10, 10)\n\n\n\nmoo.set_class_x(20) # 인스턴스에서는 원래 set_class_x 라는 메서드는 없지만 클래스에는 있어서 빌려씀\n\n\nMoo.x, moo.x  # 현재 moo.x는 클래스 변수를 빌려쓰고 있는 상황이므로 같이 바뀜\n\n(20, 20)\n\n\n\nmoo.set_instance_x(-20) # 인스턴스에서 인스턴스 메서드를 사용하여 인스턴스 변수값을 -20으로 설정\n#-&gt; 이때부터 인스턴스변수와 클래스 변수는 서로 독립적인 노선을 간다.\n\n\nMoo.x, moo.x \n\n(20, -20)\n\n\n\nMoo.set_class_x(30)   # 독립적인 노선을 가기로 했으므로 클래스변수만 30으로 바뀜\n\n\nMoo.x, moo.x \n\n(30, -20)\n\n\n\nmoo.set_class_x(-40)   # 여전히 인스턴스에서 set_class_x라는 함수는 없으므로 클래스메서드를 빌려쓰고 있음\nMoo.x, moo.x\n\n(-40, -20)\n\n\n\n\n스태틱 메서드\n- 스태틱 메서드: 첫 인자로 인스턴스와 클래스 모두 받지 않음. (클래스 안에 정의되어 있지만 그냥 함수와 같음)\n\nclass Cals:\n    @staticmethod\n    def add(a,b):\n        return a+b\n    @staticmethod\n    def sub(a,b):\n        return a-b\n\n\nfs = Cals()\n\n\nfs.add(1,2)\n\n3\n\n\n\nfs.sub(1,2)\n\n-1\n\n\n\nfs는 그냥 함수들을 묶어놓은 느낌? 정리하기 편하게"
  },
  {
    "objectID": "posts/4. Class/python 14_0606.html#클래스공부-10단계",
    "href": "posts/4. Class/python 14_0606.html#클래스공부-10단계",
    "title": "파이썬 (0606) 14주차",
    "section": "클래스공부 10단계",
    "text": "클래스공부 10단계\n\n문자열 join\n- 예제\n\nlst = list('abcd')\n\n\nlist('abcd')\n\n['a', 'b', 'c', 'd']\n\n\n\n'abcd' #위의 리스트를 이렇게 모여서 쓰여지게 하고 싶다\n\n'abcd'\n\n\n\n''.join(lst)\n\n'abcd'\n\n\n- 해설: ’’는 string object이고 .join는 string object에 소속된 메서드이다.\n\na=''\n\n\na?\n\n\nType:        str\nString form: \nLength:      0\nDocstring:  \nstr(object='') -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.\n\n\n\n\n\na.join?\n\n\nSignature: a.join(iterable, /)\nDocstring:\nConcatenate any number of strings.\nThe string whose method is called is inserted in between each given string.\nThe result is returned as a new string.\nExample: '.'.join(['ab', 'pq', 'rs']) -&gt; 'ab.pq.rs'\nType:      builtin_function_or_method\n\n\n\n\n\na.join(lst)  # join(a,lst)와 같은효과\n\n'abcd'\n\n\n- join의 간단한 사용방법\n\n'-'.join(lst)  # '' 안에 - 넣어서 \n\n'a-b-c-d'\n\n\n\n\nmatplotlib\n- 파이썬의 모든 것은 객체이다: - matplotlib의 다른사용 (객체지향적 언어로 그림 그리기!)\n- 그림 오브젝트 생성\n\nfig = plt.figure() # 그림 오브젝트가 생성되고 fig라는 이름 \n\n&lt;Figure size 432x288 with 0 Axes&gt;\n\n\n\nfig\n\n&lt;Figure size 432x288 with 0 Axes&gt;\n\n\n- 그림 오브젝트의 액시즈를 확인 -&gt; 아무것도 없음..\n\nfig.axes\n\n[]\n\n\n- (0,0) 자리에 (가로=1, 세로=1) 크기의 그림틀(액시즈)을 넣어보자.\n\nfig.add_axes([0,0,1,1])\n\n&lt;Axes:&gt;\n\n\n\nfig.axes\n\n[&lt;Axes:&gt;]\n\n\n\nfig\n\n\n\n\n- 액시즈추가\n\nfig.add_axes([0,1.2, 1,1])  #   (0,1.2) 위치에  가로길이가 1, 세로길이가 1인 그림\n\n&lt;Axes:&gt;\n\n\n\nfig\n\n\n\n\n- (0.5,0.5) 위치에 (가로=1, 세로=1 ) 크기의 그림 추가\n\nfig.add_axes([0.5,0.5,1,1])\n\n&lt;Axes:&gt;\n\n\n\nfig\n\n\n\n\n- fig 의 세번째 액시즈에 접근\n\na3=fig.axes[2]   # id 찍어보면 어딘가게 엊장되어 있음. 오브젝트임\na3\n\n&lt;Axes:&gt;\n\n\n- 액시즈의 메소드중에 plot가 있음 -&gt; 이것을 그림으로 그려보자\n\na3.plot([1,2,3],[4,5,3],'--r')   # --r : 점선으로 빨간색으로 \n\n\nfig\n\n\n\n\n- 다시 세번째 축에 접근하여 다른그림을 그려보자.\n\nfig.axes[-1].plot([1,2,3],[5,4,3],':o')\nfig\n\n\n\n\n- 이제 첫번째 축에 접근하여 다른그림을 그려보자.\n\nfig.axes[0].plot([1,2,3],[4,1,4],'--b')\nfig\n\n\n\n\n- 클래스에 대한 이해가 없다면 위와 같은 그림을 그리기도 힘들고 코드를 해석하기도 힘듬\n\n\nshallow copy\n- 아래의 코드를 관찰하자.\n\na=[1,2,3]\nb=a\na=a+[4]\n\n현재 a,b의 출력 결과는?\n\na, b\n\n([1, 2, 3, 4], [1, 2, 3])\n\n\n- 이제 다시 아래의 코드를 관찰하자.\n\na=[1,2,3]\nb=a\na.append(4)\n\n현재 a,b의 출력 결과는?\n\na, b\n\n([1, 2, 3, 4], [1, 2, 3, 4])"
  },
  {
    "objectID": "posts/1. Basic/python 1_0307.html",
    "href": "posts/1. Basic/python 1_0307.html",
    "title": "파이썬 (0307) 1주차",
    "section": "",
    "text": "- 파이썬의 기본자료형은 int, float, bool, str, list, tuple, dict, set 등이 있다.\n\n0차원 자료형: int, float, bool\n1차원 자료형: str, list, tuple, dict, set\n\n\n\n- int형\n\na=100\n\n\ntype(a)\n\nint\n\n\n- float형\n\na?\n\n\na=1.2*3\n\n\ntype(a)\n\nfloat\n\n\n- bool형\n\na=True   # 숫자1\nb=False  # 숫자0\n\n\ntype(a)\n\nbool\n\n\n\n# bool형의 연산\na+b\n\n1\n\n\n- complex형\n\na=1+2j\nb=2-2j\n\n\na\n\n(1+2j)\n\n\n\ntype(a)\n\ncomplex\n\n\n\na+b\n\n(3+0j)\n\n\n\ntype(a+b)\n\ncomplex\n\n\n- 형태변환: float -&gt; int\n\na=3.0\ntype(a)\n\nfloat\n\n\n\na=int(a)\n\n\na?\n\n\na=3.14\nint(a)\n\n# 0.14날라가고 3만나옴. 정보의 손실이 있다.\n\n3\n\n\n- 형태변환: int $$ float\n\na=3\ntype(a)\n\nint\n\n\n\na=float(a)\ntype(a)\n\nfloat\n\n\n- 형태변환: bool $$ int/float\n(예시1)\n\na=True\ntype(a)\n\nbool\n\n\n\nint(a)\n\n1\n\n\n\nfloat(a)\n\n1.0\n\n\n(예시2)\n\na=1\nbool(a)\n\nTrue\n\n\n(예시3)\n\na=1.0\nbool(a)\n\nTrue\n\n\n\na=0.0\nbool(a)\n\nFalse\n\n\n- 이상한 형태변환도 가능하다\n\nbool(-3.14)\n\nTrue\n\n\n\nbool(3.14)\n\nTrue\n\n\n\nbool(0)\n\nFalse\n\n\n\nbool(3.24342)\n\nTrue\n\n\n\n# 위와 같은 코드를 의도적으로 사용하진 않는다. \n\n- 형태변환이 항상 가능한 것도 아님\n\nfloat(3+0j) # 사실상 3+0j= 3이므로 float으로 형변환하면 3.0이 되어야 할 것 같은데 오류가 남\n\nTypeError: can't convert complex to float\n\n\n- 암묵적형변환 (implicit)\n(예비학습) implicit의 의미 - 추운날씨 -&gt; 보일러좀 틀자! 명시적(explicit) / 오늘 날씨가 좀 춥지 않아? (implicit) - 짜장면 먹을래? -&gt; 싫어 (explicit) / 난 어제 짜장면 먹었는데… (implicit)\n\nint(True) #명시적\n\n1\n\n\n\nTrue * 1 # 암묵적형\n\n1\n\n\n\n1 * 1.0\n\n1.0\n\n\n\nTrue+True\n\n2\n\n\n\n\n\n- str\n\n# 선언\na='br'\n\n\na\n\n'br'\n\n\n\n# 연산\n# 더하기 연산\na='x'\nb='2'\n\n\na+b\n\n'x2'\n\n\n\n# 빼기 연산 없다. \na-b\n\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n\n\n# 곱하기 연산\na*2\n\n'xx'\n\n\n\n2*a\n\n'xx'\n\n\n\n# 의미상 맞지 않는 것은 수행되지 않는다.\na='x'\nb='y'\na+b\n\n'xy'\n\n\n\na*b\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n\n# 나눗셈연산은 없다. \na='xx'\na/2\n\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n\n\n\n\n\n- str은 하나의 벡터 문자가 여러개 있는 형태라고 생각하기\n\na='boram'\na\n\n'boram'\n\n\n\n5개의 칸에 글씨가 하나씩 들어가 있음\n\n\na[0]  # 0이 첫번쨰 원소\n\n'b'\n\n\n\na[1] # 두번째 원소\n\n'o'\n\n\n\n# 마지막 원소를 호출하려면 -1로 호출할 수도 있다.\na[-1]\n\n'm'\n\n\n\na[4]\n\n'm'\n\n\n\na[-2]\n# 마지막에서 2번째 원소는 -2로 호출 가능\n\n'a'\n\n\n\n어려개의 원소는 :을 이용하여 호출할 수 있음\n\n\na[0:3] # a[0], a[1], a[2]까지만 뽑힌다. a[3]은 호출되지 않는다.\n\n'bor'\n\n\n\na[1:3]\n\n'or'\n\n\n\nindex=1부터 시작해서 마지막 원소까지 호출하려면?\n\n\na[5]\n\nIndexError: string index out of range\n\n\n\na[1:5]  # a[5]는 없는데,, 이렇게 쓰니까 헷갈릴 수 있다.\n\n'oram'\n\n\n\na[1:-1]   # 이것은 a[1:4] 와 같음\n\n'ora'\n\n\n\n# 해결책! 생략한다.\na[1:]\n\n'oram'\n\n\n- 생략의 응용1\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[2:]\n\n'pop'\n\n\n\na[2:5]\n\n'pop'\n\n\n- 생략의 응용2\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:2]\n\n'k-'\n\n\n\na[:2]   # 앞을 생략하면 첫 원소부터 나온다.\n\n'k-'\n\n\n- 생략의 응용3\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[:]\n\n'k-pop'\n\n\n\na[0:5]\n\n'k-pop'\n\n\n\n\n- 파이썬의 변수는 단순히 정보를 담는 그릇이 아니다. 유용한 기능을 제공하는 경우가 있다.\n\na='ABCD'  #a라는 변수는 'ABCD'라는 정보를 담는 그릇의 역할만 하지 않고, 특화된 어떠한 기능도 제공한다.\na\n\n'ABCD'\n\n\n\na.lower() #소문자변환\n\n'abcd'\n\n\n\n# lower()는 문자열에 특화된 기능이며 아래 내용은 안됨\na=3.14\na.lower()\n\nAttributeError: 'float' object has no attribute 'lower'\n\n\n- 자료형에 특화된 기능(=함수)을 확인하는 방법 a. + tab 으로 목록 확인 가능\n\na='boram'\n\n\na.lower?\n\n\na.upper()   # 대문자 변환\n# upper(a)\n\n'BORAM'\n\n\n\na.capitalize()\n\n'Boram'\n\n\n- 마음의눈: a.f() 형태를 읽는 팁 - a.f()는 f(a)로 생각하면 편리함 - a.f(2)는 f(a,2)로 생각하면 편리함 - 이런점에서 R %&gt;% 연산자와 비슷하다고 생각할 수 있다. (약간 다름)\n- 사실 .은 좀 더 다양한 상황에서 쓰일 수 있다. 변수이름.함수이름() 의 형태가 아니라 - 패키지이름.함수이름() - 패키지이름.변수이름 - 패키지이름.패키지이름.함수이름()\n… 와 같이 다양한 형태가 가능하다. 근본적인 고통점은 .을 기준으로 상위개념.하위개념으로 이해하는 것이 좋다.\n\n\n\n\n- len 함수 : 원소의 갯수를 알려주는 함수\n(0차원) len함수가 동작하지 않는다.\n\na=3.14\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nb=True\nlen(b)\n\nTypeError: object of type 'bool' has no len()\n\n\n(1차원) len함수가 잘 동작함\n\na='3.14'\nlen(a)\n\n4\n\n\n\nb=[1,2,3]\nlen(b)\n\n3\n\n\n숙제\n\na='BoramKim'\na\n\n'BoramKim'\n\n\n\na[:5]\n\n'Boram'\n\n\n\na[5:]\n\n'Kim'"
  },
  {
    "objectID": "posts/1. Basic/python 1_0307.html#차원",
    "href": "posts/1. Basic/python 1_0307.html#차원",
    "title": "파이썬 (0307) 1주차",
    "section": "",
    "text": "- int형\n\na=100\n\n\ntype(a)\n\nint\n\n\n- float형\n\na?\n\n\na=1.2*3\n\n\ntype(a)\n\nfloat\n\n\n- bool형\n\na=True   # 숫자1\nb=False  # 숫자0\n\n\ntype(a)\n\nbool\n\n\n\n# bool형의 연산\na+b\n\n1\n\n\n- complex형\n\na=1+2j\nb=2-2j\n\n\na\n\n(1+2j)\n\n\n\ntype(a)\n\ncomplex\n\n\n\na+b\n\n(3+0j)\n\n\n\ntype(a+b)\n\ncomplex\n\n\n- 형태변환: float -&gt; int\n\na=3.0\ntype(a)\n\nfloat\n\n\n\na=int(a)\n\n\na?\n\n\na=3.14\nint(a)\n\n# 0.14날라가고 3만나옴. 정보의 손실이 있다.\n\n3\n\n\n- 형태변환: int $$ float\n\na=3\ntype(a)\n\nint\n\n\n\na=float(a)\ntype(a)\n\nfloat\n\n\n- 형태변환: bool $$ int/float\n(예시1)\n\na=True\ntype(a)\n\nbool\n\n\n\nint(a)\n\n1\n\n\n\nfloat(a)\n\n1.0\n\n\n(예시2)\n\na=1\nbool(a)\n\nTrue\n\n\n(예시3)\n\na=1.0\nbool(a)\n\nTrue\n\n\n\na=0.0\nbool(a)\n\nFalse\n\n\n- 이상한 형태변환도 가능하다\n\nbool(-3.14)\n\nTrue\n\n\n\nbool(3.14)\n\nTrue\n\n\n\nbool(0)\n\nFalse\n\n\n\nbool(3.24342)\n\nTrue\n\n\n\n# 위와 같은 코드를 의도적으로 사용하진 않는다. \n\n- 형태변환이 항상 가능한 것도 아님\n\nfloat(3+0j) # 사실상 3+0j= 3이므로 float으로 형변환하면 3.0이 되어야 할 것 같은데 오류가 남\n\nTypeError: can't convert complex to float\n\n\n- 암묵적형변환 (implicit)\n(예비학습) implicit의 의미 - 추운날씨 -&gt; 보일러좀 틀자! 명시적(explicit) / 오늘 날씨가 좀 춥지 않아? (implicit) - 짜장면 먹을래? -&gt; 싫어 (explicit) / 난 어제 짜장면 먹었는데… (implicit)\n\nint(True) #명시적\n\n1\n\n\n\nTrue * 1 # 암묵적형\n\n1\n\n\n\n1 * 1.0\n\n1.0\n\n\n\nTrue+True\n\n2"
  },
  {
    "objectID": "posts/1. Basic/python 1_0307.html#차원-1",
    "href": "posts/1. Basic/python 1_0307.html#차원-1",
    "title": "파이썬 (0307) 1주차",
    "section": "",
    "text": "- str\n\n# 선언\na='br'\n\n\na\n\n'br'\n\n\n\n# 연산\n# 더하기 연산\na='x'\nb='2'\n\n\na+b\n\n'x2'\n\n\n\n# 빼기 연산 없다. \na-b\n\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n\n\n# 곱하기 연산\na*2\n\n'xx'\n\n\n\n2*a\n\n'xx'\n\n\n\n# 의미상 맞지 않는 것은 수행되지 않는다.\na='x'\nb='y'\na+b\n\n'xy'\n\n\n\na*b\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n\n# 나눗셈연산은 없다. \na='xx'\na/2\n\nTypeError: unsupported operand type(s) for /: 'str' and 'int'"
  },
  {
    "objectID": "posts/1. Basic/python 1_0307.html#인덱싱",
    "href": "posts/1. Basic/python 1_0307.html#인덱싱",
    "title": "파이썬 (0307) 1주차",
    "section": "",
    "text": "- str은 하나의 벡터 문자가 여러개 있는 형태라고 생각하기\n\na='boram'\na\n\n'boram'\n\n\n\n5개의 칸에 글씨가 하나씩 들어가 있음\n\n\na[0]  # 0이 첫번쨰 원소\n\n'b'\n\n\n\na[1] # 두번째 원소\n\n'o'\n\n\n\n# 마지막 원소를 호출하려면 -1로 호출할 수도 있다.\na[-1]\n\n'm'\n\n\n\na[4]\n\n'm'\n\n\n\na[-2]\n# 마지막에서 2번째 원소는 -2로 호출 가능\n\n'a'\n\n\n\n어려개의 원소는 :을 이용하여 호출할 수 있음\n\n\na[0:3] # a[0], a[1], a[2]까지만 뽑힌다. a[3]은 호출되지 않는다.\n\n'bor'\n\n\n\na[1:3]\n\n'or'\n\n\n\nindex=1부터 시작해서 마지막 원소까지 호출하려면?\n\n\na[5]\n\nIndexError: string index out of range\n\n\n\na[1:5]  # a[5]는 없는데,, 이렇게 쓰니까 헷갈릴 수 있다.\n\n'oram'\n\n\n\na[1:-1]   # 이것은 a[1:4] 와 같음\n\n'ora'\n\n\n\n# 해결책! 생략한다.\na[1:]\n\n'oram'\n\n\n- 생략의 응용1\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[2:]\n\n'pop'\n\n\n\na[2:5]\n\n'pop'\n\n\n- 생략의 응용2\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:2]\n\n'k-'\n\n\n\na[:2]   # 앞을 생략하면 첫 원소부터 나온다.\n\n'k-'\n\n\n- 생략의 응용3\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[:]\n\n'k-pop'\n\n\n\na[0:5]\n\n'k-pop'\n\n\n\n\n- 파이썬의 변수는 단순히 정보를 담는 그릇이 아니다. 유용한 기능을 제공하는 경우가 있다.\n\na='ABCD'  #a라는 변수는 'ABCD'라는 정보를 담는 그릇의 역할만 하지 않고, 특화된 어떠한 기능도 제공한다.\na\n\n'ABCD'\n\n\n\na.lower() #소문자변환\n\n'abcd'\n\n\n\n# lower()는 문자열에 특화된 기능이며 아래 내용은 안됨\na=3.14\na.lower()\n\nAttributeError: 'float' object has no attribute 'lower'\n\n\n- 자료형에 특화된 기능(=함수)을 확인하는 방법 a. + tab 으로 목록 확인 가능\n\na='boram'\n\n\na.lower?\n\n\na.upper()   # 대문자 변환\n# upper(a)\n\n'BORAM'\n\n\n\na.capitalize()\n\n'Boram'\n\n\n- 마음의눈: a.f() 형태를 읽는 팁 - a.f()는 f(a)로 생각하면 편리함 - a.f(2)는 f(a,2)로 생각하면 편리함 - 이런점에서 R %&gt;% 연산자와 비슷하다고 생각할 수 있다. (약간 다름)\n- 사실 .은 좀 더 다양한 상황에서 쓰일 수 있다. 변수이름.함수이름() 의 형태가 아니라 - 패키지이름.함수이름() - 패키지이름.변수이름 - 패키지이름.패키지이름.함수이름()\n… 와 같이 다양한 형태가 가능하다. 근본적인 고통점은 .을 기준으로 상위개념.하위개념으로 이해하는 것이 좋다."
  },
  {
    "objectID": "posts/1. Basic/python 1_0307.html#차원-vs-1차원",
    "href": "posts/1. Basic/python 1_0307.html#차원-vs-1차원",
    "title": "파이썬 (0307) 1주차",
    "section": "",
    "text": "- len 함수 : 원소의 갯수를 알려주는 함수\n(0차원) len함수가 동작하지 않는다.\n\na=3.14\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nb=True\nlen(b)\n\nTypeError: object of type 'bool' has no len()\n\n\n(1차원) len함수가 잘 동작함\n\na='3.14'\nlen(a)\n\n4\n\n\n\nb=[1,2,3]\nlen(b)\n\n3\n\n\n숙제\n\na='BoramKim'\na\n\n'BoramKim'\n\n\n\na[:5]\n\n'Boram'\n\n\n\na[5:]\n\n'Kim'"
  },
  {
    "objectID": "posts/1. Basic/python 3_0316.html",
    "href": "posts/1. Basic/python 3_0316.html",
    "title": "파이썬 (0316) 3주차",
    "section": "",
    "text": "- 컨테이너형타입이라는 점, 그리고 연산 및 인덱싱을 하는 방법은 리스트와 같음\n\n차이점1: [] 대신에 ()를 사용\n차이점2: 불변형이다. (원소의 값을 바꿀 수 없음)\n차이점3: 하나의 원소를 선언할 때는 (1,)와 같이 해야 한다.\n차이점4: 의미가 명확할때는 튜플의 ()를 생략가능하다.\n\n컨테이너형이라는 것이 무슨의미?\n\na=(4,6,'pencil',3.2+4.6j,[3,4])\n\n\ntype(a[3])\n\ncomplex\n\n\n\ntype(a[2])\n\nstr\n\n\n- 불변형이라는 것은 무슨 의미?\n\na[2] = 'Pencil'\n\nTypeError: 'tuple' object does not support item assignment\n\n\n참고로 a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀐다.\n- 하나의 원소로 이루어진 튜플을 만들때는 쉼표를 붙여야함\n\n[1]+[2,3,4]\n\n[1, 2, 3, 4]\n\n\n\n(1)+(2,3,4)   # int형+tuple형 이므로 계산 불가 \n\nTypeError: unsupported operand type(s) for +: 'int' and 'tuple'\n\n\n\ntype(1)\n\nint\n\n\n\n(1,)+(2,3,4)\n\n(1, 2, 3, 4)\n\n\n- 마지막차이점! 의미가 명확할때 튜플의 괄호는 생략가능하다. (중요)\n\na=(1,2)\na\n\n(1, 2)\n\n\n의미가 명확할때 생략해야함\n\n1,2 + 3,4,5\n\n(1, 5, 4, 5)\n\n\n\n(1,2)+(3,4,5)\n\n(1, 2, 3, 4, 5)\n\n\n\n\n\n- 소괄호를 이용\n\na=(1,2,3)\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 생략가능하다는 점이 포인트\n\na=1,2,3\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 원소가 하나인 튜플을 만들고 싶다면?\n\na=(1,)\na\n\n(1,)\n\n\n\n\n\n- 리스트와 동일\n\n(1,2)+(3,4,5)\n\n(1, 2, 3, 4, 5)\n\n\n\n(1,2)*2\n\n(1, 2, 1, 2)\n\n\n\n\n\n- 리스트와 동일\n\na=(1,2,3,-4,-5)\na\n\n(1, 2, 3, -4, -5)\n\n\n\na[-1]\n\n-5\n\n\n\na[-3:]\n\n(3, -4, -5)\n\n\n\n\n\n\n\n\n책의설명: 실수로 값이 변경되는 것을 방지할 수 있다.\nshaaly copy / deep copy 를 막을 수 있는 무기\n\n\n\n\n- 예제: 여러변수를 동시에 출력하고 싶을 경우 (다중출력?)\n변수를 아래와 같이 선언하였다고 하자.\n\na=1\nb=2\nc=3\n\n선언된 값을 확인하려면?\n\na\n\n1\n\n\n\nb\n\n2\n\n\n\nc\n\n3\n\n\n튜플을 이용하면?\n\na,b,c #괄호하나 생략하는 것이 편함\n\n(1, 2, 3)\n\n\n- 예제: 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우)\n\nname, age, sex, height, weight = 'Tom', 20, 'M', 180, 70\n\n\nname, age, sex, height, weight\n\n('Tom', 20, 'M', 180, 70)\n\n\n\nheight\n\n180\n\n\n- 예제: 다중할당2, 위도와 경도\n\ncoor = (37,127) #서울\ncoor\n\n(37, 127)\n\n\n\nlat, long = coor   # (왼쪽) 가로가 생략된 튜플 \n\n\nlat\n\n37\n\n\n\nlong\n\n127\n\n\n- 잠깐만: 다중할당은 꼭 튜플에서만 가능한가?\n\n[x,y,z] = [1,2,3]\nx,y,z # 다중출력\n\n(1, 2, 3)\n\n\n\n[x,y] = 'hi'\nx,y\n\n('h', 'i')\n\n\n튜플과 같이 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과 세트로 사용함)\n\nx,y,z=1,2,3\nx,y,z\n\n(1, 2, 3)\n\n\n- 예제: 임시변수 사용없이 두 변수의 값을 교환\n\na=10\nb=20\n\n\na,b= b,a\n\n\na\n\n20\n\n\n\nb\n\n10\n\n\n- 예제: for문과 튜플\n\nlst = [['boram', 202212345, 'F'],\n      ['iu',202212365,'F'],\n      ['hodong',202215323,'M']]\nlst\n\n[['boram', 202212345, 'F'], ['iu', 202212365, 'F'], ['hodong', 202215323, 'M']]\n\n\n\nfor i in lst:\n    print(i)\n\n['boram', 202212345, 'F']\n['iu', 202212365, 'F']\n['hodong', 202215323, 'M']\n\n\n\nfor name, studentid, sex in lst:\n    print(name)\n\nboram\niu\nhodong\n\n\n\nfor name, studentid, sex in lst:\n    print(name, sex)\n\nboram F\niu F\nhodong M\n\n\n- 예제: for문과 튜플, dummy variable _\n\nfor name, studentid, sex in lst:\n    print(name)\n\nboram\niu\nhodong\n\n\n\nfor name, _, _ in lst:\n    print(name)   #name만 관심있으므로 그 외는 언더바를 통해 작성하는 편리함\n\nboram\niu\nhodong\n\n\n\nfor name, _ in lst:\n    print(name)\n\nValueError: too many values to unpack (expected 2)\n\n\n\nfor name, *args in lst:    #  *args 를 통해 위 오류 해결\n    print(name)\n\nboram\niu\nhodong\n\n\n- 예제: 튜플과 언패킹연산자 *\n\nhead, body, *tail = range(1,11)\nhead, body, tail\n\n(1, 2, [3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\nhead1, head2, *body, tail1, tail2, tail3 = range(1,11)\nhead1, head2, body, tail1, tail2, tail3\n\n(1, 2, [3, 4, 5, 6, 7], 8, 9, 10)\n\n\n\nhead1, *body, tail1, *tail2, *tail3 = range(1,11) #명확하지 않아서 오류남\n\nSyntaxError: multiple starred expressions in assignment (2478039376.py, line 1)\n\n\n\n*head, body, tail1, tail2, tail3 = range(1,11)\nhead, body, tail1\n\n([1, 2, 3, 4, 5, 6], 7, 8)\n\n\n(관찰)\nhead1, head2, body, tail1, tail2, tail3 = (1, 2, [3, 4, 5, 6, 7], 8, 9, 10)\nhead1, head3, *body, tail1, tail2, tail3 = (1,2, 3,4,5,6,7, 8, 9, 10) \n* 를 붙이면 1차원 자료구조가 풀린다!\n\n*[1,2,3]\n\nSyntaxError: can't use starred expression here (386627056.py, line 1)\n\n\n\nprint([1,2,3])\n\n[1, 2, 3]\n\n\n\nprint(*[1,2,3])   # 풀린다!!!\n\n1 2 3\n\n\n- 예제: 함수의 입력으로 *args 를 넣을때\n[예비학습] 함수 벼락치기\n\ndef myadd(a,b):\n    return a+b\n\n\nmyadd(3,4)\n\n7\n\n\n\nmyadd(3,-3)\n\n0\n\n\n예제: 두 점 사이의 거리를 구하는 함수를 만들어 보자.\n점 \\(p=(p_x,p_y)\\) 와 \\(q=(q_x,q_y)\\)의 거리는 \\(\\sqrt{(p_x-q_x)^2, (p_y-q_y)^2}\\)이다. 이것을 계산하는 프로그램을 만들자\n\nimport numpy as np\ndef dist(px,py,qx,qy):\n    return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n\n\ndist(0,3,4,0) # 헷갈려\n\n5.0\n\n\n\np=(0,3)\nq=(4,0)\ndist(p,q)\n\nTypeError: dist() missing 2 required positional arguments: 'qx' and 'qy'\n\n\n(방법1)\n\npx, py = p #또는(0,3)\nqx, qy = (4,0)\ndist(px,py,qx,qy)\n\n5.0\n\n\n(방법2)\n\ndef dist2(p, q):\n    px, py = p\n    qx, qy = q\n    return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n\n#def dist2(p, q):\n#    px=p[0]\n#    py=p[1]\n#    qx=q[0]\n#    qy=q[1]\n#    return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n\np=(0,3)\nq=(4,0)\ndist2(p,q)\n\n5.0\n\n\n(방법3)\n\ndist(*p, *q)    # 입력을 *(px,py), *(qx, qy) 형태로 넣기도 하고\n\n5.0\n\n\n\ndist(px, py, qx, qy)  # 입력을 px,py,qx,qy 형태로 넣기도 하고\n\n5.0\n\n\n(숙제) 원소로 자기학번을 포함하는 튜플을 만들기 (길이가 1인 튜플)\n\ntype((202250926,))\n\ntuple\n\n\n\nlen((202250926,))\n\n1\n\n\n\nㅁ"
  },
  {
    "objectID": "posts/1. Basic/python 3_0316.html#리스트-vs-튜플",
    "href": "posts/1. Basic/python 3_0316.html#리스트-vs-튜플",
    "title": "파이썬 (0316) 3주차",
    "section": "",
    "text": "- 컨테이너형타입이라는 점, 그리고 연산 및 인덱싱을 하는 방법은 리스트와 같음\n\n차이점1: [] 대신에 ()를 사용\n차이점2: 불변형이다. (원소의 값을 바꿀 수 없음)\n차이점3: 하나의 원소를 선언할 때는 (1,)와 같이 해야 한다.\n차이점4: 의미가 명확할때는 튜플의 ()를 생략가능하다.\n\n컨테이너형이라는 것이 무슨의미?\n\na=(4,6,'pencil',3.2+4.6j,[3,4])\n\n\ntype(a[3])\n\ncomplex\n\n\n\ntype(a[2])\n\nstr\n\n\n- 불변형이라는 것은 무슨 의미?\n\na[2] = 'Pencil'\n\nTypeError: 'tuple' object does not support item assignment\n\n\n참고로 a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀐다.\n- 하나의 원소로 이루어진 튜플을 만들때는 쉼표를 붙여야함\n\n[1]+[2,3,4]\n\n[1, 2, 3, 4]\n\n\n\n(1)+(2,3,4)   # int형+tuple형 이므로 계산 불가 \n\nTypeError: unsupported operand type(s) for +: 'int' and 'tuple'\n\n\n\ntype(1)\n\nint\n\n\n\n(1,)+(2,3,4)\n\n(1, 2, 3, 4)\n\n\n- 마지막차이점! 의미가 명확할때 튜플의 괄호는 생략가능하다. (중요)\n\na=(1,2)\na\n\n(1, 2)\n\n\n의미가 명확할때 생략해야함\n\n1,2 + 3,4,5\n\n(1, 5, 4, 5)\n\n\n\n(1,2)+(3,4,5)\n\n(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "posts/1. Basic/python 3_0316.html#선언",
    "href": "posts/1. Basic/python 3_0316.html#선언",
    "title": "파이썬 (0316) 3주차",
    "section": "",
    "text": "- 소괄호를 이용\n\na=(1,2,3)\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 생략가능하다는 점이 포인트\n\na=1,2,3\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 원소가 하나인 튜플을 만들고 싶다면?\n\na=(1,)\na\n\n(1,)"
  },
  {
    "objectID": "posts/1. Basic/python 3_0316.html#연산",
    "href": "posts/1. Basic/python 3_0316.html#연산",
    "title": "파이썬 (0316) 3주차",
    "section": "",
    "text": "- 리스트와 동일\n\n(1,2)+(3,4,5)\n\n(1, 2, 3, 4, 5)\n\n\n\n(1,2)*2\n\n(1, 2, 1, 2)"
  },
  {
    "objectID": "posts/1. Basic/python 3_0316.html#인덱싱",
    "href": "posts/1. Basic/python 3_0316.html#인덱싱",
    "title": "파이썬 (0316) 3주차",
    "section": "",
    "text": "- 리스트와 동일\n\na=(1,2,3,-4,-5)\na\n\n(1, 2, 3, -4, -5)\n\n\n\na[-1]\n\n-5\n\n\n\na[-3:]\n\n(3, -4, -5)"
  },
  {
    "objectID": "posts/1. Basic/python 3_0316.html#튜플고급",
    "href": "posts/1. Basic/python 3_0316.html#튜플고급",
    "title": "파이썬 (0316) 3주차",
    "section": "",
    "text": "책의설명: 실수로 값이 변경되는 것을 방지할 수 있다.\nshaaly copy / deep copy 를 막을 수 있는 무기\n\n\n\n\n- 예제: 여러변수를 동시에 출력하고 싶을 경우 (다중출력?)\n변수를 아래와 같이 선언하였다고 하자.\n\na=1\nb=2\nc=3\n\n선언된 값을 확인하려면?\n\na\n\n1\n\n\n\nb\n\n2\n\n\n\nc\n\n3\n\n\n튜플을 이용하면?\n\na,b,c #괄호하나 생략하는 것이 편함\n\n(1, 2, 3)\n\n\n- 예제: 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우)\n\nname, age, sex, height, weight = 'Tom', 20, 'M', 180, 70\n\n\nname, age, sex, height, weight\n\n('Tom', 20, 'M', 180, 70)\n\n\n\nheight\n\n180\n\n\n- 예제: 다중할당2, 위도와 경도\n\ncoor = (37,127) #서울\ncoor\n\n(37, 127)\n\n\n\nlat, long = coor   # (왼쪽) 가로가 생략된 튜플 \n\n\nlat\n\n37\n\n\n\nlong\n\n127\n\n\n- 잠깐만: 다중할당은 꼭 튜플에서만 가능한가?\n\n[x,y,z] = [1,2,3]\nx,y,z # 다중출력\n\n(1, 2, 3)\n\n\n\n[x,y] = 'hi'\nx,y\n\n('h', 'i')\n\n\n튜플과 같이 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과 세트로 사용함)\n\nx,y,z=1,2,3\nx,y,z\n\n(1, 2, 3)\n\n\n- 예제: 임시변수 사용없이 두 변수의 값을 교환\n\na=10\nb=20\n\n\na,b= b,a\n\n\na\n\n20\n\n\n\nb\n\n10\n\n\n- 예제: for문과 튜플\n\nlst = [['boram', 202212345, 'F'],\n      ['iu',202212365,'F'],\n      ['hodong',202215323,'M']]\nlst\n\n[['boram', 202212345, 'F'], ['iu', 202212365, 'F'], ['hodong', 202215323, 'M']]\n\n\n\nfor i in lst:\n    print(i)\n\n['boram', 202212345, 'F']\n['iu', 202212365, 'F']\n['hodong', 202215323, 'M']\n\n\n\nfor name, studentid, sex in lst:\n    print(name)\n\nboram\niu\nhodong\n\n\n\nfor name, studentid, sex in lst:\n    print(name, sex)\n\nboram F\niu F\nhodong M\n\n\n- 예제: for문과 튜플, dummy variable _\n\nfor name, studentid, sex in lst:\n    print(name)\n\nboram\niu\nhodong\n\n\n\nfor name, _, _ in lst:\n    print(name)   #name만 관심있으므로 그 외는 언더바를 통해 작성하는 편리함\n\nboram\niu\nhodong\n\n\n\nfor name, _ in lst:\n    print(name)\n\nValueError: too many values to unpack (expected 2)\n\n\n\nfor name, *args in lst:    #  *args 를 통해 위 오류 해결\n    print(name)\n\nboram\niu\nhodong\n\n\n- 예제: 튜플과 언패킹연산자 *\n\nhead, body, *tail = range(1,11)\nhead, body, tail\n\n(1, 2, [3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\nhead1, head2, *body, tail1, tail2, tail3 = range(1,11)\nhead1, head2, body, tail1, tail2, tail3\n\n(1, 2, [3, 4, 5, 6, 7], 8, 9, 10)\n\n\n\nhead1, *body, tail1, *tail2, *tail3 = range(1,11) #명확하지 않아서 오류남\n\nSyntaxError: multiple starred expressions in assignment (2478039376.py, line 1)\n\n\n\n*head, body, tail1, tail2, tail3 = range(1,11)\nhead, body, tail1\n\n([1, 2, 3, 4, 5, 6], 7, 8)\n\n\n(관찰)\nhead1, head2, body, tail1, tail2, tail3 = (1, 2, [3, 4, 5, 6, 7], 8, 9, 10)\nhead1, head3, *body, tail1, tail2, tail3 = (1,2, 3,4,5,6,7, 8, 9, 10) \n* 를 붙이면 1차원 자료구조가 풀린다!\n\n*[1,2,3]\n\nSyntaxError: can't use starred expression here (386627056.py, line 1)\n\n\n\nprint([1,2,3])\n\n[1, 2, 3]\n\n\n\nprint(*[1,2,3])   # 풀린다!!!\n\n1 2 3\n\n\n- 예제: 함수의 입력으로 *args 를 넣을때\n[예비학습] 함수 벼락치기\n\ndef myadd(a,b):\n    return a+b\n\n\nmyadd(3,4)\n\n7\n\n\n\nmyadd(3,-3)\n\n0\n\n\n예제: 두 점 사이의 거리를 구하는 함수를 만들어 보자.\n점 \\(p=(p_x,p_y)\\) 와 \\(q=(q_x,q_y)\\)의 거리는 \\(\\sqrt{(p_x-q_x)^2, (p_y-q_y)^2}\\)이다. 이것을 계산하는 프로그램을 만들자\n\nimport numpy as np\ndef dist(px,py,qx,qy):\n    return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n\n\ndist(0,3,4,0) # 헷갈려\n\n5.0\n\n\n\np=(0,3)\nq=(4,0)\ndist(p,q)\n\nTypeError: dist() missing 2 required positional arguments: 'qx' and 'qy'\n\n\n(방법1)\n\npx, py = p #또는(0,3)\nqx, qy = (4,0)\ndist(px,py,qx,qy)\n\n5.0\n\n\n(방법2)\n\ndef dist2(p, q):\n    px, py = p\n    qx, qy = q\n    return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n\n#def dist2(p, q):\n#    px=p[0]\n#    py=p[1]\n#    qx=q[0]\n#    qy=q[1]\n#    return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n\np=(0,3)\nq=(4,0)\ndist2(p,q)\n\n5.0\n\n\n(방법3)\n\ndist(*p, *q)    # 입력을 *(px,py), *(qx, qy) 형태로 넣기도 하고\n\n5.0\n\n\n\ndist(px, py, qx, qy)  # 입력을 px,py,qx,qy 형태로 넣기도 하고\n\n5.0\n\n\n(숙제) 원소로 자기학번을 포함하는 튜플을 만들기 (길이가 1인 튜플)\n\ntype((202250926,))\n\ntuple\n\n\n\nlen((202250926,))\n\n1\n\n\n\nㅁ"
  },
  {
    "objectID": "posts/1. Basic/python 2_0314.html",
    "href": "posts/1. Basic/python 2_0314.html",
    "title": "파이썬 (0314) 2주차",
    "section": "",
    "text": "- 리스트의 선언\n\na=[11,22]\na\n\n[11, 22]\n\n\n\ntype(a)\n\nlist\n\n\n- 비어있는 리스트의 선언\n\na=[] # 방법1\na\n\n[]\n\n\n\na=list() # 방법2\na\n\n[]\n\n\n\n\n\n- 더하기연산\n\na=[11,22]\nb=[12,13]\n\n\na\n\n[11, 22]\n\n\n\nb\n\n[12, 13]\n\n\n\na+b\n\n[11, 22, 12, 13]\n\n\n\n우리의 예상과 다른 결과가 나옴 \\(\\to\\) 파이썬은 R처럼 자체적으로 좋은 계산기능을 내장하고 있찌 않음\n\n- 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음\n\na=[1,2,3]\nb=1\na+b\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n- 뺄셈은 정의되지 않음\n\na=[1,2]\nb=[1,2]\na-b\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n- 곱하기는 정의 가능\n\na=[1,2]\n\n\n2*a  #a+a\n\n[1, 2, 1, 2]\n\n\n- 나눗셈은 정의되지 않음\n\na=[1,2,1,2]\na/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서 뺄샘과 나눗셈이 원소의 삭제를 의미하는 것은 아님\n\na=[1,2,3]\na-[3]   #이런건없다\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n\na=[1,2,1,2,1,2,]\na/3    # 이런건없다\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도 있긴하지만, 우리는 산술적인 +, *를 원하는 경우도 있다. 이럴 경우는 어떻게 할 수 있을까?\n(예제)\n\na=[1,2]\nb=[3,4]\n\na+b=[4,6]이 되도록 하려면?\n(풀이1)\n\ntype(a)\n\nlist\n\n\n\ntype(a[0])\n\nint\n\n\n\na[0]+b[0]  #a의 첫번째 원소 추출, b의 첫번째 원소 추출, 둘을 더함\n\n4\n\n\n\na[1]+b[1]\n\n6\n\n\n\n[a[0]+b[0], a[1]+b[1]]\n\n[4, 6]\n\n\n풀이가 가능한 이유? a,b는 리스트이지만 a[0], a[1], b[0], b[1]은 각각 인트형임. 인트형은 +연산이 가능함\n(풀이2)\nnumpy패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리) - 이러한 벡터연산은 누구나 필요로 하는 연산 - 내가 아니더라도 누군가가 프로그램화 해놓았을 것임 - 그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도 있음 (패키지를 배포한다고 표현) - 그 패키지를 가져와서 설치한 뒤 사용하기만 하면 된다.\n패키지를 설치하는 방법 - !pip install numpy # 최신버전을 설치함 - !conda install -c conda-forge numpy -y # 안전한 버전을 설치함\n설치된 패키지를 사용하는 방법 - import numpy 한뒤에 numpy.??로 기능을 사용 - import numpy as np 한뒤에 np.??로 기능을 사용\n파이썬의 기본 패키지 numpy pandas matplotlib\n\n!pip install numpy\n\nRequirement already satisfied: numpy in c:\\users\\user\\anaconda3\\lib\\site-packages (1.21.5)\n\n\n\nimport numpy # 설치한 패키지를 쓰겠다고 선언함 library(tidyverse)와 비슷.\n\n\na=[1,2]\nb=[3,4]\n\n\na+b\n\n[1, 2, 3, 4]\n\n\n\ntype(numpy.array(a))\n\nnumpy.ndarray\n\n\n\naa=numpy.array(a)   #aa는 리스트가 아니라 넘파이 어레이, numpy.array()는 numpy패키지에서 제공하는 array함수를 쓰겠다는 의미\nbb=numpy.array(b)   \n\n\naa+bb\n\narray([4, 6])\n\n\n\na+b\n\n[1, 2, 3, 4]\n\n\n이런것도 가능\n\n2*aa+1\n\narray([3, 5])\n\n\n\n2*aa+1+bb\n\narray([6, 9])\n\n\n(풀이3)\n\nimport numpy as np # 설치한 numpy라는 패키지를 쓰겠음. 그런데 numpy 말고 np라는 이름으로 쓰겠음\n\n\nnp.array(a)+np.array(b)\n\narray([4, 6])\n\n\n\n\n\n- str형과 동일한 방식\n\na=[11,22,33,44,55]\n\n\na[0:3]\n\n[11, 22, 33]"
  },
  {
    "objectID": "posts/1. Basic/python 2_0314.html#선언",
    "href": "posts/1. Basic/python 2_0314.html#선언",
    "title": "파이썬 (0314) 2주차",
    "section": "",
    "text": "- 리스트의 선언\n\na=[11,22]\na\n\n[11, 22]\n\n\n\ntype(a)\n\nlist\n\n\n- 비어있는 리스트의 선언\n\na=[] # 방법1\na\n\n[]\n\n\n\na=list() # 방법2\na\n\n[]"
  },
  {
    "objectID": "posts/1. Basic/python 2_0314.html#연산",
    "href": "posts/1. Basic/python 2_0314.html#연산",
    "title": "파이썬 (0314) 2주차",
    "section": "",
    "text": "- 더하기연산\n\na=[11,22]\nb=[12,13]\n\n\na\n\n[11, 22]\n\n\n\nb\n\n[12, 13]\n\n\n\na+b\n\n[11, 22, 12, 13]\n\n\n\n우리의 예상과 다른 결과가 나옴 \\(\\to\\) 파이썬은 R처럼 자체적으로 좋은 계산기능을 내장하고 있찌 않음\n\n- 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음\n\na=[1,2,3]\nb=1\na+b\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n- 뺄셈은 정의되지 않음\n\na=[1,2]\nb=[1,2]\na-b\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n- 곱하기는 정의 가능\n\na=[1,2]\n\n\n2*a  #a+a\n\n[1, 2, 1, 2]\n\n\n- 나눗셈은 정의되지 않음\n\na=[1,2,1,2]\na/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서 뺄샘과 나눗셈이 원소의 삭제를 의미하는 것은 아님\n\na=[1,2,3]\na-[3]   #이런건없다\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n\na=[1,2,1,2,1,2,]\na/3    # 이런건없다\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도 있긴하지만, 우리는 산술적인 +, *를 원하는 경우도 있다. 이럴 경우는 어떻게 할 수 있을까?\n(예제)\n\na=[1,2]\nb=[3,4]\n\na+b=[4,6]이 되도록 하려면?\n(풀이1)\n\ntype(a)\n\nlist\n\n\n\ntype(a[0])\n\nint\n\n\n\na[0]+b[0]  #a의 첫번째 원소 추출, b의 첫번째 원소 추출, 둘을 더함\n\n4\n\n\n\na[1]+b[1]\n\n6\n\n\n\n[a[0]+b[0], a[1]+b[1]]\n\n[4, 6]\n\n\n풀이가 가능한 이유? a,b는 리스트이지만 a[0], a[1], b[0], b[1]은 각각 인트형임. 인트형은 +연산이 가능함\n(풀이2)\nnumpy패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리) - 이러한 벡터연산은 누구나 필요로 하는 연산 - 내가 아니더라도 누군가가 프로그램화 해놓았을 것임 - 그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도 있음 (패키지를 배포한다고 표현) - 그 패키지를 가져와서 설치한 뒤 사용하기만 하면 된다.\n패키지를 설치하는 방법 - !pip install numpy # 최신버전을 설치함 - !conda install -c conda-forge numpy -y # 안전한 버전을 설치함\n설치된 패키지를 사용하는 방법 - import numpy 한뒤에 numpy.??로 기능을 사용 - import numpy as np 한뒤에 np.??로 기능을 사용\n파이썬의 기본 패키지 numpy pandas matplotlib\n\n!pip install numpy\n\nRequirement already satisfied: numpy in c:\\users\\user\\anaconda3\\lib\\site-packages (1.21.5)\n\n\n\nimport numpy # 설치한 패키지를 쓰겠다고 선언함 library(tidyverse)와 비슷.\n\n\na=[1,2]\nb=[3,4]\n\n\na+b\n\n[1, 2, 3, 4]\n\n\n\ntype(numpy.array(a))\n\nnumpy.ndarray\n\n\n\naa=numpy.array(a)   #aa는 리스트가 아니라 넘파이 어레이, numpy.array()는 numpy패키지에서 제공하는 array함수를 쓰겠다는 의미\nbb=numpy.array(b)   \n\n\naa+bb\n\narray([4, 6])\n\n\n\na+b\n\n[1, 2, 3, 4]\n\n\n이런것도 가능\n\n2*aa+1\n\narray([3, 5])\n\n\n\n2*aa+1+bb\n\narray([6, 9])\n\n\n(풀이3)\n\nimport numpy as np # 설치한 numpy라는 패키지를 쓰겠음. 그런데 numpy 말고 np라는 이름으로 쓰겠음\n\n\nnp.array(a)+np.array(b)\n\narray([4, 6])"
  },
  {
    "objectID": "posts/1. Basic/python 2_0314.html#인덱싱",
    "href": "posts/1. Basic/python 2_0314.html#인덱싱",
    "title": "파이썬 (0314) 2주차",
    "section": "",
    "text": "- str형과 동일한 방식\n\na=[11,22,33,44,55]\n\n\na[0:3]\n\n[11, 22, 33]"
  },
  {
    "objectID": "posts/1. Basic/python 2_0314.html#콘테이너형-객체-가변객체",
    "href": "posts/1. Basic/python 2_0314.html#콘테이너형-객체-가변객체",
    "title": "파이썬 (0314) 2주차",
    "section": "콘테이너형 객체, 가변객체",
    "text": "콘테이너형 객체, 가변객체\n- 객체 - Object - Something\n- 리스트의 원소는 int, float따위만 가능한 것이 아니다. (리스트는 콘테이너형 객체이므로)\n\nlst = [1,3.14,True, 'a', [1,2],\n      (1,2), {'name':'iu','age':30},{1,2,3}]\n\n\nlst\n\n[1, 3.14, True, 'a', [1, 2], (1, 2), {'name': 'iu', 'age': 30}, {1, 2, 3}]\n\n\n각 원소의 타입을 알아보자\n\ntype(lst[0])\n\nint\n\n\n\ntype(lst[1])\n\nfloat\n\n\n\ntype(lst[2])\n\nbool\n\n\n\ntype(lst[3])\n\nstr\n\n\n\ntype(lst[4])\n\nlist\n\n\n\ntype(lst[5])\n\ntuple\n\n\n\ntype(lst[6])   # dictionary\n\ndict\n\n\n\ntype(lst[7]) #집합\n\nset\n\n\n- str은 컨테이너형이 아니다\n\n# 컨테이너형이 아닌것\n'abcd'[0]\n\n'a'\n\n\n\nstr의 모든 원소는 문자임\n\n- 리스트의 원소를 수정할 수 있다. (리스트는 가변객체이므로)\n\na=[11,22,33]\n\n\na[0]\n\n11\n\n\n\na[0]=111\n\n\na\n\n[111, 22, 33]\n\n\n- 원소수정은 당연한 기능 같은데 이것이 불가능한 경우도 있다.\n(가능한경우)\n\n'boram'[1]\n\n'o'\n\n\n\na=['b','o','r','a','m']\n\n\na[0]\n\n'b'\n\n\n\na[0]='B'\n\n\na\n\n['B', 'o', 'r', 'a', 'm']\n\n\n(불가능한경우)\n\na='boram'\n\n\na\n\n'boram'\n\n\n\na[0]\n\n'b'\n\n\n\na[0]='B'\n\nTypeError: 'str' object does not support item assignment\n\n\n- 리스트 원소 삭제\n(예제)\n아래와 같이 문자로 된 리스트를 선언하자.\n\na=['b','o','r','a','m']\na\n\n['b', 'o', 'r', 'a', 'm']\n\n\n사실 더 쉽게 선언할 수 있음\n\na='boram'   #string으로 a를 선언\n\n\ntype(a)\n\nstr\n\n\n\nlist(a)\n\n['b', 'o', 'r', 'a', 'm']\n\n\n\na=list(a)  #list(a)를 통하여 str을 list로 변환 \n\n\na  # 그 결과를 a에 다시 저장\n\n['b', 'o', 'r', 'a', 'm']\n\n\n첫 번째 원소를 삭제하고 싶다면?\n\n\ndel a[0]\na\n\n['o', 'r', 'a', 'm']\n\n\n- 리스트의 원소 추가\n(예제) 비어있는 리스틀를 만들고 원소 0,1,2 를 차례로 추가하여 보자.\n(풀이1)\n\na=[]\na\n\n[]\n\n\n\na= a+[0]\na\n\n[0]\n\n\n\na=a+[1]\na\n\n[0, 1]\n\n\n\na= a+[2]\na\n\n[0, 1, 2]\n\n\n(풀이2)\n\na=[]\na\n\n[]\n\n\n\na+=[0]\na\n\n[0]\n\n\n\na+=[1]\na\n\n[0, 1]\n\n\n\na+=[2]\na\n\n[0, 1, 2]\n\n\n\n암기법: 중복되는 변수를 지우고 연산자의 순서를 바꾼다.\n\n(풀이3) 리스트 특화기능(=메소드)를 이용\n\na=[]\na\n\n[]\n\n\n\na.append?\n\n\na.append(0)\na\n\n[0]\n\n\n\na.append(1)\na\n\n[0, 1]\n\n\n\na.append(2)\na\n\n[0, 1, 2]\n\n\n- a+[4]와 a.append(4)의 차이점은?\n(관찰1)\n\na=[1,2,3]\na+[4]  ## 리스트 a와 리스트 [4]의 연산결과\n\n[1, 2, 3, 4]\n\n\n\na  # a는 그대로임. 변화없음\n\n[1, 2, 3]\n\n\n(관찰2)\n\na=[1,2,3]\na.append(4)\n\n\na    # a자체가 변화함\n\n[1, 2, 3, 4]\n\n\n비슷해보이지만 굉장히 미묘한 차이가 있음\na.append(4) : a에 4를 append하라 \\(\\to\\) a가 변함\na+[4] : a와 4를 연산하고 수행결과를 보여달라"
  },
  {
    "objectID": "posts/1. Basic/python 2_0314.html#메소드리스트자료형에-특화된-특수한-함수들",
    "href": "posts/1. Basic/python 2_0314.html#메소드리스트자료형에-특화된-특수한-함수들",
    "title": "파이썬 (0314) 2주차",
    "section": "메소드(리스트자료형에 특화된 특수한 함수들)",
    "text": "메소드(리스트자료형에 특화된 특수한 함수들)\n(append)\n\na=[1,2,3,4]\na.append?\n\n\na.append(5)\na\n\n[1, 2, 3, 4, 5]\n\n\n(clear)\n\na=[1,2,3,4]\na.clear?\n\n\na.clear()\n\n\na\n\n[]\n\n\n(copy)\n\na=[1,2,3,4]\na.copy?\n\n\nb=a.copy()\nb\n\n[1, 2, 3, 4]\n\n\n(count)\n\na=[1,1,2,3,3,4,4,4,]\na.count(1)\n\n2\n\n\n\na.count(2) #특정 원소가 몇개 포함되어있는지 숫자 세줌\n\n1\n\n\n(extend)\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.extend(b)\na\n\n[1, 2, 3, 4, -1, -2, -3, -4]\n\n\n\na.append(b)   \na\n\n[1, 2, 3, 4, -1, -2, -3, -4, [-1, -2, -3, -4]]\n\n\n(index)\n\na=[11,22,'a',True,22]\na.index(True)\n\n3\n\n\n\na.index('a')\n\n2\n\n\n\na.index(22)\n\n1\n\n\n(insert)\n\na=[1,2,3]\n\n\na.insert(1,88)\na\n\n[1, 88, 2, 3]\n\n\n(pop)\n\na=['a',1,2,'d']\na.pop()   # index= -1이므로 마지막원소가 나타남\n\n'd'\n\n\n\na   # a는 마지막 원소가 사라진 상태\n\n['a', 1, 2]\n\n\n\na.pop(0)   # index=0 이므로 첫번째 원소가 나타남\n\n'a'\n\n\n\na    # a에서는 첫번쨰 원소가 사라진 상태\n\n[1, 2]\n\n\n(remove)\n\na=['a',2,3,'d']\na.remove('d')\n\n\na\n\n['a', 2, 3]\n\n\n\na.remove('a')\na\n\n[2, 3]\n\n\n(reverse)\n\na=[1,2,3,4]\na.reverse()\na\n\n[4, 3, 2, 1]\n\n\n(sort)\n\na=[1,3,2,4]\na.sort()\na\n\n[1, 2, 3, 4]\n\n\n(다른예제들)\n\na=list('boram')\na\n\n['b', 'o', 'r', 'a', 'm']\n\n\n\na.sort()\na\n\n['a', 'b', 'm', 'o', 'r']\n\n\n\na.sort(reverse=True)\na\n\n['r', 'o', 'm', 'b', 'a']"
  },
  {
    "objectID": "posts/1. Basic/python 2_0314.html#중첩리스트",
    "href": "posts/1. Basic/python 2_0314.html#중첩리스트",
    "title": "파이썬 (0314) 2주차",
    "section": "중첩리스트",
    "text": "중첩리스트\n\nA=[[1,2,3],[4,5,6],[7,8,9]]\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n- A는 아래와 같은 매트릭스로 이해할 수 있다.\n$\n\\[\\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{bmatrix}\\]\n$\n- A에서 (2,1)의 원소를 뽑고 싶다. = 1을 뽑고싶다.\n\nA[1,0]\n\nTypeError: list indices must be integers or slices, not tuple\n\n\n\n실패\n\n\nA[1][0]\n\n4\n\n\n\n성공\n\n성고의 이유를 분석해 보자.\n\nA[0]\n\n[1, 2, 3]\n\n\n\nA[0][0]\n\n1\n\n\n- 매트릭스는 아니지만 매트릭스 같음! - 1차원 배열을 다차원 배열로 확장할 수 있는 기본 아이디어를 제공함"
  },
  {
    "objectID": "posts/1. Basic/python 2_0314.html#리스트컴프리헨션",
    "href": "posts/1. Basic/python 2_0314.html#리스트컴프리헨션",
    "title": "파이썬 (0314) 2주차",
    "section": "리스트컴프리헨션 (★★★)",
    "text": "리스트컴프리헨션 (★★★)\n- 리스트 컴프리헨션을 이해하기 전에 for문에 대하여 알아보자.\n[예비학습] for문 벼락치기\n프로그램안에서 반복해서 무언가를 하고싶다 \\(\\to\\) for\n\nfor i in [0,1,2,3]:   # 반복실행계획\n    print(i)          # 반복실행내용, 탭을 이용하여 들여쓰기 해야한다. \n\n0\n1\n2\n3\n\n\n(예제) 1,2,3,4의 합을 for문을 이용하여 구해보자.\n\n_sum = 0\nfor i in [1,2,3,4]:\n    _sum = _sum + i\n\n\n_sum\n\n10\n\n\n- 예제: $ 2^0, 2^1, 2^2, 2^3$ 를 원소로 가지는 리스트를 생성\n(풀이1)\n\nx=[2**0, 2**1, 2**2, 2**3]    ## 2의 0승\nx\n\n[1, 2, 4, 8]\n\n\n(풀이2) for문을 이용\n\nx=[]\nfor i in [0,1,2,3]:\n    x.append(2**i)  \n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이3) for문을 이용\n\nx=[]\nfor i in [0,1,2,3]:\n    x= x+[2**i]\nx\n\n[1, 2, 4, 8]\n\n\n(풀이4) for문을 이용\n\nx=[]\nfor i in [0,1,2,3]:\n    x+= [2**i]\nx(풀이2) for문을 이용\n\n[1, 2, 4, 8]\n\n\n(풀이5) 리스트컴프리헨션을 이용한 풀이\n\nx= [2**i for i in [0,1,2,3]]\nx\n\n[1, 2, 4, 8]\n\n\n- 리스트컴프리헨션의 문법 암기방법 - 집합에서 조건제시법을 연상 - 원소나열법, 조건제시법 - \\(\\{2^0, 2^1, 2^2, 2^3\\} = \\{2^i: \\text{for} i \\in \\{0,1,2,3\\}\\)\n- 리스트컴프리헨션이란? - 리스트를 매우 효율적으로 만드는 테크닉 - for문에 비하여 가지고 있는 장점 : 1. 코드가 간결하다. 2, 빠르다\n- 예제: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들자.\n\n['SSSS','PPPP','AAAA','MMMM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n(풀이)\n\n[i*4 for i in 'SPAM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n- 예제: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들자.\n- 예제: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들자.\n\n['X1','X2','X3','Y1','Y2','Y3']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n(풀이)\n\nfor i in 'XY':\n    for j in '123':\n        print(i+j)\n\nX1\nX2\nX3\nY1\nY2\nY3\n\n\n\n[i+j for i in 'XY' for j in '123']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n- 예제: 리스트 컴프리헨션을 이용하여 통계1,,..,통계5,수학1,…,수학5를 만들어라\n(풀이)\n\n[i+j for i in ['stat', 'math'] for j in '12345']\n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n(다른풀이) 참고로 for문을 쓰면 좀 복잡해진다.\n\n_lst=[]\nfor x in ['stat', 'math']:\n    for y in '12345':\n        _lst = _lst + [x+y]\n\n\n_lst\n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n- 예제: ’jbnu’를 이용하여 아래와 같은 리스트르 만들어라.\n\n['j','b','n','u']\n\n['j', 'b', 'n', 'u']\n\n\n\nlist('jbnu')\n\n['j', 'b', 'n', 'u']\n\n\n(풀이)\n\n[x for x in 'jbnu']\n\n['j', 'b', 'n', 'u']\n\n\n-예제: x에는 무엇이 있을까?\n(경우1)\n\nx=1\nlst=[]\nfor x in 'jbnu':\n    lst = lst + [x]\n\n\nlst\n\n['j', 'b', 'n', 'u']\n\n\n\nx\n\n'u'\n\n\n(경우2)\n\nx=1\nlst = [x for x in 'jbnu']\nlst\n\n['j', 'b', 'n', 'u']\n\n\n\nx\n\n1\n\n\n- 예제: [X1,X2,X3,…,X100]과 같은 리스트를 만들어보자.\n(풀이)\n\n['X'+str(i) for i in [1,2,3,4]]\n\n['X1', 'X2', 'X3', 'X4']\n\n\n\n['X'+str(i) for i in [1:100]]   #오류!!\n\nSyntaxError: invalid syntax (1716365648.py, line 1)\n\n\n[예비학습]\n\nrange(0,10)\n\nrange(0, 10)\n\n\n\n_tmp = range(0,10)\n\n\ntype(_tmp)\n\nrange\n\n\n\nlist(_tmp)\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(0,10)) #0을 포함, 10을 미포함\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n이게 중요한 것. range(0,10)을 리스트화시키면 [0,1,2,…,9]와 같은기능을 얻을 수 있다.\n\n\nlist(range(10))  # 0은 생략가능\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(2,10))  # 2는 포함, 10은 미포함\n\n[2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(1,10,2))  # 2칸씩! \n\n[1, 3, 5, 7, 9]\n\n\n예비학습 끝\n\n['X'+str(i) for i in list(range(1,101))]  # 세로로 넘 길엉 \n\n['X1',\n 'X2',\n 'X3',\n 'X4',\n 'X5',\n 'X6',\n 'X7',\n 'X8',\n 'X9',\n 'X10',\n 'X11',\n 'X12',\n 'X13',\n 'X14',\n 'X15',\n 'X16',\n 'X17',\n 'X18',\n 'X19',\n 'X20',\n 'X21',\n 'X22',\n 'X23',\n 'X24',\n 'X25',\n 'X26',\n 'X27',\n 'X28',\n 'X29',\n 'X30',\n 'X31',\n 'X32',\n 'X33',\n 'X34',\n 'X35',\n 'X36',\n 'X37',\n 'X38',\n 'X39',\n 'X40',\n 'X41',\n 'X42',\n 'X43',\n 'X44',\n 'X45',\n 'X46',\n 'X47',\n 'X48',\n 'X49',\n 'X50',\n 'X51',\n 'X52',\n 'X53',\n 'X54',\n 'X55',\n 'X56',\n 'X57',\n 'X58',\n 'X59',\n 'X60',\n 'X61',\n 'X62',\n 'X63',\n 'X64',\n 'X65',\n 'X66',\n 'X67',\n 'X68',\n 'X69',\n 'X70',\n 'X71',\n 'X72',\n 'X73',\n 'X74',\n 'X75',\n 'X76',\n 'X77',\n 'X78',\n 'X79',\n 'X80',\n 'X81',\n 'X82',\n 'X83',\n 'X84',\n 'X85',\n 'X86',\n 'X87',\n 'X88',\n 'X89',\n 'X90',\n 'X91',\n 'X92',\n 'X93',\n 'X94',\n 'X95',\n 'X96',\n 'X97',\n 'X98',\n 'X99',\n 'X100']\n\n\n(아래와 같은 풀이도 가능)\n\n['X'+str(i) for i in range(1,13)]  # 리스트화해주지 않아도 가능 for i in 뒤에 list뿐 아니라.. str도 되고... \n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n\n(딴생각) for문 뒤에 올 수 있는 것이 무엇인지 생각해보자.\n\nfor i in '1234':\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in [1,2,3,4]:\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in (1,2,3,4):   # 튜플\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in {1,2,3,4}: # set\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in {'name':'iu','age':31}:   # 딕셔너리\n    print(i)\n\nname\nage\n\n\n\nfor i in range(1,5):\n    print(i)\n\n1\n2\n3\n4\n\n\n(숙제)\n리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라\n[‘X1’,‘X2X2’,‘X3X3X3’,‘X4X4X4X4’,‘X5X5X5X5X5’]\n\n[('X'+str(i))*i for i in range(1,6)]\n\n['X1', 'X2X2', 'X3X3X3', 'X4X4X4X4', 'X5X5X5X5X5']"
  },
  {
    "objectID": "posts/2. Numpy/python 7_0418.html",
    "href": "posts/2. Numpy/python 7_0418.html",
    "title": "파이썬 (0418) 7주차",
    "section": "",
    "text": "import numpy as np"
  },
  {
    "objectID": "posts/2. Numpy/python 7_0418.html#numpy공부-7단계",
    "href": "posts/2. Numpy/python 7_0418.html#numpy공부-7단계",
    "title": "파이썬 (0418) 7주차",
    "section": "numpy공부 7단계",
    "text": "numpy공부 7단계\n\nnote 1: 메소드 도움말 확인하기\n- 파이썬에서 함수를 적용하는 2가지 방식 - np.sum(a) - a.sum()\n\na=np.array([1,2,3,4,5])\na\n\narray([1, 2, 3, 4, 5])\n\n\n\na.sum()\n\n15\n\n\n\nnp.sum(a)\n\n15\n\n\n- 넘파이에서 a.sum에 대한 도움말은 보통 np.sum()에 자세히 나와있음 \\(\\to\\) np.sum()의 도움말을 확인하고 np.sum(a)와 a.sum()이 동일함을 이용하여 a.sum()의 사용법을 미루어 유추해야함\n\na.sum?\n\n\nnp.sum?\n\n\nnp.sum([0.5, 1.5])\n\n2.0\n\n\n\n\nnote2: hstack, vstack\n- hstack, vstack를 쓰는 사람도 있다.\n\na=np.arange(6)\nb=-a\n\n\nnp.vstack([a,b])\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 0, -1, -2, -3, -4, -5]])\n\n\n\nnp.stack([a,b],axis=0)\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 0, -1, -2, -3, -4, -5]])\n\n\n\nnp.hstack([a,b])\n\narray([ 0,  1,  2,  3,  4,  5,  0, -1, -2, -3, -4, -5])\n\n\n\nnp.concatenate([a,b],axis=0)\n\narray([ 0,  1,  2,  3,  4,  5,  0, -1, -2, -3, -4, -5])\n\n\n\nnote3: append\n- 기능1:reshape(-1) + concat\n\na=np.arange(30).reshape(5,6)\nb= -np.arange(8).reshape(2,2,2)\n\n\na.shape, b.shape\n\n((5, 6), (2, 2, 2))\n\n\n\nnp.append(a,b)\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,  0, -1, -2, -3,\n       -4, -5, -6, -7])\n\n\n\nnp.concatenate([a.reshape(-1), b.reshape(-1)])\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,  0, -1, -2, -3,\n       -4, -5, -6, -7])\n\n\n- 기능2: concat\n\na=np.arange(2*3*4).reshape(2,3,4)\nb=-a\n\n\na.shape, b.shape, np.append(a,b, axis=0).shape   # 대괄호를 쓰지 않아도 됨\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\na.shape, b.shape, np.append(a,b, axis=1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\na.shape, b.shape, np.append(a,b, axis=2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n- concat과의 차이?\n\na=np.arange(2*3*4).reshape(2,3,4)\nb=-a\nc=2*a\n\n\nnp.concatenate([a,b,c],axis=0)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]],\n\n       [[  0,   2,   4,   6],\n        [  8,  10,  12,  14],\n        [ 16,  18,  20,  22]],\n\n       [[ 24,  26,  28,  30],\n        [ 32,  34,  36,  38],\n        [ 40,  42,  44,  46]]])\n\n\n\n\nnote4: revel, flatten\n\na=np.arange(2*3*4).reshape(2,3,4)\na\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\na.reshape(-1) #디멘전 1차원으로\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.ravel()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.flatten()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\n\nnote 5: 기타 통계함수들\n- 평균, 중앙값, 표준편차, 분산\n\na=np.random.normal(loc=0, scale=2, size=(100,))\na\n\narray([-2.01759369e+00,  1.70831942e+00, -7.66284153e-01,  2.15177363e+00,\n        1.93917905e+00, -2.74073590e-01, -2.04642372e+00, -1.98463689e+00,\n        1.83815582e+00,  4.49207271e+00, -5.40520993e-03,  1.45933943e+00,\n       -1.88730370e+00,  2.53422937e+00, -1.43846951e+00, -2.69938884e-01,\n       -2.68912083e+00,  6.01230062e-01,  1.21155692e+00, -1.78259314e+00,\n        3.08941967e-01,  1.22338707e+00, -1.03232597e+00, -1.79667669e+00,\n        2.19458228e+00,  5.75514508e-01, -3.02570319e+00, -1.21868604e+00,\n       -9.60932070e-01,  1.11771254e+00, -5.34063250e-01, -2.68962004e+00,\n       -4.62864312e+00,  4.64113175e+00, -1.05051461e+00, -6.14152261e-01,\n       -1.56320062e+00,  1.18863285e-01,  1.71819177e+00,  5.04434396e-01,\n       -1.59021839e+00, -8.40274272e-01, -1.92903415e+00, -3.31025301e+00,\n       -5.44121948e+00,  1.71770231e+00,  1.78729433e+00,  1.04315736e+00,\n       -1.44847729e+00,  3.41070754e+00,  2.81655462e+00,  2.88886247e-01,\n        2.61248115e+00, -5.28811327e-01, -2.47391400e+00, -6.04240520e-02,\n       -2.86388739e+00,  2.50495252e+00,  5.34019240e+00,  8.27782165e-01,\n       -2.19088172e+00, -7.82626427e-01, -1.12548033e+00, -2.09109091e+00,\n       -2.06466297e+00, -5.36374068e-01, -3.65861892e+00, -1.42345921e+00,\n       -6.67080354e-01, -2.57114581e+00, -2.37356246e-01, -1.01485014e-02,\n       -3.65219208e+00,  1.30174327e+00,  9.43287089e-01, -5.41965726e-01,\n        1.89596089e+00, -3.26373304e+00, -1.66761926e+00, -1.14963754e+00,\n        4.34701574e-01, -4.87043020e-01, -5.10792557e-01, -9.05609502e-01,\n        3.51588424e-01, -9.72910253e-01, -1.11823422e+00, -8.02920775e-01,\n       -1.51091269e+00,  4.97543437e-01, -8.98957916e-03,  1.47902427e+00,\n       -8.44007525e-01, -5.03900902e-01,  1.26720080e+00, -5.25199252e+00,\n       -3.15857694e+00,  2.43006841e+00, -6.43759610e-01,  1.16296529e+00])\n\n\n\nnp.mean(a)\n\n-0.34664187661644286\n\n\n\nnp.median(a)\n\n-0.5352186588272133\n\n\n\nnp.std(a)\n\n2.0168674618593685\n\n\n\nnp.var(a)\n\n4.0677543587070515\n\n\n- corr matrix, cov matrix\n\nnp.random.seed(43052)\nx=np.random.randn(10000)\ny=np.random.randn(10000)*2\nz=np.random.randn(10000)*0.5\n\n\nnp.corrcoef([x,y,z]).round(2)\n\narray([[ 1.  , -0.01,  0.01],\n       [-0.01,  1.  ,  0.  ],\n       [ 0.01,  0.  ,  1.  ]])\n\n\n\nnp.cov([x,y,z]).round(2)\n\narray([[ 0.99, -0.02,  0.  ],\n       [-0.02,  4.06,  0.  ],\n       [ 0.  ,  0.  ,  0.25]])\n\n\n\n\nnote 6 : dtype\n- np.array는 항상 dtype이 있다.\n\na=np.array([1,2,3])\na\n\narray([1, 2, 3])\n\n\n\na.dtype\n\ndtype('int32')\n\n\n\na=np.array([1.0,2.0,3.0])\na\n\narray([1., 2., 3.])\n\n\n\na.dtype\n\ndtype('float64')\n\n\n\na=1\ntype(a)\n\nint\n\n\n\na=1.0\ntype(a)\n\nfloat\n\n\n- 같은 int라도 int16, int32, int64으로 나누어진다.\n\na= np.array([1,2,3], dtype=np.int64)\na\n\narray([1, 2, 3], dtype=int64)\n\n\n\na= np.array([1,2,3], dtype=np.int32)\na\n\narray([1, 2, 3])\n\n\n\na.dtype\n\ndtype('int32')\n\n\n- float도 float16, float32, float64가 있다.\n\na=np.array([1,2,3],dtype=np.float64) #64는 기본이라 표시가 안된당. \na\n\narray([1., 2., 3.])\n\n\n\na=np.array([1,2,3],dtype=np.float32)\na\n\narray([1., 2., 3.], dtype=float32)\n\n\n- 데이터타입은 아래와 같은 방법으로 변환시킬 수 있다.\n\na = np.array([1,2,3],dtype=np.int32)\na\n\narray([1, 2, 3])\n\n\n\na=a.astype(dtype=np.int64)\n\n\na.dtype\n\ndtype('int64')\n\n\n- 문자열의 경우\n\na= np.array(['a','b','c'])\na\n\narray(['a', 'b', 'c'], dtype='&lt;U1')\n\n\n\na= np.array(['ab','b','c'])\na\n\narray(['ab', 'b', 'c'], dtype='&lt;U2')\n\n\n\na= np.array(['absfd','b','c'])\na\n\narray(['absfd', 'b', 'c'], dtype='&lt;U5')\n\n\n- 문자열+숫자혼합 =&gt; 문자열로 통일\n\na=np.array(['a',1])\na\n\narray(['a', '1'], dtype='&lt;U11')\n\n\n\na=np.array(['a',1423])\na\n\narray(['a', '1423'], dtype='&lt;U11')\n\n\n\na=np.array(['a',1.0])\na\n\narray(['a', '1.0'], dtype='&lt;U32')\n\n\n- 숫자를 문자열로 전환:\n\na=np.array([1,2,3])\na\n\narray([1, 2, 3])\n\n\n\na.astype(np.str_)\n\n# 문자열 타입으로 바뀌는\n\narray(['1', '2', '3'], dtype='&lt;U11')\n\n\n\n\nnote 7: 브로드캐스팅과 시간측정\n(예비학습)\n\nimport time\n\n\nt1=time.time()\n\n\nt2=time.time()\nt2-t1\n\n14.808058738708496\n\n\n예비학습끝\n(예제) x=[0,1,2,3,4]인 벡터가 있다고 하자. (i,j)의 원소는 (x[i]-x[j])**2를 의미하는 \\(5\\times5\\) 매트릭스를 구하라..\n(풀이)\n\nx=np.array(range(5))\nx\n\narray([0, 1, 2, 3, 4])\n\n\n\ndist= np.zeros([5,5])\ndist\n\narray([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])\n\n\n\nfor i in range(5):\n    for j in range(5):\n        dist[i,j] = (x[i]-x[j])**2\n\n\ndist\n\narray([[ 0.,  1.,  4.,  9., 16.],\n       [ 1.,  0.,  1.,  4.,  9.],\n       [ 4.,  1.,  0.,  1.,  4.],\n       [ 9.,  4.,  1.,  0.,  1.],\n       [16.,  9.,  4.,  1.,  0.]])\n\n\n(풀이2)\n\nx1=x.reshape(5,1).astype(dtype=np.float64)\nx2=x.reshape(1,5).astype(dtype=np.float64)\n\n\nx1\n\narray([[0.],\n       [1.],\n       [2.],\n       [3.],\n       [4.]])\n\n\n\nx2\n\narray([[0., 1., 2., 3., 4.]])\n\n\n\nx1-x2\n\narray([[ 0., -1., -2., -3., -4.],\n       [ 1.,  0., -1., -2., -3.],\n       [ 2.,  1.,  0., -1., -2.],\n       [ 3.,  2.,  1.,  0., -1.],\n       [ 4.,  3.,  2.,  1.,  0.]])\n\n\n\n(i,j)th element = x[i] - x[j]\n\n\n(x1-x2)**2\n\narray([[ 0,  1,  4,  9, 16],\n       [ 1,  0,  1,  4,  9],\n       [ 4,  1,  0,  1,  4],\n       [ 9,  4,  1,  0,  1],\n       [16,  9,  4,  1,  0]], dtype=int32)\n\n\n\n\ny=x=np.array(range(10000))\n\n\ndist= np.zeros([10000,10000])\ndist\n\narray([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       ...,\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.]])\n\n\n\nt1=time.time()\nfor i in range(10000):\n    for j in range(10000):\n        dist[i,j] = (y[i]-y[j])**2\nt2=time.time()\nt2-t1\n\n66.71002793312073\n\n\n\ny1=y.reshape(10000,1).astype(np.float64)\ny2=y.reshape(1,10000).astype(np.float64)\n\n\nt1=time.time()\ndist2=(y1-y2)**2\nt2=time.time()\nt2-t1\n\n0.426450252532959\n\n\n\ndist[:5,:5], dist2[:5,:5]\n\n(array([[ 0.,  1.,  4.,  9., 16.],\n        [ 1.,  0.,  1.,  4.,  9.],\n        [ 4.,  1.,  0.,  1.,  4.],\n        [ 9.,  4.,  1.,  0.,  1.],\n        [16.,  9.,  4.,  1.,  0.]]),\n array([[ 0.,  1.,  4.,  9., 16.],\n        [ 1.,  0.,  1.,  4.,  9.],\n        [ 4.,  1.,  0.,  1.,  4.],\n        [ 9.,  4.,  1.,  0.,  1.],\n        [16.,  9.,  4.,  1.,  0.]]))\n\n\n\n(dist-dist2).sum()\n\n0.0"
  },
  {
    "objectID": "posts/2. Numpy/python 7_0418.html#matplotlib",
    "href": "posts/2. Numpy/python 7_0418.html#matplotlib",
    "title": "파이썬 (0418) 7주차",
    "section": "matplotlib",
    "text": "matplotlib\n\nimport matplotlib.pyplot as plt\n\n\nplt.plot\n- 기본그림\n\nplt.plot([1,2,3],[3,4,5],'.')\n\n\n\n\n\nplt.plot(np.array([1,2,3]),np.array([3,4,5]),'.')\n\n\n\n\n- 예제들\n\nt=np.linspace(-6,6,100)\nt\n\narray([-6.        , -5.87878788, -5.75757576, -5.63636364, -5.51515152,\n       -5.39393939, -5.27272727, -5.15151515, -5.03030303, -4.90909091,\n       -4.78787879, -4.66666667, -4.54545455, -4.42424242, -4.3030303 ,\n       -4.18181818, -4.06060606, -3.93939394, -3.81818182, -3.6969697 ,\n       -3.57575758, -3.45454545, -3.33333333, -3.21212121, -3.09090909,\n       -2.96969697, -2.84848485, -2.72727273, -2.60606061, -2.48484848,\n       -2.36363636, -2.24242424, -2.12121212, -2.        , -1.87878788,\n       -1.75757576, -1.63636364, -1.51515152, -1.39393939, -1.27272727,\n       -1.15151515, -1.03030303, -0.90909091, -0.78787879, -0.66666667,\n       -0.54545455, -0.42424242, -0.3030303 , -0.18181818, -0.06060606,\n        0.06060606,  0.18181818,  0.3030303 ,  0.42424242,  0.54545455,\n        0.66666667,  0.78787879,  0.90909091,  1.03030303,  1.15151515,\n        1.27272727,  1.39393939,  1.51515152,  1.63636364,  1.75757576,\n        1.87878788,  2.        ,  2.12121212,  2.24242424,  2.36363636,\n        2.48484848,  2.60606061,  2.72727273,  2.84848485,  2.96969697,\n        3.09090909,  3.21212121,  3.33333333,  3.45454545,  3.57575758,\n        3.6969697 ,  3.81818182,  3.93939394,  4.06060606,  4.18181818,\n        4.3030303 ,  4.42424242,  4.54545455,  4.66666667,  4.78787879,\n        4.90909091,  5.03030303,  5.15151515,  5.27272727,  5.39393939,\n        5.51515152,  5.63636364,  5.75757576,  5.87878788,  6.        ])\n\n\n\nx=np.sin(t)\ny=np.cos(t)\n\n\nplt.plot(t,x)\n\n\n\n\n\nplt.plot(t,y)\n\n\n\n\n\nplt.plot(t,x)\nplt.plot(t,y)\n\n\n\n\n\nplt.plot(t,x)\nplt.plot(t,y,'.')\n\n\n\n\n\nplt.plot(t,x)\nplt.plot(t,y,'--')\n\n\n\n\n\n\nplt.hist\n\nX=np.random.randn(1000)\n\n\nplt.hist(X)\n\n(array([  3.,  14.,  66., 157., 232., 245., 155.,  92.,  28.,   8.]),\n array([-3.29472542, -2.65210581, -2.0094862 , -1.36686658, -0.72424697,\n        -0.08162736,  0.56099226,  1.20361187,  1.84623148,  2.4888511 ,\n         3.13147071]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\nY=np.random.rand(1000)\nplt.hist(Y)\n\n(array([ 98., 127., 107.,  87.,  83.,  86.,  85., 118., 110.,  99.]),\n array([0.00162071, 0.10140453, 0.20118836, 0.30097218, 0.40075601,\n        0.50053983, 0.60032366, 0.70010748, 0.79989131, 0.89967513,\n        0.99945896]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\nplt.hist(X)\nplt.hist(Y)\n\n(array([ 98., 127., 107.,  87.,  83.,  86.,  85., 118., 110.,  99.]),\n array([0.00162071, 0.10140453, 0.20118836, 0.30097218, 0.40075601,\n        0.50053983, 0.60032366, 0.70010748, 0.79989131, 0.89967513,\n        0.99945896]),\n &lt;BarContainer object of 10 artists&gt;)"
  },
  {
    "objectID": "posts/2. Numpy/python 5_0404.html",
    "href": "posts/2. Numpy/python 5_0404.html",
    "title": "파이썬 (0404) 5주차",
    "section": "",
    "text": "소스코드 관리(모듈, 패키지, 라이브러리)\nintro\n- 현재 파이썬은 길이가 2인 벡터의 덧셈을 지원하지 않음\n\na=[1,2]\nb=[3,4]\na+b\n\n[1, 2, 3, 4]\n\n\n- 아래와 같은 기능을 구현하는 함수를 만들고 싶음\n[1,2],[3,4] -&gt; [4,6]\n- 구현\n\ndef vec2_add(a,b):\n    return [a[0]+b[0], a[1]+b[1]]\n\n- test\n\na=[1,2]\nb=[3,4]\n\n\nvec2_add(a,b)\n\n[4, 6]\n\n\nmake myfuns.py\n- 생각해보니까 vec2_add는 내가 앞으로 자주 쓸 기능임\n- 그런데 현재 사용방법으로는 내가 노트북파일을 새로 만들때마다 def vec2_add(a,b):와 같은 함수를 매번 정의해줘야 하는 불편함이 있다.\n해결1\n- 자주 사용하는 함수를 myfuns.py에 저장한다. (4주차 수업)\n# myfuns.py\ndef vec2_add(a,b):\n    return [a[0]+b[0], a[1]+b[1]]\n%run myfuns를 실행\n준비:“00” -&gt; 커널재시작\n\n# \n\n\n%run myfuns\n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n해결 2\n- 자주 사용하는 함수를 myfuns.py에 저장한다. (4주차 수업)\n# myfuns.py\ndef vec2_add(a,b):\n    return [a[0]+b[0], a[1]+b[1]]\n- import myfuns를 이용\n(준비) “00” -&gt; 커널 재시작\n\nimport myfuns\n\n\na=[1,2]\nb=[3,4]\nmyfuns.vec2_add(a,b)\n\n[4, 6]\n\n\n\nimport 기본\n-사용방법1\n준비: “00” -&gt; 커널재시작\n\nimport myfuns\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nmyfuns.vec2_add의 의미: myfuns.py라는 파일안에 vec2_add라는 함수가 있음. 그것을 실행하라.\n.의 의미: 상위, 하위의 개념!\n\n(주의) 아래와 같이 사용 불가능 하다.\n\nvec2_add([1,2],[3,4])  #myfuns가 import가 된거지 vec2Add가 import가 된 것이 아님.\n\nNameError: name 'vec2_add' is not defined\n\n\n- 사용방법2\n준비: “00” -&gt; 커널재시작\n\nfrom myfuns import vec2_add\n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nmyfuns.vec2_add([1,2],[3,4])  # myfuns안의 vec2_add만 임포트했지 myfuns자체를 임포트 한것은 아님..\n\nNameError: name 'myfuns' is not defined\n\n\n- 사용방법3\n준비: “00” -&gt; 커널재시작\n\nimport myfuns\nfrom myfuns import vec2_add\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nvec2_sub([1,2],[3,4])   # vec2_sub는 import하지 않았기 때문에 오류남.. \n\nNameError: name 'vec2_sub' is not defined\n\n\n\nmyfuns.vec2_sub([1,2],[3,4])\n\n[-2, -2]\n\n\n- 사용방법4\n준비: “00” -&gt; 커널재시작\n\nfrom myfuns import vec2_add, vec2_sub\n\n\nvec2_add([1,2],[3,4]), vec2_sub([1,2],[3,4])\n\n([4, 6], [-2, -2])\n\n\n- 사용방법5\n준비: “00” -&gt; 커널재시작\n\nfrom myfuns import *   # *는 all의 의미\n\n\nvec2_add([1,2],[3,4]), vec2_sub([1,2],[3,4])\n\n([4, 6], [-2, -2])\n\n\n- 사용방법6\n준비: “00” -&gt; 커널재시작\n\nimport myfuns as mf \n\n\nmf.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nmf.vec2_sub([1,2],[3,4])\n\n[-2, -2]\n\n\n(오히려 아래는 실행불가능)\n\nmyfuns.vec2_add([1,2],[3,4])\n\nNameError: name 'myfuns' is not defined\n\n\n- 잘못된 사용방법1\n준비: “00” -&gt; 커널재시작\n\nimport myfuns as mf\nfrom mf import vec2_add\n\nModuleNotFoundError: No module named 'mf'\n\n\n- 사용방법 7\n준비: “00” -&gt; 커널재시작\n\nimport myfuns as mf\nfrom myfuns import vec2_add as add\n\n\nmf.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nvec2_add([1,2],[3,4])   # 위에서 vec2_add를 add로 부르기로 했음. 그래서 이건 안뎀 \n\nNameError: name 'vec2_add' is not defined\n\n\n\nadd([1,2],[3,4])\n\n[4, 6]\n\n\n\n\n도움말 작성기능\n- mf란 무엇인가?\n준비: “00” -&gt; 커널재시작\n\nimport myfuns as mf\n\n\nmf\n\n&lt;module 'myfuns' from 'C:\\\\Users\\\\koinu\\\\python2022\\\\myfuns.py'&gt;\n\n\n\nmf?\n\n\nType:        module\nString form: &lt;module 'myfuns' from 'C:\\\\Users\\\\koinu\\\\python2022\\\\myfuns.py'&gt;\nFile:        c:\\users\\koinu\\python2022\\myfuns.py\nDocstring:   &lt;no docstring&gt;\n\n\n\n\ntype(mf)\n\nmodule\n\n\n\nmf의 타입은 모듈이라고 나옴, 현재 단계에서는 무엇인지 알기 어려움..\n\n- Docstring의 내용을 채울 수 있을까?\n준비1: myfuns.py의 파일을 수정한다. (큰따옴표 ““” 세개)\n준비2: “00”-&gt;커널재시작\n\nimport myfuns as mf\n\n\nmf?\n\n\nType:        module\nString form: &lt;module 'myfuns' from 'C:\\\\Users\\\\koinu\\\\python2022\\\\myfuns.py'&gt;\nFile:        c:\\users\\koinu\\python2022\\myfuns.py\nDocstring:   이것은 길이가 2인 벡터이 합 혹은 차를 구하는 모듈입니다.\n\n\n\n\n\n주의점\n- myfuns.py는 최초 한번만 import된다.\n준비: “00” -&gt; 커널재시작\n\nimport myfuns\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\nmyfuns.py파일을 열고 함수를 바꾸자.\n\"\"\"이것은 길이가 2인 벡터이 합 혹은 차를 구하는 모듈입니다.\"\"\"\n\ndef vec2_add(a,b):\n    print(\"이것은 myfuns.py에 정의된 함수입니다.\")\n    return [a[0]+b[0], a[1]+b[1]]\n\n\ndef vec2_sub(a,b):\n    return [a[0]-b[0], a[1]-b[1]]\n다시 myfuns를 로드하고 위를 실행하여 보자\n\nimport myfuns\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n바뀐내용이 적용되지 않는다.\n커널을 다시 시작하고 임포트해보자.\n“00” -&gt; 커널재시작\n\nimport myfuns\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n이것은 myfuns.py에 정의된 함수입니다.\n\n\n[4, 6]\n\n\n- myfuns.py는 주피너노트북파일과 같은 폴더내에 존재해야 한다.\n준비1: “00”-&gt;커널재시작\n준비2: myfuns.py 을 복사하여 다른 폴더로 이동. 예를들면 IP0403폴더를 만들고 그 폴더안에 myfuns2.py파일을 만들자.\n\nimport myfuns  # 주피터노트북과 같은 폴더에 있는 myfuns는 잘 로드되지만\n\n\nimport myfuns2 # 주피터노트북과 다른 폴더에 있는 myfuns2는 그렇지 않다.\n\nModuleNotFoundError: No module named 'myfuns2'\n\n\n- IP0403 폴더에 있는 myfuns2.py를 실행하기 위해서는 아래와 같이 할 수 있다.\n준비: “00” -&gt; 커널재시작\n\nfrom IP0403 import myfuns2\n\n\nmyfuns2.vec2_add([1,2],[3,4])\n\n이것은 myfuns2.py에 정의된 함수입니다.\n\n\n[4, 6]\n\n\n- 아래도 가능하다.\n준비: “00” -&gt; 커널재시작\n\nfrom IP0403.myfuns2 import vec2_add as add\n\n\nadd([1,2],[3,4])\n\n이것은 myfuns2.py에 정의된 함수입니다.\n\n\n[4, 6]\n\n\n참고로 아래는 모두 정의되지 않음\n\nIP0403.myfuns2.vec2_add([1,2],[3,4])\n\nNameError: name 'IP0403' is not defined\n\n\n\nmyfuns2.vec2_add([1,2],[3,4])\n\nNameError: name 'myfuns2' is not defined\n\n\n\nvec2_add([1,2],[3,4])\n\nNameError: name 'vec2_add' is not defined\n\n\n\n\nimport 고급\n\n폴더와 함께 사용할시\n- 언뜻 생각하면 아래가 가능할 것 같다.\nimport IP0403\nIP0403.myfuns.vec2_add([1,2],[3,4])\n- 하지만 불가능\n준비: “00” -&gt; 커널재시작\n\nimport IP0403\n\n여기까지는 됨..\n\nIP0403.myfuns2.add([1,2],[3,4])\n\nAttributeError: module 'IP0403' has no attribute 'myfuns2'\n\n\n\n여기서 불가능하다.\n\n- (암기) IP0403 폴더안에 __init__.py라는 파일을 만들고 내용에 아래와 같이 쓰면 가능하다.\n# ./IP0403/__init__.py\nform. import myfuns2\n준비1: 위의 지침을 따른다.\n준비2: “00” -&gt; 커널재시작\n\nimport IP0403\n\n\nIP0403.myfuns2.vec2_add([1,2],[3,4])  \n\n이것은 myfuns2.py에 정의된 함수입니다.\n\n\n[4, 6]\n\n\n컴퓨터 상식\n\n. : 현재폴더를 의미\n.. : 상위폴더를 의미\n./myfuns.py : 현재폴더안에 있는 myfuns.py를 의미\n./IP0403/myfuns2.py : 현재폴더안에 IP0403폴더안의 myfuns2.py를 의미\n../myfuns.py : 현재폴더보다 한단계 상위폴더에 있는 myfuns.py를 의미\ncd ./IP0403 : 현재 폴더안에 있는 IP0403폴더로 이동해라. (cd IP0403으로 줄여쓸 수 있음)\ncd .. 현재 폴더보다 한단계 상위폴더로 이동해라.\n\n따라서 from . import myfuns2는 현재 폴더에서 myfuns2를 찾아서 임포트 하라는 의미로 해석가능\n- 의미상으로 보면 아래가 실해아능할 것 같은데 불가능하다.\n\n# import myfuns.py\nfrom . import myfuns\n\nImportError: attempted relative import with no known parent package\n\n\n\n\n\nslite-packages (실습금지)\nhttps://guebin.github.io/IP2022/2022/04/03/(5%EC%A3%BC%EC%B0%A8)-4%EC%9B%942%EC%9D%BC.html#site-packages-(%EC%8B%A4%EC%8A%B5%EA%B8%88%EC%A7%80)\n\n\n모듈, 패키지, 라이브러리?\n- 모듈의 개념은 아까 살펴본 것과 같다. (import를 하여 생기게 되는 오브젝트)\n- 교수님들: 모듈이 모이면 패키지라고 부른다. 그리고 라이브러리는 패키지보다 큰 개념이다.\n-그런데 구분이 모호하다.\n\nimport numpy as np   # 오잉 왜 안되지... \n\nModuleNotFoundError: No module named 'numpy'\n\n\n\ntype(np)\n\nNameError: name 'np' is not defined\n\n\n- python 에서 numpy의 type은 모듈\n- 그런데 numpy package라고 검색하면 검색이 된다.\n- 심지어 numpy library 라고 해도 검색가능\n- 교수님 생각: 넘파이모듈, 넘파이패키지, 넘파이라이브러리 다 맞는 말임\n(숙제)\n\nimport myfuns\n\n\nmyfuns.vec2_add([1,2],[5,6])\n\n이것은 myfuns.py에 정의된 함수입니다.\n\n\n[6, 8]\n\n\n\nmyfuns?\n\n\nType:        module\nString form: &lt;module 'myfuns' from 'C:\\\\Users\\\\koinu\\\\python2022\\\\myfuns.py'&gt;\nFile:        c:\\users\\koinu\\python2022\\myfuns.py\nDocstring:   이것은 길이가 2인 벡터이 합 혹은 차를 구하는 모듈입니다. 202250926"
  },
  {
    "objectID": "posts/2. Numpy/python 6_0411.html",
    "href": "posts/2. Numpy/python 6_0411.html",
    "title": "파이썬 (0411) 6주차",
    "section": "",
    "text": "imports\n\nimport numpy as np\n\n\n\nnumpy공부 3단계: 차원\n\n2차원 배열과 연립 1차 방정식\n- 아래의 연립방정식 고려\n\\(\\begin{cases} y+z+w = 3 \\\\ x+z+w = 3 \\\\ x+y+w = 3 \\\\ x+y+z = 3 \\end{cases}\\)\n- 행렬표현?\n\\(\\begin{bmatrix} 0 & 1 & 1 & 1 \\\\ 1 & 0 & 1 & 1 \\\\ 1 & 1 & 0 & 1 \\\\ 1 & 1 & 1 & 0 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ z \\\\ w \\end{bmatrix} = \\begin{bmatrix} 3 \\\\ 3 \\\\ 3 \\\\ 3 \\end{bmatrix}\\)\n- 풀이\n\nA = np.array([[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]])\nA\n\narray([[0, 1, 1, 1],\n       [1, 0, 1, 1],\n       [1, 1, 0, 1],\n       [1, 1, 1, 0]])\n\n\n\nb= np.array([3,3,3,3]).reshape(4,1)\nb\n\narray([[3],\n       [3],\n       [3],\n       [3]])\n\n\n\nnp.linalg.inv(A) @ b \n\narray([[1.],\n       [1.],\n       [1.],\n       [1.]])\n\n\n- 다른풀이\nb를 아래와 같이 만들어도 된다.\n\nb=np.array([3,3,3,3])\nb\n\narray([3, 3, 3, 3])\n\n\n\nb.shape # b.shape은 길이가 1인 튜플로 나온다. \n\n(4,)\n\n\n\nnp.linalg.inv(A) @ b \n\narray([1., 1., 1., 1.])\n\n\n\n\n@의 유연성\n- 엄밀하게는 아래의 행렬곱이 가능하다. - (2,2) @ (2,1) =&gt; (2,1) - (1,2) @ (2,2) =&gt; (1,2)\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(2,1) \nA@b\n\narray([[ 5],\n       [11]])\n\n\n\nA.shape, b.shape, (A@b).shape\n\n((2, 2), (2, 1), (2, 1))\n\n\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(1,2) \nb@A \n\narray([[ 7, 10]])\n\n\n\nA.shape, b.shape, (b@A).shape\n\n((2, 2), (1, 2), (1, 2))\n\n\n- 당연히 아래는 성립안한다.\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(2,1) \nb@A\n\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 2 is different from 1)\n\n\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(1,2) \nA@b\n\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 1 is different from 2)\n\n\n- 아래는 어떨까? 계산가능할까? \\(\\to\\) 모두 계산가능! - (2,) @ (2,2) = (2,) - (2,2) @ (2,) = (2,)\n\nA = np.array([1,2,3,4]).reshape(2,2)\nb = np.array([1,2]) \nA@b\n\narray([ 5, 11])\n\n\n\nA.shape, b.shape, (A@b).shape \n\n((2, 2), (2,), (2,))\n\n\n\nb를 마치 (2,1)처럼 해석하여 행렬곱하고 결과는 다시 (2,) 로 만든것 같다.\n\n\nb@A\n\narray([ 7, 10])\n\n\n\nA.shape, b.shape, (b@A).shape \n\n((2, 2), (2,), (2,))\n\n\n\n이때는 \\(b\\)를 마치 (1,2)처럼 해석하여 행렬곱하고 결과는 다시 (2,)로 만든것 같다.\n\n- 아래는 어떠할까?\n\nb1 = np.array([1,2,3,4]) \nb2 = np.array([1,2,3,4]) \nb1@b2 \n\n30\n\n\n\nb1.shape, b2.shape, (b1@b2).shape \n\n((4,), (4,), ())\n\n\n\n(1,4) @ (4,1) = (1,1) 로 생각\n\n- 즉 위는 아래와 같이 해석하고 행렬곱한것과 결과가 같다.\n\nb1 = np.array([1,2,3,4]).reshape(1,4) \nb2 = np.array([1,2,3,4]).reshape(4,1) \nb1@b2 \n\narray([[30]])\n\n\n\nb1.shape, b2.shape, (b1@b2).shape \n\n((1, 4), (4, 1), (1, 1))\n\n\n- 때로는 (4,1) @ (1,4)와 같은 계산결과를 얻고 싶을 수 있는데 이때는 차원을 명시해야함\n\nb1 = np.array([1,2,3,4]).reshape(4,1) \nb2 = np.array([1,2,3,4]).reshape(1,4) \nb1@b2 \n\narray([[ 1,  2,  3,  4],\n       [ 2,  4,  6,  8],\n       [ 3,  6,  9, 12],\n       [ 4,  8, 12, 16]])\n\n\n\n\n차원\n- 넘파이배열의 차원은 .shape 으로 확인가능\n- 아래는 모두 미묘하게 다르다.\n\na=np.array(3.14) # 스칼라, 0d array \na, a.shape\n\n(array(3.14), ())\n\n\n\na=np.array([3.14]) # 벡터, 1d array \na, a.shape\n\n(array([3.14]), (1,))\n\n\n\na=np.array([[3.14]]) # 매트릭스, 2d array \na, a.shape\n\n(array([[3.14]]), (1, 1))\n\n\n\na=np.array([[[3.14]]]) # 텐서, 3d array \na, a.shape\n\n(array([[[3.14]]]), (1, 1, 1))\n\n\n\n\n\nnumpy공부 4단계: 축\n\nnp.concatenate\n- 기본예제\n\na=np.array([1,2]) \nb=-a\n\n\nnp.concatenate([a,b]) \n\narray([ 1,  2, -1, -2])\n\n\n- 응용\n\na=np.array([1,2])\nb=-a \nc=np.array([3,4,5])\n\n\nnp.concatenate([a,b,c])\n\narray([ 1,  2, -1, -2,  3,  4,  5])\n\n\n\n여기까진 딱히 칸캐터네이트의 메리트가 없어보임\n리스트였다면 a+b+c 하면 되는 기능이니까?\n\n- 2d array에 적용해보자.\n\na=np.arange(4).reshape(2,2) \nb=-a\n\n\nnp.concatenate([a,b]) \n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 0, -1],\n       [-2, -3]])\n\n\n- 옆으로 붙일려면?\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 0,  1,  0, -1],\n       [ 2,  3, -2, -3]])\n\n\n- 위의 코드에서 axis=1 이 뭐지? axis=0,2 등을 치면 결과가 어떻게 될까?\n\nnp.concatenate([a,b],axis=0)\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 0, -1],\n       [-2, -3]])\n\n\n\n이건 그냥 np.concatenate([a,b])와 같다.\nnp.concatenate([a,b])는 np.concatenate([a,b],axis=0)의 생략버전이군?\n\n\nnp.concatenate([a,b],axis=2)\n\nAxisError: axis 2 is out of bounds for array of dimension 2\n\n\n\n이런건 없다.\n\n- axis의 의미가 뭔지 궁금함. 좀 더 예제를 살펴보자.\n\na=np.array(range(2*3*4)).reshape(2,3,4)\na\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nb=-a\nb\n\narray([[[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=0) \n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=1) \n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=2) \n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\n이번에는 axis=2까지 된다?\n\n\nnp.concatenate([a,b],axis=3) \n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\naxis=3까지는 안된다?\n\n- 뭔가 나름의 방식으로 합쳐지는데 원리가 뭘까?\n(분석1) np.concatenate([a,b],axis=0)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=0).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\n첫번째차원이 바뀌었다 =&gt; 첫번째 축이 바뀌었다 =&gt; axis=0 (파이썬은 0부터 시작하니까!)\n\n(분석2) np.concatenate([a,b],axis=1)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\n두번째차원이 바뀌었다 =&gt; 두번째 축이 바뀌었다 =&gt; axis=1\n\n(분석3) np.concatenate([a,b],axis=2)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n\n세번째차원이 바뀌었다 =&gt; 세번째 축이 바뀌었다 =&gt; axis=2\n\n(분석4) np.concatenate([a,b],axis=3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=3).shape\n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\n네번째차원이 없다 =&gt; 네번째 축이 없다 =&gt; axis=3으로 하면 에러가 난다.\n\n(보너스1)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-1)\n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n\n마지막 차원이 바뀌었다 =&gt; 마지막 축이 바뀌었다 =&gt; axis = -1\n\n(보너스2)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-2)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\n마지막에서 2번째 차원이 바뀌었다 =&gt; 마지막에서 2번째 축이 바뀌었다 =&gt; axis = -2\n\n(보너스3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-3)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-3).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\n마지막에서 3번째 차원이 바뀌었다 =&gt; 마지막에서 3번째 축이 바뀌었다 =&gt; axis = -3\n\n(보너스3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-4)\n\nAxisError: axis -4 is out of bounds for array of dimension 3\n\n\n\n마지막에서 4번째 차원은 없다 =&gt; 마지막에서 4번째 축이 없다 =&gt; axis = -4는 에러가 난다.\n\n- 0차원은 축이 없으므로 concatenate를 쓸 수 없다.\n\na= np.array(1)\nb= np.array(-1) \n\n\na.shape, b.shape\n\n((), ())\n\n\n\nnp.concatenate([a,b])\n\nValueError: zero-dimensional arrays cannot be concatenated\n\n\n- 꼭 a,b가 같은 차원일 필요는 없다.\n\na=np.array(range(4)).reshape(2,2) \nb=np.array(range(2)).reshape(2,1)  \n\n\nnp.concatenate([a,b],axis=1)\n\narray([[0, 1, 0],\n       [2, 3, 1]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=1).shape\n\n((2, 2), (2, 1), (2, 3))\n\n\n\n\nnp.stack\n- 혹시 아래가 가능할까?\n\n(3,) 결합 (3,) =&gt; (3,2)\n\n\na=np.array([1,2,3])\nb=-a\n\n\na,b\n\n(array([1, 2, 3]), array([-1, -2, -3]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\nAxisError: axis 1 is out of bounds for array of dimension 1\n\n\n\n불가능\n\n- 아래와 같이 하면 해결가능\n\na=np.array([1,2,3]).reshape(3,1) \nb=-a\n\n\na,b\n\n(array([[1],\n        [2],\n        [3]]),\n array([[-1],\n        [-2],\n        [-3]]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n\n분석: (3) (3) =&gt; (3,1) (3,1) =&gt; (3,1) concat (3,1)\n\n- 위의 과정을 줄여서 아래와 같이 할 수 있다.\n\na=np.array([1,2,3])\nb=-a\n\n\nnp.stack([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n- 아래도 가능\n\nnp.stack([a,b],axis=0)\n\narray([[ 1,  2,  3],\n       [-1, -2, -3]])\n\n\n- 분석해보고 외우자\n(분석1)\n\na=np.array([1,2,3])\nb=-a\n\n\na.shape, b.shape, np.stack([a,b],axis=0).shape\n\n((3,), (3,), (2, 3))\n\n\n\n\n\n=&gt; 첫 위치에 축을 추가 (axis=0) =&gt; (1,3) (1,3) =&gt; (2,3)\n\n\n\n(분석2)\n\na=np.array([1,2,3])\nb=-a\n\n\na.shape, b.shape, np.stack([a,b],axis=1).shape\n\n((3,), (3,), (3, 2))\n\n\n\n\n\n=&gt; 두 위치에 축을 추가 (axis=1) =&gt; (3,1) (3,1) =&gt; (3,2)\n\n\n\n- 고차원예제\n\na=np.arange(3*4*5).reshape(3,4,5) \nb=-a\n\n\na.shape, b.shape\n\n((3, 4, 5), (3, 4, 5))\n\n\n\nnp.stack([a,b],axis=0).shape # (3,4,5) =&gt; (1,3,4,5) // 첫 위치에 축이 추가되고 스택 \n\n(2, 3, 4, 5)\n\n\n\nnp.stack([a,b],axis=1).shape # (3,4,5) =&gt; (3,1,4,5) // 두번째 위치에 축이 추가되고 스택 \n\n(3, 2, 4, 5)\n\n\n\nnp.stack([a,b],axis=2).shape # (3,4,5) =&gt; (3,4,1,5) // 세번째 위치에 축이 추가되고 스택 \n\n(3, 4, 2, 5)\n\n\n\nnp.stack([a,b],axis=3).shape # (3,4,5) =&gt; (3,4,5,1) // 네번째 위치에 축이 추가되고 스택 \n\n(3, 4, 5, 2)\n\n\n\nnp.stack([a,b],axis=-1).shape # axis=-1 &lt;=&gt; axis=3 \n\n(3, 4, 5, 2)\n\n\n\nnp.stack([a,b],axis=-2).shape # axis=-2 &lt;=&gt; axis=2\n\n(3, 4, 2, 5)\n\n\nnp.concatenate 는 축의 총 갯수를 유지하면서 결합, np.stack은 축의 갯수를 하나 증가시키면서 결합\n\n\nsum\n- 1차원\n\na = np.array([1,2,3]) \na\n\narray([1, 2, 3])\n\n\n\na.sum()\n\n6\n\n\n\na.sum(axis=0)\n\n6\n\n\n- 2차원\n\na=np.array(range(6)).reshape(2,3)\na\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\na.sum() # 전체합\n\n15\n\n\n\na.sum(axis=0) \n\narray([3, 5, 7])\n\n\n\na.sum(axis=1) \n\narray([ 3, 12])\n\n\n- 2차원 결과 분석\n\na.shape, a.sum(axis=0).shape\n\n((2, 3), (3,))\n\n\n\n첫번째 축이 삭제됨 =&gt; axis=0\n\n\na.shape, a.sum(axis=1).shape\n\n((2, 3), (2,))\n\n\n\n두번째 축이 삭제됨 =&gt; axis=1\n\n- 연습\n\na=np.array(range(10)).reshape(5,2) \na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n(문제1) 1열의 합, 2열의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) =&gt; (2,) 로 나와야 한다. (그럼 첫번째 축이 삭제되어야 하네?)\n\na.sum(axis=0)\n\narray([20, 25])\n\n\n(문제2) 1행의 합, 2행의 합, … , 5행의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) =&gt; (5,)로 나와야 한다. (그럼 두번째 축이 삭제되어야 하네?)\n\na.sum(axis=1)\n\narray([ 1,  5,  9, 13, 17])\n\n\n(문제3) a의 모든원소의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) =&gt; () 로 나와야 한다. (첫번째축, 두번째축이 모두 삭제되어야 하네?)\n\na.sum(axis=(0,1))\n\n45\n\n\n\na.sum() # 즉 a.sum(axis=(0,1))이 디폴트값임 \n\n45\n\n\n\n\nmean, std, max, min, prod\n- 모두 sum이랑 유사한 논리\n\na=np.array(range(10)).reshape(5,2)\na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n\na.mean(axis=0), a.std(axis=0), a.max(axis=0), a.min(axis=0), a.prod(axis=0)\n\n(array([4., 5.]),\n array([2.82842712, 2.82842712]),\n array([8, 9]),\n array([0, 1]),\n array([  0, 945]))\n\n\n\na.mean(axis=1), a.std(axis=1), a.max(axis=1), a.min(axis=1), a.prod(axis=1)\n\n(array([0.5, 2.5, 4.5, 6.5, 8.5]),\n array([0.5, 0.5, 0.5, 0.5, 0.5]),\n array([1, 3, 5, 7, 9]),\n array([0, 2, 4, 6, 8]),\n array([ 0,  6, 20, 42, 72]))\n\n\n- 참고로 std는 분포를 n으로 나눈다.\n\na=np.array([1,2,3,4])\na.std()\n\n1.118033988749895\n\n\n\nnp.sqrt(sum((a-a.mean())**2)/4)\n\n1.118033988749895\n\n\n- 분모를 n-1로 나눌려면?\n\na=np.array([1,2,3,4])\na.std(ddof=1)\n\n1.2909944487358056\n\n\n\nnp.sqrt(sum((a-a.mean())**2)/3)\n\n1.2909944487358056\n\n\n\n\nargmax, argmin\n- 1차원\n\na= np.array([1,-2,3,10,4])\na\n\narray([ 1, -2,  3, 10,  4])\n\n\n\na.argmax() # 가장 큰 값이 위치한 원소의 인덱스를 리턴 \n\n3\n\n\n\na.argmin() # 가장 작은 값이 위치한 원소의 인덱스를 리턴 \n\n1\n\n\n- 2차원\n\nnp.random.seed(43052)\na=np.random.randn(4*5).reshape(4,5)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368,  0.23778744],\n       [ 0.35595116, -1.66307542, -1.38277318, -1.92684484, -1.4862163 ],\n       [ 0.00692519, -0.03488725, -0.34357323,  0.70895648, -1.55100608],\n       [ 1.34565583, -0.05654272, -0.83017342, -1.46395159, -0.35459593]])\n\n\n\na.argmin(), a.min()\n\n(8, -1.9268448358915802)\n\n\n\na.argmax(), a.max()\n\n(15, 1.3456558341738827)\n\n\n\na.argmin(axis=0), a.argmin(axis=1)\n\n(array([2, 1, 1, 1, 2]), array([4, 3, 4, 3]))\n\n\n\na.argmax(axis=0), a.argmax(axis=1)\n\n(array([3, 0, 0, 2, 0]), array([2, 0, 3, 0]))\n\n\n\n\ncumsum, cumprod\n- 1차원\n\na=np.array([1,2,3,4])\na\n\narray([1, 2, 3, 4])\n\n\n\na.cumsum()\n\narray([ 1,  3,  6, 10])\n\n\n\na.cumprod()\n\narray([ 1,  2,  6, 24])\n\n\n- 2차원\n\na=np.array(range(3*4)).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\na.cumsum(axis=0), a.cumsum(axis=1)\n\n(array([[ 0,  1,  2,  3],\n        [ 4,  6,  8, 10],\n        [12, 15, 18, 21]]),\n array([[ 0,  1,  3,  6],\n        [ 4,  9, 15, 22],\n        [ 8, 17, 27, 38]]))\n\n\n\na.cumprod(axis=0), a.cumprod(axis=1)\n\n(array([[  0,   1,   2,   3],\n        [  0,   5,  12,  21],\n        [  0,  45, 120, 231]]),\n array([[   0,    0,    0,    0],\n        [   4,   20,  120,  840],\n        [   8,   72,  720, 7920]]))\n\n\n\n\ndiff\n- 1차차분\n\na=np.array([1,2,4,6,7])\na\n\narray([1, 2, 4, 6, 7])\n\n\n\nnp.diff(a)\n\narray([1, 2, 2, 1])\n\n\n- 2차차분\n\nnp.diff(np.diff(a))\n\narray([ 1,  0, -1])\n\n\n- prepend, append\n\na=np.array([1,2,4,6,7])\na\n\narray([1, 2, 4, 6, 7])\n\n\n\nnp.diff(a,prepend=100)\n#np.diff(np.array([100]+a.tolist()) )\n\narray([-99,   1,   2,   2,   1])\n\n\n\n[1,2,4,6,7] -&gt; [100,1,2,3,4,6] -&gt; np.diff\n\n\nnp.diff(a,append=100)\n#np.diff(np.array(a.tolist()+[100]) )\n\narray([ 1,  2,  2,  1, 93])\n\n\n(예제) a=[1,2,4,6,7]의 앞에 1을 추가하여 차분하라.\n\nnp.diff(a,prepend=a[0])\n#np.diff(a,prepend=1)\n\narray([0, 1, 2, 2, 1])\n\n\n(예제) a=[1,2,4,6,7]의 뒤에 7을 추가하여 차분하라.\n\nnp.diff(a,append=a[-1])\n#np.diff(a,append=7)\n\narray([1, 2, 2, 1, 0])\n\n\n- 2차원 array의 차분\n\na=np.arange(24).reshape(4,6)\na\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\nnp.diff(a,axis=0) \n\narray([[6, 6, 6, 6, 6, 6],\n       [6, 6, 6, 6, 6, 6],\n       [6, 6, 6, 6, 6, 6]])\n\n\n\nnp.diff(a,axis=1) \n\narray([[1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1]])\n\n\n(숙제)\n\na=np.arange(24).reshape(4,6)\na\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n에서 axis=1 옵션으로 np.diff를 적용하여 (4,5) array를 만들고 왼쪽열에 1이 포함된 column을 추가하여 최종 결과가 아래와 같이 되도록 하라.\narray([[1, 1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1, 1]])"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Boram-coco",
    "section": "",
    "text": "Everyday with Coco"
  }
]